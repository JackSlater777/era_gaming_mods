ZVSE2
; Author:   Archer30
; Original Author: Bonizag
; Engine:   ERM 2.0+
; Requires: ERA 3.3+, Era Erm Framework

; There is a 1/4 chance that a random hero will appear on the monster's side and help them fight.


// Mark the battle if it is with a neutral stack
// This variable will be reset at the end of battle
!?OB(OBJ_MONSTER)&1000;
!!UN:P72/?(wogOption:y);
!!VRi^wog_72_isNeutralBattle^&(wogOption):S(TRUE);


// Manage variables before the battle, generates the neutral hero
!?FU(OnBeforeBattle)&i^wog_72_isNeutralBattle^/i^battle_hero_1^=(NO_HERO);
; Check if it is lucky enough to encounter the neutral hero or else
!!VRi^wog_72_randHeroActive^:S(FALSE);
!!VR(random:y):R0/0/3;                  [25% chance]
!!VR(random)&i^Random_Neutral_Hero^:S0; [Always generate a neutral hero if Always Random Hero is enabled]

; Get an available random hero and generate on the battlefield if lucky enough
!!if&(random)=0;
  !!VRi^wog_72_randHeroActive^:S(TRUE);
  !!FU(WOG_72_GetHeroesInTaverns):P?(heroesInTaverns:y);
  !!FU(WOG_72_GetRandomHero):P(heroesInTaverns)/?i^battle_hero_1^;
  *!FU(WOG_72_SetRandomHeroOwner):Pi^battle_hero_1^; [disable for now as it is no longer required]
  !!BA:H1/i^battle_hero_1^;
!!en;

!?FU(WOG_72_GetHeroesInTaverns);
!#VA(heroesInTaverns:x);

!!FU(NewIntArray):P?(heroesInTaverns);

; Loop through all taverns and store hero numbers in the array
!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Vi/?(leftHero:y)/?(rightHero:y);
  !!FU(Array_Push)&(leftHero)>(NO_HERO):P(heroesInTaverns)/(leftHero);
  !!FU(Array_Push)&(rightHero)>(NO_HERO):P(heroesInTaverns)/(rightHero);
!!en;

!!SN:F^ExtendArrayLifetime^/(heroesInTaverns);

!?FU(WOG_72_GetRandomHero);
!#VA(heroesInTaverns:x) (hero:x);

!!VR(heroAvailable:y):S(TRUE);
; Check if Hourglass of Asmodeus is enabled to decide whether to include Xeron to the list
!!UN:P106/?(asmodeusOn:y);

!!if&(asmodeusOn);
  !!VR(lastHero:y):S(HERO_BORAGUS);
!!el;
  !!VR(lastHero):S(HERO_LAST_WOG);
!!en;

!!SN:M(heroesInTaverns)/?(size:y);
!!FU(NewIntArray):P?(availHeroes:y);

; Loop through all the heroes
!!re i/(HERO_FIRST)/(lastHero);
  ; Check if the hero has an owner
  !!HEi:O?(owner:y);

  ; Check if the hero is in tavern if with no owner
  !!if&(owner)=(NO_OWNER);

    !!re (index:y)/0/(size)/1/-1;
      !!SN:M(heroesInTaverns)/(index)/?(tavernHero:y);

      !!br&i=(tavernHero);
    !!en;

    ; Check if the hero is on the map if not in the tavern
    !!if&(index)=(size);                [index = size if the loop of tavern hero array didn't break]
      !!HEi:P?(x:y)/?(y:y)/?(z:y);

      ; Push the hero to the available heroes array if all the criteria is matched
      !!FU(Array_Push)&(z)<0:P(availHeroes)/i;
    !!en;
  !!en;
!!en;

!!SN:M(availHeroes)/?(size);
!!VR(lastIndex:y):S(size) -1;
!!VR(index):R0/0/(lastIndex);
!!SN:M(availHeroes)/(index)/?(hero);


// Store neutral stacks in global vars (in order to return them on battle replay)
// The timeing is slightly late in order to be compatible with other scripts
// These variables will be reset at the end of battle or upon loading the game
!?FU(OnSetupBattlefield)&i^wog_72_randHeroActive^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/?i^wog_72_replayType_%i^/?i^wog_72_replayNum_%i^;
!!en;


// Restore neutral stacks on battle replay
!?FU(OnBattleReplay)&i^wog_72_randHeroActive^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/i^wog_72_replayType_%i^/i^wog_72_replayNum_%i^;
!!en;


// Reset variables
!$OB(OBJ_MONSTER)&i^battle_hasHuman^/i^wog_72_randHeroActive^;
!!VRi^wog_72_isNeutralBattle^:S(FALSE);
!!VRi^wog_72_randHeroActive^:S(FALSE);

!?FU(OnAfterLoadGame);
!!VRi^wog_72_isNeutralBattle^:S(FALSE);
!!VRi^wog_72_randHeroActive^:S(FALSE);


// Prevent neutral hero from surrendering
!?FU(OnBeforeBattleAction)&i^wog_72_randHeroActive^;
!!BG:A?(actionType:y);

!!if&(actionType)=(BATTLE_ACTION_RETREAT)/i^battle_current_side^=(BATTLE_RIGHT);
  !!BMi^battle_current_stack^:T?t;

  !!if|t<(MON_CATAPULT)/t>(MON_ARROW_TOWERS);
    !!BG:A(BATTLE_ACTION_WALK_AND_ATTACK);
  !!el;
    !!BG:A(BATTLE_ACTION_DEFEND);
  !!en;
!!en;


// Function for setting an owner for the random hero (for compatibility with HD Mod 5.2 R95)
// Fighting a hero with no owner will prevent entering quick combat
// This might not be needed in the later versions.
!?FU(WOG_72_SetRandomHeroOwner);
!#VA(hero:x);

; Look for a player that isn't in the game
!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Ii/?(isAi:y)/?(hasLost:y);

  !!br&(hasLost);
!!en;

!!if&i<=(PLAYER_LAST);
  !!HE(hero):Oi;
!!el;
  ; Look for an enemy AI player if the game has all 8 players
  !!OW:T(CURRENT_PLAYER)/?(currTeam:y);

  !!re j/(PLAYER_FIRST)/(PLAYER_LAST);
    !!OW:Ij/?(isAi:y);
    !!OW:Tj/?(team:y);

    !!br&(isAi)/(currTeam)<>(team);
  !!en;

  !!if&j<=(PLAYER_LAST);
    !!HE(hero):Oj;
  !!el;
    ; Just look for a player differs with current
    !!OW:C?(currPlayer:y);

    !!re k/(PLAYER_FIRST)/(PLAYER_LAST);

      !!if&k<>(currPlayer);
        !!HE(hero):Ok;

        !!br;
      !!en;
    !!en;
  !!en;
!!en;
