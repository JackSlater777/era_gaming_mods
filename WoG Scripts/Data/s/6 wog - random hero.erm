ZVSE2
; Author:   Archer30
; Original Author: Bonizag
; Engine:   ERM 2.0+
; Requires: ERA 3.3+, Era Erm Framework


; Check if the option is enabled on day 1
; The timeing is slightly late in order to be compatible with other scripts
!?FU(OnEveryDay)&i^timerOnce^/i^timerDay^=1;
!!UN:P72/?i^randHero_enabled^;

; Mark the battle if it is with a neutral stack
; This variable will be reset at the end of battle
!?OB(OBJ_MONSTER)&1000/i^randHero_enabled^;
!!VRi^randHero_neutralStackBattle^:S(TRUE);

; Manage variables before the battle, generates the neutral hero
!?FU(OnBeforeBattle)&i^randHero_neutralStackBattle^/i^battle_hero_1^=(NO_HERO);
; Check if it is lucky enough to encounter the neutral hero or else
!!VRi^Random_Hero_Active^:S(FALSE);
!!VR(random:y):T0/0/3;                  [25% chance]
!!VR(random)&i^Random_Neutral_Hero^:S0; [Compatible with Always Random Hero]
!!FU&(random)<>0:E;

; Get an available random hero and generate on the battlefield
!!VRi^Random_Hero_Active^:S(TRUE);
!!FU(randHero_GetHeroesInTaverns):P?(heroesInTaverns:y);
!!FU(randHero_GetRandomHero):P(heroesInTaverns)/?i^battle_hero_1^;
!!BA:H1/i^battle_hero_1^;

!?FU(randHero_GetHeroesInTaverns);
!#VA(heroesInTaverns:x);
!!FU(NewIntArray):P?(heroesInTaverns);
; Loop through all tavern and store hero numbers in the array
!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Vi/?(leftHero:y)/?(rightHero:y);
  !!FU(Array_Push)&(leftHero)>(NO_HERO):P(heroesInTaverns)/(leftHero);
  !!FU(Array_Push)&(rightHero)>(NO_HERO):P(heroesInTaverns)/(rightHero);
!!en;
!!SN:F^ExtendArrayLifetime^/(heroesInTaverns);

!?FU(randHero_GetRandomHero);
!#VA(heroesInTaverns:x) (hero:x);

!!VR(heroAvailable:y):S(TRUE);
; Check is Hourglass of Asmodeus is enabled to dicide whether include Xeron to the list
!!UN:P106/?(asmodeusOn:y);

!!if&(asmodeusOn);
  !!VR(lastHero:y):S(HERO_BORAGUS);
!!el;
  !!VR(lastHero:y):S(HERO_LAST_WOG);
!!en;
; Check if the hero belongs to no player
!!re i;
  !!VR(hero):S(HERO_FIRST) R(lastHero);
  !!HE(hero):O?(owner:y);
  !!co&(owner)<>(NO_OWNER);
  !!SN:M(heroesInTaverns)/?(size:y);

  !!re (index:y)/0/(size)/1/-1;
    !!SN:M(heroesInTaverns)/(index)/?(tavernHero:y);
    !!co2&(hero)=(tavernHero);
  !!en;

  !!HE(hero):P?(x:y)/?(y:y)/?(z:y);
  !!co|(x)>=0/(y)>=0/(z)>=0;
  !!br;
!!en;

; Store neutral stacks in global vars (in order to return them on battle replay)
; The timeing is slightly late in order to be compatible with other scripts
; These variables will be reset at the end of battle
!?FU(OnSetupBattlefield)&i^Random_Hero_Active^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/?i^Replay_Battle_Monster_%i^/?i^Replay_Slot_Number_%i^;
!!en;

; Restore neutral stacks on battle replay
!?FU(OnBattleReplay)&i^Random_Hero_Active^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/i^Replay_Battle_Monster_%i^/i^Replay_Slot_Number_%i^;
!!en;

; Reset variables
!?FU(OnAfterBattleUniversal)&i^Random_Hero_Active^;
!!VRi^randHero_neutralStackBattle^:S(FALSE);

!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!VRi^Replay_Battle_Monster_%i^:S(NO_MON);
  !!VRi^Replay_Slot_Number_%i^:S0;
!!en;
!!VRi^Random_Hero_Active^:S(FALSE);