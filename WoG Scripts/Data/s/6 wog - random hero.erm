ZVSE2
; Author:   Archer30
; Original Author: Bonizag
; Engine:   ERM 2.0+
; Requires: ERA 3.3+, Era Erm Framework

; There is a 1/4 chance that a random hero will appear on the monster's side and help them fight.


// Mark the battle if it is with a neutral stack
// This variable will be reset at the end of battle
!?OB(OBJ_MONSTER)&1000;
!!UN:P72/?(wogOption:y);
!!VRi^wog_72_neutralStackBattle^&(wogOption):S(TRUE);

// Manage variables before the battle, generates the neutral hero
!?FU(OnBeforeBattle)&i^wog_72_neutralStackBattle^/i^battle_hero_1^=(NO_HERO);
; Check if it is lucky enough to encounter the neutral hero or else
!!VRi^Random_Hero_Active^:S(FALSE);
!!VR(random:y):R0/0/3;                  [25% chance]
!!VR(random)&i^Random_Neutral_Hero^:S0; [Compatibility with Always Random Hero]

; Get an available random hero and generate on the battlefield if lucky enough
!!if&(random)=0;
  !!VRi^Random_Hero_Active^:S(TRUE);
  !!FU(WOG_72_GetHeroesInTaverns):P?(heroesInTaverns:y);
  !!FU(WOG_72_GetRandomHero):P(heroesInTaverns)/?i^battle_hero_1^;
  !!BA:H1/i^battle_hero_1^;
!!en;

!?FU(WOG_72_GetHeroesInTaverns);
!#VA(heroesInTaverns:x);

!!FU(NewIntArray):P?(heroesInTaverns);

; Loop through all taverns and store hero numbers in the array
!!re i/(PLAYER_FIRST)/(PLAYER_LAST);
  !!OW:Vi/?(leftHero:y)/?(rightHero:y);
  !!FU(Array_Push)&(leftHero)>(NO_HERO):P(heroesInTaverns)/(leftHero);
  !!FU(Array_Push)&(rightHero)>(NO_HERO):P(heroesInTaverns)/(rightHero);
!!en;

!!SN:F^ExtendArrayLifetime^/(heroesInTaverns);

!?FU(WOG_72_GetRandomHero);
!#VA(heroesInTaverns:x) (hero:x);

!!VR(heroAvailable:y):S(TRUE);
; Check if Hourglass of Asmodeus is enabled to decide whether to include Xeron to the list
!!UN:P106/?(asmodeusOn:y);

!!if&(asmodeusOn);
  !!VR(lastHero:y):S(HERO_BORAGUS);
!!el;
  !!VR(lastHero):S(HERO_LAST_WOG);
!!en;

; Loop through all heroes
!!re i;
  ; Check if the hero has an owner
  !!VR(hero):R0/(HERO_FIRST)/(lastHero);
  !!HE(hero):O?(owner:y);

  ; Check if the hero is in tavern if with no owner
  !!if&(owner)=(NO_PLAYER);
    !!SN:M(heroesInTaverns)/?(size:y);

    !!re (index:y)/0/(size)/1/-1;
      !!SN:M(heroesInTaverns)/(index)/?(tavernHero:y);
      !!br&(hero)=(tavernHero);
    !!en;

    ; Check if the hero is on the map if not in the tavern
    !!if&(index)=(size);                [index = size if the loop of tavern hero array didn't break]
      !!HE(hero):P?(x:y)/?(y:y)/?(z:y);
      ; End the loop if the hero is not in the tavern, otherwise, look for the next random hero
      !!br&(z)<0;
    !!en;
  !!en;
!!en;

// Store neutral stacks in global vars (in order to return them on battle replay)
// The timeing is slightly late in order to be compatible with other scripts
// These variables will be reset at the end of battle or upon loading the game
!?FU(OnSetupBattlefield)&i^Random_Hero_Active^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/?i^Replay_Battle_Monster_%i^/?i^Replay_Slot_Number_%i^;
!!en;

// Restore neutral stacks on battle replay
!?FU(OnBattleReplay)&i^Random_Hero_Active^;
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M1/i/i^Replay_Battle_Monster_%i^/i^Replay_Slot_Number_%i^;
!!en;

// Reset variables
!?FU(OnAfterBattleUniversal)&i^Random_Hero_Active^;
!!VRi^wog_72_neutralStackBattle^:S(FALSE);

!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!VRi^Replay_Battle_Monster_%i^:S(NO_MON);
  !!VRi^Replay_Slot_Number_%i^:S0;
!!en;

!!VRi^Random_Hero_Active^:S(FALSE);

!?FU(OnAfterLoadGame);
!!VRi^wog_72_neutralStackBattle^:S(FALSE);
!!VRi^Random_Hero_Active^:S(FALSE);

// Prevent neutral hero from surrendering
!?FU(OnBeforeBattleAction)&i^Random_Hero_Active^;
!!BG:A?(actionType:y);

!!if&(actionType)=(BATTLE_ACTION_RETREAT)/i^battle_current_side^=(BATTLE_RIGHT);
  !!BMi^battle_current_stack^:T?t;

  !!if|t<(MON_CATAPULT)/t>(MON_ARROW_TOWERS);
    !!BG:A(BATTLE_ACTION_WALK_AND_ATTACK);
  !!el;
    !!BG:A(BATTLE_ACTION_DEFEND);
  !!en;
!!en;
