ZVSE2

** ENHANCED SECONDARY SKILLS  -  ERM script 48

** By Arstahd
** Version: 1.11   updated 22.2(Febrary).2012 by rennyo
** Updated: Sep 2022 by Archer30
** Special thanks to Hermann the Weird for help with bug fixing and script maintenance

*  Variables used: s, r, j
*  V Variables used: v7018-v7054
*  Z Variables used: z1-z3, z700-z706
*  Y Variables used: y1-y11
*  W Variables used: w4-w8
*  Functions used: 7001-7026   (7016, 7018, 7022 not used)
*  Flags used: 1, 2


***  Artillery  ***
**      Ballista does (1-50 + hero level) damage to an enemy stack prior to a battle (attacker or defender). Will not wipe out a stack. Gives Experience.
**      Ammo Cart adds 100% damage (more shots).
**      Artillery increases the effect of the ballista.
**      Basic: adds 100% damage, Advanced: adds 200% damage, Expert: adds 300% damage
***  Eagle Eye  ***
**      Grants the ability to counter a beneficial spell cast by the enemy.
**      Drains 8 spell points from caster (7 with water magic skill).
**      Basic: 10%, Advanced: 20%, Expert: 30%
**      Bird of Perception, Stoic Watchman, & Emblem of Cognizance increase the chance.
**      New combination artifact - (above three) adds 30% to chance to counter enemy hero's spells
***  Estates  ***
**      For each level of estates:
**      The hero will generate an additional 5 gold per hero level every day.
**      The hero will generate 1-3 units of a resource every week, doubled for wood or ore.
**      The resource types will be randomly set when the skill is learned.
***  First Aid  ***
**      First Aid Tent resurrects (1-50 + hero level) HP's of dead troops for the winner of a battle (attacker or defender).
**      Ammo Cart adds 100% HP's (medical supplies).
**      First Aid increases the effect of the first aid tent.
**      Basic: adds 100% HP's, Advanced: adds 200% HP's, Expert: adds 300% HP's
***  Learning  ***
**      Hero gains experience every day.
**      Basic: +100, Advanced: +200, Expert: +300
***  Luck  ***
**      Luck gives each stack in a hero's army a chance to get +2 Attack, +2 Defence and Fortune for a battle.
**      Basic: 10% - up to 1 stack, Advanced: 20% - up to 2 stacks, Expert: 30% - up to 3 stacks
***  Mysticism  ***
**      Mysticism makes it more difficult for an enemy to cast spells, effectively reducing the enemy's spell points for the battle.
**      Basic: 80% of normal, Advanced: 70% of normal, Expert: 60% of normal
***  Navigation  ***
**      Navigation increases attack and defence during naval battles.
**      Basic: +1, Advanced: +2, Expert: +3
***  Pathfinding  ***
**      Pathfinding raises the minimum daily starting movement on land (after any movement bonuses are taken into account)
**      Basic: 1700 (6), Advanced: 1760 (7), Expert: 1830 (8)
***  Resistance  ***
**      Resistance endows a hero's troops with magic resistance. Increased chances.
**      Basic: 10%, Advanced: 20%, Expert: 30%
**      New combination artifact - Boots of Polarity, Garniture of Inteference, Surcoat of Counterpoise
**      Doubles effect of artifacts (+30% to artifact bonus)
***  Scholar  ***
**      Each week a hero will attempt to research a new spell.
**      Basic: 40% up to 2nd, Advanced: 50% up to 3rd, Expert 60% up to 4th.
***  Scouting  ***
**      Scouting gives a hero a small chance for a random event for each step taken.
**      Basic: 1%, Advanced: 1.5%, Expert: 2%
***  Sorcery  ***
**      Sorcery increases the damage of hero's spells. Increased percentages.
**      Basic: +10%, Advanced: +20%, Expert: +30%
***  Armorer  ***
**      Armorer reduces the damage a hero's troops receive. Increased percentages.
**      Basic: -10%, Advanced: -15%, Expert: -20%


** Initialization Code

!?FU(OnAfterErmInstructions);
!!UN:P201/?i^wog_201_enabled^;                 [Check if Artillery is enabled in WoGify Options]
!!UN:P202/?i^wog_202_enabled^;                 [Check if Eagle Eye is enabled in WoGify Options]
!!UN:P203/?i^wog_203_enabled^;                 [Check if Estates is enabled in WoGify Options]
!!UN:P204/?i^wog_204_enabled^;                 [Check if First Aid is enabled in WoGify Options]
!!UN:P205/?i^wog_205_enabled^;                 [Check if Learning is enabled in WoGify Options]
!!UN:P206/?i^wog_206_enabled^;                 [Check if Luck is enabled in WoGify Options]
!!UN:P207/?i^wog_207_enabled^;                 [Check if Mysticism is enabled in WoGify Options]
!!UN:P208/?i^wog_208_enabled^;                 [Check if Navigation is enabled in WoGify Options]
!!UN:P209/?i^wog_209_enabled^;                 [Check if Pathfinding is enabled in WoGify Options]
!!UN:P211/?i^wog_211_enabled^;                 [Check if Scholar is enabled in WoGify Options]
!!UN:P212/?i^wog_212_enabled^;                 [Check if Scouting is enabled in WoGify Options]

; Set up new names and descriptions for War Machines
!!SN&i^wog_204_enabled^:H^art^/(ART_FIRST_AID_TENT)/1/z148000;
!!SN&i^wog_201_enabled^:H^art^/(ART_BALLISTA)/1/z148001;

!!if|i^wog_204_enabled^/i^wog_201_enabled^;
  !!SN:H^art^/(ART_AMMO_CART)/0/z148003;
  !!SN:H^art^/(ART_AMMO_CART)/1/z148002;
!!en;

; Disable the feature to remove Eagle Eye II skill when the hero has learned all the spells if Eagle Eye I is enabled
!!VRi^wog_103_removeEagleEye^&i^wog_202_enabled^:S(FALSE);

** end of Initialization Code

; Set up Armorer and Sorcery II values
!?FU(OnStartOrLoad);
!!UN:P214/?(armorer:y);

!!if&(armorer);
  !!UN:C6547980/(UNC_INT)/?i^wog_214_patch1^;
  !!UN:C6547984/(UNC_INT)/?i^wog_214_patch2^;
  !!UN:C6547988/(UNC_INT)/?i^wog_214_patch3^;

  !!UN:C6547980/(UNC_INT)/1036831949;                   [set basic armorer]
  !!UN:C6547984/(UNC_INT)/1041865112;                   [set advance armorer]
  !!UN:C6547988/(UNC_INT)/1045220556;                   [set expert armorer]
!!en;

!!UN:P213/?(sorceryII:y);

!!if&(sorceryII);
  !!UN:C6548092/(UNC_INT)/?i^wog_213_patch1^;
  !!UN:C6548096/(UNC_INT)/?i^wog_213_patch2^;
  !!UN:C6548100/(UNC_INT)/?i^wog_213_patch3^;

  !!UN:C6548092/(UNC_INT)/1036831949;                   [set basic sorcery]
  !!UN:C6548096/(UNC_INT)/1045220556;                   [set advance sorcery]
  !!UN:C6548100/(UNC_INT)/1050253721;                   [set expert sorcery]
!!en;

; Restore Armorer and Sorcery II values
!?FU(OnGameLeave);
!!UN:P214/?(armorer:y);

!!if&(armorer);
  !!UN:C6547980/(UNC_INT)/i^wog_214_patch1^;
  !!UN:C6547984/(UNC_INT)/i^wog_214_patch2^;
  !!UN:C6547988/(UNC_INT)/i^wog_214_patch3^;
!!en;

!!UN:P213/?(sorceryII:y);

!!if&(sorceryII);
  !!UN:C6548092/(UNC_INT)/i^wog_213_patch1^;
  !!UN:C6548096/(UNC_INT)/i^wog_213_patch2^;
  !!UN:C6548100/(UNC_INT)/i^wog_213_patch3^;
!!en;

** Заплатка к скриптам Грамотность и Орлиный глаз I, не позволяющая изучать
** запрещенные заклинания после загрузки\перезагрузки сейва

!?FU(OnAfterLoadGame);
!!UN:P152/?y1;                                [Summon Boat: y1=1 if banned]
!!UN&y1=1:J0/0/1;                             [Disable Summon Boat]
!!UN:P153/?y2;                                [Water Walk: y2=1 if banned]
!!UN&y2=1:J0/7/1;                             [Disable Water Walk]
!!UN:P154/?y3;                                [Town Portal: y3=1 if banned]
!!UN&y3=1:J0/9/1;                             [Disable Town Portal]
!!UN:P155/?y4;                                [Dimension Door: y4=1 if banned]
!!UN&y4=1:J0/8/1;                             [Disable Dimension Door]
!!UN:P156/?y5;                                [Fly: y5=1 if banned]
!!UN&y5=1:J0/6/1;                             [Disable Fly]
!!UN:P221/?y6;                                [Scuttle Boat: y6=1 if banned]
!!UN&y6=1:J0/1/1;                             [Disable Scuttle Boat]
!!UN:P222/?y7;                                [Visions: y7=1 if banned]
!!UN&y7=1:J0/2/1;                             [Disable Visions]
!!UN:P223/?y8;                                [Armageddon: y8=1 if banned]
!!UN&y8=1:J0/26/1;                            [Disable Armageddon]
!!UN:P246/?y9;                                [View Air: y9=1 if banned]
!!UN&y9=1:J0/5/1;                             [Disable View Air]
!!UN:P247/?y10;                               [View Earth: y10=1 if banned]
!!UN&y10=1:J0/3/1;                            [Disable View Earth]

** Timer routines
!?FU(OnEveryDay)|i^wog_203_enabled^/i^wog_205_enabled^/i^wog_209_enabled^;      [daily - continue if either estates, learning, pathfinding enabled]
!!DO7020/0/155/1:P0;                           [iterate through all heroes]

!?FU(OnEveryDay)&i^timerWeekday^=1/i^timerDay^>1; [weekly - continue if estates or scholar enabled]
!!DO7012/0/155/1|i^wog_203_enabled^/i^wog_211_enabled^:P;            [iterate through all heroes]
** end of timer routines

** start of movement trigger
!?HM-1|i^wog_208_enabled^/i^wog_212_enabled^;                        [continue if navigation or scouting enabled]
!!HE-1:N?v7020 O?y-2;                          [get #, owner of hero]
!!OW:C?y-3 Iy-3/?y-4 Gy-3/?y-5;                [get current player]
!!FU&y-2<>y-3:E;                               [exit if not current player's hero]
!!FU&y-4=0/y-5=0:E;
!!HEv7020:P?v7023/?v7024/?v7025;               [get hero's position]
!!TR7023:T?y-5/d/d/d/d/d/d/d;                  [get terrain type]

!!IF:Wv7020;                                   [enable hero variable]
!!VRw4&i^wog_208_enabled^/y-5<>8:S0;                      [reset w4 if not on water - if enabled]
!!HEv7020&i^wog_208_enabled^/y-5=8:S5/?w4;                [get hero's navagation skill level if on water - if enabled]

!!HEv7020&i^wog_212_enabled^/y-5<>8:S3/?y-1;              [get hero's scouting skill level if on land]
!!FU7023&i^wog_212_enabled^/y-5<>8/y-1>0:Py-1;            [do scouting function - if enabled]
** end of movement trigger

** start of battle-start trigger
!?FU(OnBeforeBattle)|i^wog_201_enabled^/i^wog_204_enabled^/i^wog_207_enabled^;

** artillery
!!BA&i^wog_201_enabled^:H0/?v7020;                             [get attacking hero #]
!!HEv7020&i^wog_201_enabled^/v7020>-1:A2/4/?y-7/?y-8;          [see if attacking hero has a Ballista]
!!FU(WOG_201_KillWithArtillery)&i^wog_201_enabled^/y-8>0/v7020>-1:P(BATTLE_LEFT);     [shoot something - attacker]
!!BA&i^wog_201_enabled^:H1/?v7020;                             [get defending hero #]
!!HEv7020&i^wog_201_enabled^/v7020>-1:A2/4/?y-7/?y-8;          [see if defending hero has a Ballista]
!!FU(WOG_201_KillWithArtillery)&i^wog_201_enabled^/y-8>0/v7020>-1:P(BATTLE_RIGHT);    [shoot something - defender]

** first aid
!!if&i^wog_204_enabled^;
  !!VRv7040:C0/0/0/0/0/0/0;                   [no creatures to resurrect after battle attacker]
  !!VRv7047:C0/0/0/0/0/0/0;                   [no creatures to resurrect after battle defender]
  !!BA:M0/0/?y-1/?v7040;                      [save qty in each of attacking hero's slots for after battle]
  !!BA:M0/1/?y-1/?v7041;                      [to determine qty lost for first aid skill]
  !!BA:M0/2/?y-1/?v7042;
  !!BA:M0/3/?y-1/?v7043;
  !!BA:M0/4/?y-1/?v7044;
  !!BA:M0/5/?y-1/?v7045;
  !!BA:M0/6/?y-1/?v7046;
  !!BA:M1/0/?y-1/?v7047;                      [save qty in each of defending hero's slots for after battle]
  !!BA:M1/1/?y-1/?v7048;                      [to determine qty lost for first aid skill]
  !!BA:M1/2/?y-1/?v7049;
  !!BA:M1/3/?y-1/?v7050;
  !!BA:M1/4/?y-1/?v7051;
  !!BA:M1/5/?y-1/?v7052;
  !!BA:M1/6/?y-1/?v7053;
!!en;

** mysticism
!!if&i^wog_207_enabled^;
  ; Initialise vars
  !!VRi^wog_207_manaDiff_0^:S0;
  !!VRi^wog_207_manaDiff_1^:S0;

  ; Set up Mysticism effect if the battle is with two heroes
  !!if&i^battle_hero_1^>(NO_HERO);
    !!FU(WOG_207_SetUpMysticismManaReduction):P(BATTLE_LEFT);
    !!FU(WOG_207_SetUpMysticismManaReduction):P(BATTLE_RIGHT);
  !!en;
!!en;

!?FU(OnSetupBattlefield);               [Continue trigger if any skills are enabled]
!!UN:P210/?(resistanceII:y);
!!FU&(resistanceII)<>(TRUE);

** offset skill levels for resistance
!!FU(WOG_210_SetOrRestoreResistance):Pi^battle_hero_0^/0;           [offset skill levels - attacker]
!!FU(WOG_210_SetOrRestoreResistance)&i^battle_hero_1^>(NO_HERO):Pi^battle_hero_1^/0; [offset skill levels - defender]

** luck
!!VRv7034&i^wog_206_enabled^:C-2/-2/-2/-2/-2/-2;               [reset v7034-v7039]
!!BA&i^wog_206_enabled^:H0/?v7020;                             [get attacking hero #]
!!HEv7020&i^wog_206_enabled^/v7020>-1:S9/?y-1;                 [get attacker's luck skill level]
!!FU7008&i^wog_206_enabled^/y-1>0/v7020>-1:Py-1/1;             [call function 7008 if attacking hero has luck]
!!BA&i^wog_206_enabled^:H1/?v7020;                             [get defending hero #]
!!HEv7020&i^wog_206_enabled^/v7020>-1:S9/?y-2;                 [get defender's luck skill level]
!!FU7008&i^wog_206_enabled^/y-2>0/v7020>-1:Py-2/2;             [call function 7008 if defending hero has luck]

!!BA&i^wog_206_enabled^:H0/?y-11;                              [get attacking hero #]
!!BA&i^wog_206_enabled^:H1/?y-12;                              [get defending hero #]
!!HEy-11&i^wog_206_enabled^:S19/?y-13 R4/?y-15;                [get attackers tactics level, tactics status]
!!HEy-12&i^wog_206_enabled^/y-12>=0:S19/?y-14 R4/?y-16;        [get defenders tactics, tactics status - if any]
!!VRy-13&i^wog_206_enabled^/y-15=0:S0;                         [set to 0 if tactics is disabled]
!!VRy-14&i^wog_206_enabled^/y-16=0:S0;                         [set to 0 if tactics is disabled]
!!VRy-13&i^wog_206_enabled^:Xy-14;                             [XOR - get difference between tactics levels in y-13]



** eagle eye
!!VRv7018&i^wog_202_enabled^:S0;                               [reset v7018]
!!VRv7019&i^wog_202_enabled^:S0;                               [reset v7019]
!!VRi^wog_202_spellCountered^:S(FALSE);                        [reset global flag of whether a spell has been countered]

!!VRy-9&i^wog_202_enabled^:S-1;                                [reset y-9]
!!BA&i^wog_202_enabled^:H0/?y-9;                               [get attacking hero's #]
!!FU7017&i^wog_202_enabled^/y-9>-1:Py-9/0;                     [call function 7017 for attacking hero]

!!VRy-9&i^wog_202_enabled^:S-1;                                [reset y-9]
!!BA&i^wog_202_enabled^:H1/?y-9;                               [get defending hero's #]
!!FU7017&i^wog_202_enabled^/y-9>-1:Py-9/1;                     [call function 7017 for defending hero]



** end of battle-start trigger

** start of battlefield start trigger
!?FU(OnSetupBattlefield)|i^wog_206_enabled^/i^wog_208_enabled^;                               [continue if luck or navigation enabled]

** navigation
!!BA&i^wog_208_enabled^:H0/?v7020;                             [get attacking hero #]
!!IF&i^wog_208_enabled^/v7020>-1:Wv7020;                       [enable hero variable]
!!DO7024/0/20/1&i^wog_208_enabled^/v7020>-1/w4>0:Pw4;          [prepare to add attack and defence to attacking hero's troops]
!!BA&i^wog_208_enabled^:H1/?v7020;                             [get defending hero #]
!!IF&i^wog_208_enabled^/v7020>-1:Wv7020;                       [enable hero variable]
!!DO7024/21/41/1&i^wog_208_enabled^/v7020>-1/w4>0:Pw4;         [prepare to add attack and defence to defending hero's troops]

** end of battlefield start trigger

** start of battle turn one trigger
!?FU(OnBattleRound)&i^wog_206_enabled^/i^battle_round^=0; [revised JHV, <1-->=0][-1 caused CB crash w/tactics]
** luck
                                     
!!DO7010/(BATTLE_ATTACKER_STACK_FIRST)/(BATTLE_ATTACKER_STACK_LAST)/1:P(BATTLE_LEFT); [do function 7010 for luck - attacker]
!!DO7010/(BATTLE_DEFENDER_STACK_FIRST)/(BATTLE_DEFENDER_STACK_LAST)/1:P(BATTLE_RIGHT); [do function 7010 for luck - defender]

** end of battle turn one trigger


** start of pre-action trigger
!?FU(OnBeforeBattleAction)&i^wog_202_enabled^;                                      [Continue trigger if eagle eye is enabled]

!!FU&v7018=0/v7019=0:E;                             [exit if no one has eagle eye]

!!VRy-1:S-1;                                        [initailize variables]
!!VRy-3:S-1;
!!VRy-5:S-1;
!!VRy-7:S0;
!!VRy-9:S0;

!!VRy-6:R0/0/99;                                    [random roll]

!!BG:E?y-1 A?y-2 Q?y-3 S?y-4;                       [get destination stack, action type, side, spell]
!!FU&y-2<>(BATTLE_ACTION_HERO_CAST)/y-2<>(BATTLE_ACTION_MONSTER_CAST):E; [no effect if not casting]
!!FU|y-4=(SPELL_SACRIFICE)/y-4=(SPELL_TELEPORT):E;  [no effect on sacrifce and teleportation]
!!FU&y-4>(SPELL_LAST_WOG):E;                        [no effect if the spell is an extended spell, could have compatibility impact with erm]

!!BMy-1&y-1>(NO_STACK):I?y-5 P?y-8;                 [get side, position of target stack]

!!VRy-10&y-4>=27/y-4<=33:S1;
!!VRy-10|y-4=37/y-4=41/y-4=43/y-4=44/y-4=46/y-4=48/y-4=49/y-4=51/y-4=53/y-4=58:S1;  [check for beneficial (mass) spells]

!!VRy-9&y-1=(NO_STACK)/y-10=1:S1;                   [if hero cast spell with no target (mass) set to 1]
!!VRy-9&y-1>(NO_STACK)/y-3=y-5:S1;                  [if caster is targeting own side set to 1]

!!VRy-7&y-9=1/y-3=0/v7019>0/y-6<v7019:S1;           [if attacker cast, check against defender Eagle Eye rating]
!!VRy-7&y-9=1/y-3=1/v7018>0/y-6<v7018:S1;           [if defender cast, check against attacker Eagle Eye rating]

!!if&y-7=1;
  ; Play sound
  !!SN:P^telptin^;

  ; Show animation on the target
  !!if&y-1>(NO_STACK);
    !!BMy-1:V33;
  !!el;
    !!BMi^battle_acting_stack^:V32;
  !!en;

  ; Reduce mana (spell count) and show animation on the caster
  ; For monster cast
  !!if&y-1>(NO_STACK)/y-2=(BATTLE_ACTION_MONSTER_CAST);
    ; Skip the current turn
    !!BMi^battle_acting_stack^:Ed-1;                                  [reduce spell count by 1]
    !!BG:A(BATTLE_ACTION_WALK);                     [make unit move (cancel action), possible to get morale]
    ; Show animation
    !!BMi^battle_acting_stack^:V76;
  ; For hero cast
  !!el&y-2=(BATTLE_ACTION_HERO_CAST);
    ; Reduce 10 mana
    !!VRy30:Si^battle_hero_%i(battle_current_side)^;
    !!HEy30:I?y31/1;
    !!VRy32:Sy31 -10 F0/(INT_MAX);
    !!HEy30:Iy32/1;

    ; Set to no cast and pass the turn
    ; Note: BG:A would result in grid hiding. Here we pass the stack turn and get back to redraw grids and spell book button
    !!BG:A(BATTLE_ACTION_SKIP);
    !!BHi^battle_current_side^:M1;
    !!VRi^wog_202_spellCountered^:S(TRUE);

    ; Show animation
    !!if&i^battle_current_side^=(BATTLE_LEFT);
      !!VRy33:S0;                       [attakcing hero]
    !!el;
      !!VRy33:S16;                      [defending hero]
    !!en;

    !!FU(WOG_PlayAnimationOnHex):P76/y33/100;
  !!en;

  ; Show combat msg
  !!VRz2:Sz148004;                              [set combat message]
  !!MM:Sz2;                                     [display combat message]
!!en;

; Return to the stack turn
!?FU(OnBeforeBattleStackTurn)&i^wog_202_enabled^/i^wog_202_spellCountered^;
!#VA(stack:x);

!!VR(stack):Si^battle_acting_stack^;
!!VRi^wog_202_spellCountered^:S(FALSE);

** end of pre-action trigger


** start of post-action trigger
!?FU(OnAfterBattleAction);              [Continue trigger if resistance is enabled]
!!UN:P210/?(resistanceII:y);
!!FU&(resistanceII)<>(TRUE);

** reset skill levels for resistance
!!BU:C?(battleIsEnded:y);                             [check for end of battle]

!!if&(battleIsEnded);
  !!FU(WOG_210_SetOrRestoreResistance):Pi^battle_hero_0^/1; [reset skill levels - attacker]
  !!FU(WOG_210_SetOrRestoreResistance)&i^battle_hero_1^>(NO_HERO):Pi^battle_hero_1^/1; [reset skill levels - defender]
!!en;

** end of post-action trigger


** start of battle end trigger
!?FU(OnAfterBattleUniversal)|i^wog_204_enabled^/i^wog_207_enabled^/i^wog_202_enabled^;                     [Continue trigger if any skills are enabled]
** first aid
!!if&i^wog_204_enabled^;
  !!BA:H0/?v7020;                             [get attacking hero #]
  !!HEv7020&v7020>-1:O?v7021;                 [get attacking hero's owner]
  !!HEv7020&v7020>-1/v7021<>-1:A2/6/?y-7/?y-8;          [see if attacking hero has a First Aid Tent]
  !!FU7002&v7021<>-1/y-8>0/v7020>-1:P1;        [handle first aid tent for attacker]
  !!BA:H1/?v7020;                             [get defending hero #]
  !!HEv7020&v7020>-1:O?v7021;                 [get defending hero's owner]
  !!HEv7020&v7020>-1/v7021<>-1:A2/6/?y-7/?y-8;          [see if defending hero has a First Aid Tent]
  !!FU7002&v7021<>-1/y-8>0/v7020>-1:P2;        [handle first aid tent for defender]
!!en;

** mysticism
!!if&i^wog_207_enabled^/i^battle_hero_1^>(NO_HERO);
  !!HEi^battle_hero_0^:Id-i^wog_207_manaDiff_0^/1;
  !!HEi^battle_hero_1^:Id-i^wog_207_manaDiff_1^/1;
!!en;

** end of battle end trigger


** function to handle artillery, hero, skill level
!?FU(WOG_201_KillWithArtillery);
!#VA(side:x);
!#VA(usedY[2]:y);

!!HEi^battle_hero_%(side)^:A2/(MON_AMMO_CART)/?(has:y)/?(equipped:y) E?(exp:y)/?(heroLv:y)/1 S(SKILL_ARTILLERY)/?(artilleryLv:y); [check for Ammo Cart, get hero's level, artillery level]
!!VR(mult:y):S1;                        [set multiplier to 1]
!!VR(mult)&(equipped)>0:+1;             [ammo cart bonus]
!!VR(mult)&(artilleryLv)>(SKILL_NOT_LEARNED):+(artilleryLv); [artillery bonus]
!!VR(dmg:y):R0/1/50 +(heroLv) *(mult);  [ballista damage: (1-50 + hero level) x bonus multiplier]

!!VR(enemySide:y):S(side) X1;
!!VR(stack:y):S(NO_STACK);
!!VR(killFv:y):S0;
!!VR(killCount:y):S0;

!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!BA:M(enemySide)/i/?(mon:y)/?(qty:y);

  !!if&(mon)>(NO_MON)/(qty)>1;
    !!MA:P(mon)/?(hp:y) F(mon)/?(fv:y);
    !!VR(maxKillCount:y):S(qty) -1;
    !!VR(currKillCount:y):S(dmg) :(hp) F0/(maxKillCount);
    !!VR(currKillFv:y):S(currKillCount) *(fv);

    ; Store the values if killing at least one
    !!if&(currKillCount)>0/(currKillFv)>(killFv);
      !!VR(stack):Si;
      !!VR(killFv):S(currKillFv);
      !!VR(killCount):S(currKillCount);
    !!en;
  !!en;
!!en;

!!if&(stack)>(NO_STACK);
  !!BA:M(enemySide)/(stack)/?(mon)/?(qty);
  !!MA:P(mon)/?(hp);
  !!VR(qty):-(killCount);
  !!BA:M(enemySide)/(stack)/d/(qty);
  !!VR(expGain:y):S(killCount) *(hp);
  !!OW:C?(player:y)/?(interactPlayer:y);

  !!if&1000;                            [Legacy]
    !!VRy2:S(mon);
    !!VRy1:S(expGain);
    !!HEi^battle_hero_%(side)^:B0/?z1;
    !!VRx3:S(killCount);

    !!if&x3>1;
      !!IF:Q2/21/y2/1/z148005;
    !!el;
      !!IF:Q2/21/y2/1/z148006;
    !!en;
  !!en;
  
  !!HEi^battle_hero_%(side)^&(killCount)>0:Ed(killCount); [give experience - might pops up level up screen]
!!en;
** end of function


** function to handle first aid tent
!?FU7002;                 y1= HP   y2=slot y9= first aid

!!HEv7020:A2/5/?y7/?y8 E?y3/?y4/1 S27/?y9;          [check for Ammo Cart, get hero's level, first aid level]
!!VRy5:S1;                                          [set multiplier to 1]
!!VRy5&y8>0:+1;                                     [ammo cart bonus]
!!VRy5&y9>0:+y9;                                    [first aid bonus]
!!VRy1:S0 +1 T49 +y4 *y5;                           [first aid tent heal: (1-50 + hero level) x bonus multiplier]
!!VRy2:R0/0/6;                                      [random slot # to start search from]
!!VRv2:S7;                                          [7 = slot not found]
!!DO7003/0/6/1:Px1/y1/y2;                           [heal next slot with >= 1 monster killed]
** end of function

** function to find slot where at least 1 cr was lost
!?FU7003;           x1=filter x2=hp healed  x3=slot

!!VRy4:Sx3 %7;                                      [get an actual slot number]
!!BA&x1=1:M0/y4/?y5/?y6;                            [get y5 type and y6 qty in slot y3 :attacker]
!!BA&x1=2:M1/y4/?y5/?y6;                            [get y5 type and y6 qty in slot y3 :defender]
!!VRy1&x1=1:S7040 +y4;                              [get variable # of previous qty :attacker]
!!VRy1&x1=2:S7047 +y4;                              [get variable # of previous qty :defender]
!!VRy7:Svy1;                                        [get previous qty]
!!VRy7:-y6;                                         [subtract current qty to get qty lost]

!!FU7004&v2=7/y7>0/y6>0:Px1/x2/x3/y4/y5/y6/y7;      [try to heal stack if some lost but some left]
!!VRx3:+1;                                          [next slot]
** end of function

** function to heal a stack
!?FU7004;
!!FU&x5<0:E;                                        [exit if invalid value]

!!HEv7020:B0/?z1;                                   [get hero's name]
!!MA:Px5/?y8;                                       [get hit points of monster x5 into y8]
!!FU&y8<1:E;                                        [exit if invalid value]

!!VRy5:Sx2;                                         [# of hit points to heal]
!!VRy5::y8;                                         [divided by monster hit points, rounded down, equals # to save]
!!VRy5&y5>x7:Sx7;                                   [can't save more than qty that died]
!!BA&x1=1/y5>0:M0/x4/?x5/dy5;                       [restore y5 creatures attacker]
!!BA&x1=2/y5>0:M1/x4/?x5/dy5;                       [restore y5 creatures defender]
!!IF&1000/y5=1:Q2/21/x5/1/z148007;
!!IF&1000/y5>1:Q2/21/x5/1/z148008;
!!UN:R1;                                            [redraw screen to show revived creatures]
!!VRv2&y5>0:Sx4;                                     [note that we healed a stack if we did]
** end of function

** function to give gold - estates
!?FU(WOG_203_SetUpEstatesDailyBonus);   x1=estates level  x2=hero level
!!VRy1:S5 *x1 *x2;                            [gold = 5 x estates level x hero level]
!!OW:Rv7021/6/dy1;                            [give gold]
** end of function

** function for mysticism
!?FU(WOG_207_SetUpMysticismManaReduction);
!#VA(side:x);
!#VA(usedY[1]:y);

!!VR(enemySide:y):S(side) X1;

; Check for Mysticism level
!!HEi^battle_hero_%(side)^:S(SKILL_MYSTICISM)/?(mysticismLv:y); [get hero's Mysticism level]
!!FU&(mysticismLv)=(SKILL_NOT_LEARNED):E;     [Exit if Mysticism is not learned]

; Check for Mana
!!HEi^battle_hero_%(enemySide)^:I?(mana:y)/1; [get enemy hero's spell points]

; Reduce mana for the enemy if Mysticism is learned and enemy has mana
!!if&(mysticismLv)>(SKILL_NOT_LEARNED)/(mana)>0;
  !!FU(WOG_207_GetManaPercentage):P(mysticismLv)/?y1; [Get percenatge of mana left]
  !!VR(newMana:y):S(mana) *y1 :100;           [calculate enemy hero's new spell points, decimal adjustment]

  ; Show msg for humna player - could be both sides
  !!if&1000;
    !!HEi^battle_hero_%(side)^:B0/?z1;            [get hero's name]
    !!HEi^battle_hero_%(enemySide)^:B0/?z3;       [get enemy hero's name]
    !!VR(picIndex:y):S26 +(mysticismLv);          [set mysticism picture]
    !!IF:Q2/(PIC_TYPE_SEC_SKILL)/(picIndex)/(MSG_TYPE_MES)/z148009; [Show message for human player]
  !!en;

  !!HEi^battle_hero_%(enemySide)^:I(newMana); [enemy hero's spell points reduced]
  ; Store the mana reduced of the enemy hero
  !!VRi^wog_207_manaDiff_%(enemySide)^:S(newMana) -(mana);
!!en;

!?FU(WOG_207_GetManaPercentage);
!#VA(mysticismLv:x) (result:x);

!!if&(mysticismLv)=(SKILL_BASIC);
  !!VR(result):S80;                           [basic 80%]
!!el&(mysticismLv)=(SKILL_ADVANCED);
  !!VR(result):S70;                           [advanced 70%]
!!el&(mysticismLv)=(SKILL_EXPERT);
  !!VR(result):S60;                           [expert 60%]
!!en;
** end of function


** function for luck      x1=luck   x2=att/def (1/2)
!?FU7008;

!!VRy3:Sx1 *10;                               [multiply skill level by 10 to get % chance]
!!VRy4:S0;
!!VRy5:R0/0/6;                                [random slot # to start search from]
!!DO7009/0/6/1:Px1/x2/y3/y4/y5;               [pick slots]

** function to pick slots
!?FU7009;           x1=luck level x2=filter x3=%chance x4=slot counter  x5=random slot #

!!VRy1:Sx5 %7;                                [get an actual slot number]
!!BA&x2=1:M0/y1/?y2/?y3;                      [creatures - attacker]
!!BA&x2=2:M1/y1/?y2/?y3;                      [creatures - defender]
!!VRy6&y3>0:R0/0/99;                          [random roll for luck]
!!VRx4&x3>y6/y3>0:+1;                         [increment slot counter]
!!VRv7034&x2=1/x3>y6/y3>0/x4=1:Sy1;           [store slot # - attacker]
!!VRv7035&x2=1/x3>y6/y3>0/x4=2/x1>1:Sy1;      [store slot # - attacker]
!!VRv7036&x2=1/x3>y6/y3>0/x4=3/x1=3:Sy1;      [store slot # - attacker]
!!VRv7037&x2=2/x3>y6/y3>0/x4=1:Sy1;           [store slot # - defender]
!!VRv7038&x2=2/x3>y6/y3>0/x4=2/x1>1:Sy1;      [store slot # - defender]
!!VRv7039&x2=2/x3>y6/y3>0/x4=3/x1=3:Sy1;      [store slot # - defender]

!!VRx5:+1;                                              [next slot]
** end of function

** function to check if unit has luck
!?FU7010;               x1=side        x16=stack number
!#VA(side:x);

!!BMx16:O?(heroArmySlot:y);                            [get hero slot number]

!!if&(side)=(BATTLE_LEFT);
  !!FU7011&(heroArmySlot)=v7034:Px16;               [call function 7011 if attacking unit has luck]
  !!FU7011&(heroArmySlot)=v7035:Px16;               [call function 7011 if attacking unit has luck]
  !!FU7011&(heroArmySlot)=v7036:Px16;               [call function 7011 if attacking unit has luck]
!!el;
  !!FU7011&(heroArmySlot)=v7037:Px16;               [call function 7011 if defending unit has luck]
  !!FU7011&(heroArmySlot)=v7038:Px16;               [call function 7011 if defending unit has luck]
  !!FU7011&(heroArmySlot)=v7039:Px16;               [call function 7011 if defending unit has luck]
!!en;
** end of function

** function to give unit luck bonus
!?FU7011;            x1=stack #
!#VA(stack:x);

!!BM(stack):Ad2;                                  [set attack]
!!BM(stack):Dd2;                                  [set defence]
!!BM(stack):P?(pos:y);
!!BM(stack):C(SPELL_FORTUNE)/(pos)/(SKILL_NOT_LEARNED)/100/(TRUE); [cast Fortune : 100 rounds]


** end of function

** function to iterate through current player's heroes (weekly)
!?FU7012;
!!HEx16:O?v7021;                              [get owner of iterated hero]

!!if&v7021=i^timerOwner^;
  !!HEx16:S(SKILL_ESTATES)/?y1;                            [get hero's estates level]
  !!FU(WOG_203_SetUpEstatesWeeklyBonus)&i^wog_203_enabled^/y1>(SKILL_NOT_LEARNED):Px16/y1;     [if hero in use and it's that hero's owner's turn, continue in function 7013 (estates) - if enabled]
  !!HEx16:S(SKILL_SCHOLAR)/?y1;                            [get hero's scholar skill level]
  !!FU7014&i^wog_211_enabled^/y1>(SKILL_NOT_LEARNED):Px16/y1;                  [if hero in use and it's that hero's owner's turn, continue in function 7014 (scholar) - if enabled]
!!en;
** end of function

** function for estates      x2=estates level
!?FU(WOG_203_SetUpEstatesWeeklyBonus);
!#VA(hero:x) (estatesLv:x);

!!HE(hero):B0/?z700;                           [get hero's name]
!!HE(hero):R2/?y1;                             [get hero's sex]
!!IF:W(hero);                                  [enable hero variables]
!!VRw5&w8<1/(estatesLv)>=1:R0/0/5;             [if not set, get random resource #]
!!VRw6&w8<2/(estatesLv)>=2:R0/0/5;
!!VRw7&w8<3/(estatesLv)>=3:R0/0/5;
!!VRw8&w8=0/(estatesLv)>=1:S1;                 [set to lock resources]
!!VRw8&w8=1/(estatesLv)>=2:S2;
!!VRw8&w8=2/(estatesLv)>=3:S3;
!!VRy3:R0/1/2;                                [set quantity for resource 1]
!!VRy3&w5=0|w5=2:*2;                          [double for wood or ore]
!!VRy4:R0/1/2;                                [set quantity for resource 2]
!!VRy4&w6=0|w6=2:*2;                          [double for wood or ore]
!!VRy5:R0/1/2;                                [set quantity for resource 3]
!!VRy5&w7=0|w7=2:*2;                          [double for wood or ore]

!!if&1000;
  !!IF&(estatesLv)=1:Q2/w5/y3/1/z148013;
  !!IF&(estatesLv)=2:Q2/w5/y3/w6/y4/1/z148014;
  !!IF&(estatesLv)=3:Q2/w5/y3/w6/y4/w7/y5/1/z148015;
!!en;

!!OW&(estatesLv)=1:Rv7021/w5/dy3;                      [give the resources]
!!OW&(estatesLv)=2:Rv7021/w5/dy3 Rv7021/w6/dy4;        [give the resources]
!!OW&(estatesLv)=3:Rv7021/w5/dy3 Rv7021/w6/dy4 Rv7021/w7/dy5; [give the resources]
** end of function

** function for scholar       x2=scholar level
!?FU7014;
!#VA(hero:x) (scholarLv:x);

!!HE(hero):B0/?z700;                           [get hero's name]
!!HE(hero):S7/?y2;                             [get hero's wisdom skill level]
!!VRy3&(scholarLv)=1:S57;                      [set basic scholar picture]
!!VRy3&(scholarLv)=2:S58;                      [set advanced scholar picture]
!!VRy3&(scholarLv)=3:S59;                      [set expert scholar picture]
!!HE(hero):A2/0/?y7/?y8;                       [see if hero has a spell book]
!!VRy6:R0/0/99;                                [random roll for chance to learn spell]
!!VRy6&(scholarLv)=2:+10;                      [advanced bonus]
!!VRy6&(scholarLv)=3:+20;                      [expert bonus]
!!VRv7027:S0;                                  [loop counter]

** Algor: begin
!!if&y8>0/y6>59;
  !!VRv1:S-1;
  !!DO7015/0/69/1:P(hero)/y2/-1/(scholarLv);            [count number of avaliable spells in v1]

  !!if&v1>-1;
    !!VRv1:-1;
    !!VRy10:S0 Rv1;                           [y10 - random avaliable spell]
    !!VRv1:S-1;
    !!DO7015/0/69/1:P(hero)/y2/y10/(scholarLv);         [learn y10 avaliable spell]
  !!en;
!!en;

!?FU7015;                                     [x1 - hero, x2 - wisdom, x3 - learn spell(>=0)/count spells(=-1), x4 - scholar]
!!HEx1:Mx16/?y1;                              [y1=1 for known spell]
!!UN:J0/x16/?y2;                              [y2=1 for banned spell]
!!SSx16:L?y3;                                 [y3 - spell level]
!!VRy6:Sy3 -2;                                [y6 - required wisdom level]
!!VRy7:Sy3 -1;                                [y7 - required sholar level]

!!if&y1=0/y2=0/y6<=x2/y7<=x4;
  !!VRv1:+1;                                  [v1 - spell count]

  !!if&v1=x3;
    !!HEx1:Mx16/1 O?y4;                       [learn slell, y4 - owner]
    !!OW:Iy4/?y5;                             [y5=0 for human player]
    !!IF&y5=0:Q2/9/x16/1/z148016;             [message for human player]
    !!VRx16:S100;                             [exit cycle]
  !!en;
!!en;
** Algor: end

** function for eagle eye            x1 = hero #     x2 = attacker/defender
!?FU7017;
!!HEx1:S11/?y1 A2/63/?y2/?y3 A2/64/?y2/?y4 A2/65/?y2/?y5;     [get eagle eye skill level, check for artifacts]
!!VRy6&y1>0:S10 *y1;                          [set base chance to skill level x 10]
!!VRy6&y1>0/y3>0:+5;                          [Bird of Perception +5]
!!VRy6&y1>0/y4>0:+10;                         [Stoic Watchman +10]
!!VRy6&y1>0/y5>0:+15;                         [Emblem of Cognizance +15]
!!VRy6&y1>0/y3>0/y4>0/y5>0:+30;               [All three +30]
!!VRv7018&y1>0/x2=0:Sy6;                      [set for attacker]
!!VRv7019&y1>0/x2=1:Sy6;                      [set for defender]

** end of function

** function to pick a monster
!?FU(WOG_212_GetRandMonAndNames);
!#VA(mon:x);

!!FU(WOG_GetRandomMonster):P?(mon);

!!SN:H^monname^/(mon)/0/?z704;          [get monster name]
!!SN:H^monname^/(mon)/1/?z705;          [get monsters name]

** end of function

** function to iterate through current player's heroes (daily)
!?FU7020;
!!HEx16:O?v7021;                              [get owner of iterated hero]

!!if&v7021=i^timerOwner^;
  !!HEx16:S(SKILL_PATHFINDING)/?y1;           [get hero's pathfinding skill level]
  !!FU(WOG_209_SetUpPathfindingBonus)&i^wog_209_enabled^/y1>0:Px16/y1; [if hero has pathfinding, is in use and it's that hero's owner's turn, continue in function 7025 - if enabled]
!!en;

!!if&i^timerDay^>1;
  !!if&v7021=i^timerOwner^;
    !!HEx16:S(SKILL_LEARNING)/?y1;            [get hero's learning skill level]
    !!FU(WOG_205_SetUpLearningBonus)&i^wog_205_enabled^/y1>0:Px16/y1; [if hero has learning, is in use and it's that hero's owner's turn, continue in function 7021 - if enabled]

    !!HEx16:S(SKILL_ESTATES)/?y1 E?y2/?y3/1;  [get hero's estates skill level, hero level]
    !!FU(WOG_203_SetUpEstatesDailyBonus)&i^wog_203_enabled^/y1>0:Py1/y3; [if hero has estates, is in use and it's that hero's owner's turn, continue in function 7005 - if enabled]
  !!en;
!!en;

** end of function

** function for learning      x1=hero x2=learning level
!?FU(WOG_205_SetUpLearningBonus);
!!HEx1&x2=(SKILL_BASIC):Ed100;          [give 100 experience]
!!HEx1&x2=(SKILL_ADVANCED):Ed200;       [give 200 experience]
!!HEx1&x2>=(SKILL_EXPERT):Ed300;        [give 300 experience]
** end of function


** function for scouting       x1=scouting
!?FU7023;
!!VRy4:S0;                                    [set to 0]
!!VRy4&x1=1:R1199;                            [set random roll to 1.0% (12/1200)]
!!VRy4&x1=2:R799;                             [set random roll to 1.5% (12/800)]
!!VRy4&x1=3:R599;                             [set random roll to 2.0% (12/600)]
!!FU&y4>12:E;
!!HEv7020:O?v7021;                            [get hero's owner]
!!HEv7020:B0/?z700;                           [get hero's name]
!!HEv7020:R2/?y1;                             [get hero's sex]
!!VRz701&y1=0:Sz148017;
!!VRz701&y1=1:Sz148018;
!!VRz702&y1=0:Sz148019;
!!VRz702&y1=1:Sz148020;
!!VRz703&y1=0:Sz148021;
!!VRz703&y1=1:Sz148022;
!!VRy3:S11 +x1;                               [set scouting picture]
!!IF&1000/y4=1:Q2/20/y3/1/z148023;
!!IF&1000/y4=1:Q2/35/20/1^^;
!!HEv7020&y4=1:Id+20;                         [give 20 spell points]
!!IF&1000/y4=2:Q2/20/y3/1/z148024;
!!VRr&y4=2:S1 R24 *100;                       [random 1 to 25 x 100]
!!IF&1000/y4=2:Q2/6/r/1^^;
!!OW&y4=2:Rv7021/6/dr;                        [give gold]
!!IF&1000/y4=3:Q2/20/y3/1/z148025;
!!VRs&y4=3:S0 R5;                             [random resource 0 to 5]
!!VRr&y4=3:S1 R2;                             [random quantity 1 to 3]
!!VRr&y4=3/s=0:*2;                            [double for wood]
!!VRr&y4=3/s=2:*2;                            [double for ore]
!!IF&1000/y4=3:Q2/s/r/1^^;
!!OW&y4=3:Rv7021/s/dr;                        [give the resources]
!!IF&1000/y4=4:Q2/20/y3/1/z148026;
!!VRs&y4=4:S0 R5;                             [random resource 0 to 5]
!!VRr&y4=4:S4 R2;                             [random quantity 4 to 6]
!!VRr&y4=4/s=0:*2;                            [double for wood]
!!VRr&y4=4/s=2:*2;                            [double for ore]
!!IF&1000/y4=4:Q2/s/r/1^^;
!!OW&y4=4:Rv7021/s/dr;                        [give resources]
!!UN&y4=4:R2;                                 [redraw resources bar]
!!FU(WOG_212_GetRandMonAndNames)&y4=5:P?s;                            [call function 7019 to pick monster]
!!MA&y4=5:Gs/?r;                              [get 1 weeks production]
!!IF&1000/y4=5/r=1:Q2/20/y3/1/z148027;
!!IF&1000/y4=5/r>1:Q2/20/y3/1/z148028;
!!HEv7020&1000/y4=5:Cs/r/-1/0/-1/0/-1/0/-1/0/-1/0/-1/0;  [give creatures]
!!HEv7020&-1000/y4=5:C2/s/r/0;                [offer AI creatures]
!!IF&1000/y4=6:Q2/20/y3/1/z148029;
!!IF&1000/y4=6:Q2/14/1/1^^;
!!HEv7020&y4=6:R0/d1;                         [+1 morale]
!!IF&1000/y4=7:Q2/20/y3/1/z148030;
!!IF&1000/y4=7:Q2/11/1/1^^;
!!HEv7020&y4=7:R1/d1;                         [+1 luck]
!!IF&1000/y4=8:Q2/20/y3/1/z148031;
!!HEv7020&y4=8:E?y5/?y6/1;                    [get hero's level]
!!VRr&y4=8:Sy6 T20 *50;                       [(level + 0-20) x 50]
!!IF&1000/y4=8:Q2/17/r/1^^;
!!HEv7020&y4=8:Edr;                           [give experience]
!!IF&1000/y4=9:Q2/20/y3/1/z148032;
!!HEv7020&y4=9:Wd+400;                        [increase movement]
!!IF&1000/y4=10:Q2/20/y3/1/z148033;
!!VRr&y4=10:S3 *x1 +16;                       [area]
!!UN&y4=10:Sv7023/v7024/v7025/v7021/r;        [reveal area]
!!FU(WOG_212_GetRandMonAndNames)&y4=11:P?s;                           [call function 7019 to pick monster]
!!MA&y4=11:Vs/?r;                             [get AdvMapL]
!!IF&1000/y4=11:Q2/20/y3/1/z148034;
!!IF&1000/y4=11:Q2/21/s/2/z148035;
!!HEv7020&2/y4=11:Tv7023/v7024/v7025/s/r;     [fight monsters]
!!FU(WOG_212_GetRandMonAndNames)&y4=12:P?s;                           [call function 7019 to pick monster]
!!MA&y4=12:Hs/?r;                             [get AdvMapH]
!!IF&1000/y4=12:Q2/20/y3/1/z148036;
!!IF&1000/y4=12:Q2/21/s/2/z148037;
!!HEv7020&2/y4=12:Tv7023/v7024/v7025/s/r;     [fight monsters]
!!SN:D;                                       [redraw screen]
** end of function

** function for navigation (add attack and defence)   (Parameters: x1=stat bonus)
!?FU7024;

!!BMx16:Adx1;                                 [set attack]
!!BMx16:Ddx1;                                 [set defence]
** end of function

** function for pathfinding    x1 = hero  x2 = pathfinding
!?FU(WOG_209_SetUpPathfindingBonus);

!!HEx1:P?v7023/?v7024/?v7025;                 [get hero's position]
!!TR7023:T?y1/d/d/d/d/d/d/d;                  [get terrain type]
!!FU&y1=8:E;                                  [exit if on water]

!!HEx1:W?y2/1;                                [get movement if on land]
!!VRy2&x2=1/y2<1700:S1700;                    [set to 1700 if basic]
!!VRy2&x2=2/y2<1760:S1760;                    [set to 1760 if advanced]
!!VRy2&x2=3/y2<1830:S1830;                    [set to 1830 if expert]
!!HEx1:Wy2/1 Gy2;                             [set movement, reset intial movement if on land]
** end of function

** function to offset skill levels
!?FU(WOG_210_SetOrRestoreResistance);   x1=hero  x2=set/reset
!#VA(hero:x) (mode:x);

!!HE(hero):S(SKILL_RESISTANCE)/?(resLv:y); [get hero's resistance skill level]

!!if&(mode)=0;
  !!HE(hero)&(resLv)=(SKILL_BASIC):S(SKILL_RESISTANCE)/9; [set basic resistance skill level]
  !!HE(hero)&(resLv)=(SKILL_ADVANCED):S(SKILL_RESISTANCE)/10; [set advanced resistance skill level]
  !!HE(hero)&(resLv)=(SKILL_EXPERT):S(SKILL_RESISTANCE)/11; [set expert resistance skill level]

  !!VR(resArtSetEquipped:y):S(FALSE);
  !!HE(hero):A2/(ART_GARNITURE_OF_INTERFERENCE)/?(has:y)/?(art1:y) A2/(ART_SURCOAT_OF_COUNTERPOISE)/?(has)/?(art2:y) A2/(ART_BOOTS_OF_POLARITY)/?(has)/?(art3:y); [see if hero has Garniture of Interference, Surcoat of Counterpoise, Boots of Polarity]
  !!VR(resArtSetEquipped)&(art1)/(art2)/(art3):S(TRUE); [artifact bonus]

  !!if&(resArtSetEquipped);
    !!HE(hero)&(resLv)=(SKILL_NOT_LEARNED):S(SKILL_RESISTANCE)/-17; [set no resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_BASIC):S(SKILL_RESISTANCE)/-7; [set basic resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_ADVANCED):S(SKILL_RESISTANCE)/-6; [set advanced resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_EXPERT):S(SKILL_RESISTANCE)/-5; [set expert resistance (combo)]
  !!en;
!!el;
  !!HE(hero)&(resLv)=-17:S(SKILL_RESISTANCE)/0; [restore no resistance (combo)]
  !!HE(hero)|(resLv)=9/(resLv)=-7:S(SKILL_RESISTANCE)/1; [restore basic resistance skill level]
  !!HE(hero)|(resLv)=10/(resLv)=-6:S(SKILL_RESISTANCE)/2; [restore advanced resistance skill level]
  !!HE(hero)|(resLv)=11/(resLv)=-5:S(SKILL_RESISTANCE)/3; [restore expert resistance skill level]
!!en;
** end of function



** function to check for combo artifacts
!?FU7007;   x1= switch

!!HE-1&x1=1:A2/63/?y1/?y2 A2/64/?y1/?y3 A2/65/?y1/?y4;  [see if hero has Bird of Perception, Stoic Watchman, Emblem of Cognizance]
!!HE-1&x1=2:A2/57/?y1/?y2 A2/58/?y1/?y3 A2/59/?y1/?y4;  [see if hero has Garniture of Interference, Surcoat of Counterpoise, Boots of Polarity]

!!IF&1000/x1=1/y2>0/y3>0/y4>0:Q2/8/63/8/64/8/65/1/z148038;
!!IF&1000/x1=2/y2>0/y3>0/y4>0:Q2/8/57/8/58/8/59/1/z148039;

** end of function


**  object trigger - post visit - Bird of Perception
!$OB5/63&i^wog_202_enabled^;
!!FU7007:P1;
**  object trigger - post visit - Stoic Watchman
!$OB5/64&i^wog_202_enabled^;
!!FU7007:P1;
**  object trigger - post visit - Emblem of Cognizance
!$OB5/65&i^wog_202_enabled^;
!!FU7007:P1;

**  object trigger - post visit - Garniture of Interference
!$OB5/57&i^wog_202_enabled^;
!!FU7007:P2;
**  object trigger - post visit - Surcoat of Counterpoise
!$OB5/58&i^wog_202_enabled^;
!!FU7007:P2;
**  object trigger - post visit - Boots of Polarity
!$OB5/59&i^wog_202_enabled^;
!!FU7007:P2;
