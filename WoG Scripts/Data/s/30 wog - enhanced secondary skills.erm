ZVSE2

** ENHANCED SECONDARY SKILLS  -  ERM script 48

** By Arstahd
** Version: 1.11   updated 22.2(Febrary).2012 by rennyo
** Updated: Sep 2022 by Archer30 and daemon_n
** Special thanks to Hermann the Weird for help with bug fixing and script maintenance

*  Variables used: s, r, j
*  V Variables used: v7018-v7054
*  Z Variables used: z1-z3, z700-z706
*  Y Variables used: y1-y11
*  W Variables used: w4-w8
*  Functions used: 7001-7026   (7016, 7018, 7022 not used)
*  Flags used: 1, 2


***  Artillery  ***
**      Ballista does (1-50 + hero level) damage to an enemy stack prior to a battle (attacker or defender). Will not wipe out a stack. Gives Experience.
**      Ammo Cart adds 100% damage (more shots).
**      Artillery increases the effect of the ballista.
**      Basic: adds 100% damage, Advanced: adds 200% damage, Expert: adds 300% damage
***  Eagle Eye  ***
**      Grants the ability to counter a beneficial spell cast by the enemy.
**      Drains 8 spell points from caster (7 with water magic skill).
**      Basic: 10%, Advanced: 20%, Expert: 30%
**      Bird of Perception, Stoic Watchman, & Emblem of Cognizance increase the chance.
**      New combination artifact - (above three) adds 30% to chance to counter enemy hero's spells
***  Estates  ***
**      For each level of estates:
**      The hero will generate an additional 5 gold per hero level every day.
**      The hero will generate 1-3 units of a resource every week, doubled for wood or ore.
**      The resource types will be randomly set when the skill is learned.
***  First Aid  ***
**      First Aid Tent resurrects (1-50 + hero level) HP's of dead troops for the winner of a battle (attacker or defender).
**      Ammo Cart adds 100% HP's (medical supplies).
**      First Aid increases the effect of the first aid tent.
**      Basic: adds 100% HP's, Advanced: adds 200% HP's, Expert: adds 300% HP's
***  Learning  ***
**      Hero gains experience every day.
**      Basic: +100, Advanced: +200, Expert: +300
***  Luck  ***
**      Luck gives each stack in a hero's army a chance to get +2 Attack, +2 Defence and Fortune for a battle.
**      Basic: 10% - up to 1 stack, Advanced: 20% - up to 2 stacks, Expert: 30% - up to 3 stacks
***  Mysticism  ***
**      Mysticism makes it more difficult for an enemy to cast spells, effectively reducing the enemy's spell points for the battle.
**      Basic: 80% of normal, Advanced: 70% of normal, Expert: 60% of normal
***  Navigation  ***
**      Navigation increases attack and defence during naval battles.
**      Basic: +1, Advanced: +2, Expert: +3
***  Pathfinding  ***
**      Pathfinding raises the minimum daily starting movement on land (after any movement bonuses are taken into account)
**      Basic: 1700 (6), Advanced: 1760 (7), Expert: 1830 (8)
***  Resistance  ***
**      Resistance endows a hero's troops with magic resistance. Increased chances.
**      Basic: 10%, Advanced: 20%, Expert: 30%
**      New combination artifact - Boots of Polarity, Garniture of Inteference, Surcoat of Counterpoise
**      Doubles effect of artifacts (+30% to artifact bonus)
***  Scholar  ***
**      Each week a hero will attempt to research a new spell.
**      Basic: 40% up to 2nd, Advanced: 50% up to 3rd, Expert 60% up to 4th.
***  Scouting  ***
**      Scouting gives a hero a small chance for a random event for each step taken.
**      Basic: 1%, Advanced: 1.5%, Expert: 2%
***  Sorcery  ***
**      Sorcery increases the damage of hero's spells. Increased percentages.
**      Basic: +10%, Advanced: +20%, Expert: +30%
***  Armorer  ***
**      Armorer reduces the damage a hero's troops receive. Increased percentages.
**      Basic: -10%, Advanced: -15%, Expert: -20%


** Initialization Code
[Check if Artillery, Eagle Eye, Estates, First Aid, Learning, Luck, Mysticism,
Navigation, Pathfinding, Resistance, Scholar, Scouting is enabled in WoGify Options]

!?FU(OnAfterErmInstructions);

!!re i/201/212;
  !!UN:Pi/?i^wog_%i_enabled^;
!!en;


; Set up new names and descriptions for War Machines
!!SN&i^wog_204_enabled^:H^art^/(ART_FIRST_AID_TENT)/1/z148000;
!!SN&i^wog_201_enabled^:H^art^/(ART_BALLISTA)/1/^%T(wog.201.ballista_description)^;

!!if|i^wog_204_enabled^/i^wog_201_enabled^;
  !!SN:H^art^/(ART_AMMO_CART)/0/^%T(wog.201.ammo_name)^;
  !!SN:H^art^/(ART_AMMO_CART)/1/^%T(wog.201.ammo_description)^;
!!en;

; Disable the feature to remove Eagle Eye II skill when the hero has learned all the spells if Eagle Eye I is enabled
!!VRi^wog_103_removeEagleEye^&i^wog_202_enabled^:S(FALSE);
** end of Initialization Code

; Set up Resistance, Armorer and Sorcery II values
!?FU(OnGameEnter);
!!if&i^wog_210_enabled^;
  !!UN:C6548044/(UNC_INT)/?i^wog_210_patch1^;
  !!UN:C6548048/(UNC_INT)/?i^wog_210_patch2^;
  !!UN:C6548052/(UNC_INT)/?i^wog_210_patch3^;

  !!UN:C6548044/(UNC_INT)/1036831949;   [set Basic Resistance]
  !!UN:C6548048/(UNC_INT)/1045220556;   [set Advanced Resistance]
  !!UN:C6548052/(UNC_INT)/1050253721;   [set Expert Resistance]
!!en;

!!UN:P214/?(armorer:y);

!!if&(armorer);
  !!UN:C6547980/(UNC_INT)/?i^wog_214_patch1^;
  !!UN:C6547984/(UNC_INT)/?i^wog_214_patch2^;
  !!UN:C6547988/(UNC_INT)/?i^wog_214_patch3^;

  !!UN:C6547980/(UNC_INT)/1036831949;   [set Basic Armorer]
  !!UN:C6547984/(UNC_INT)/1041865112;   [set Advanced Armorer]
  !!UN:C6547988/(UNC_INT)/1045220556;   [set Expert Armorer]
!!en;

!!UN:P213/?(sorceryII:y);

!!if&(sorceryII);
  !!UN:C6548092/(UNC_INT)/?i^wog_213_patch1^;
  !!UN:C6548096/(UNC_INT)/?i^wog_213_patch2^;
  !!UN:C6548100/(UNC_INT)/?i^wog_213_patch3^;

  !!UN:C6548092/(UNC_INT)/1036831949;   [set Basic Sorcery]
  !!UN:C6548096/(UNC_INT)/1045220556;   [set Advanced Sorcery]
  !!UN:C6548100/(UNC_INT)/1050253721;   [set Expert Sorcery]
!!en;


; Restore Resistance, Armorer and Sorcery II values
!?FU(OnGameLeave);
!!if&i^wog_210_enabled^;
  !!UN:C6548044/(UNC_INT)/i^wog_210_patch1^;
  !!UN:C6548048/(UNC_INT)/i^wog_210_patch2^;
  !!UN:C6548052/(UNC_INT)/i^wog_210_patch3^;
!!en;

!!UN:P214/?(armorer:y);

!!if&(armorer);
  !!UN:C6547980/(UNC_INT)/i^wog_214_patch1^;
  !!UN:C6547984/(UNC_INT)/i^wog_214_patch2^;
  !!UN:C6547988/(UNC_INT)/i^wog_214_patch3^;
!!en;

!!UN:P213/?(sorceryII:y);

!!if&(sorceryII);
  !!UN:C6548092/(UNC_INT)/i^wog_213_patch1^;
  !!UN:C6548096/(UNC_INT)/i^wog_213_patch2^;
  !!UN:C6548100/(UNC_INT)/i^wog_213_patch3^;
!!en;


** Заплатка к скриптам Грамотность и Орлиный глаз I, не позволяющая изучать
** запрещенные заклинания после загрузки\перезагрузки сейва
; Question: Shouldn't UN:J values store in the save game? - Archer30

!?FU(OnAfterLoadGame);
!!UN:P152/?y1;                                [Summon Boat: y1=1 if banned]
!!UN&y1=1:J0/0/1;                             [Disable Summon Boat]
!!UN:P153/?y2;                                [Water Walk: y2=1 if banned]
!!UN&y2=1:J0/7/1;                             [Disable Water Walk]
!!UN:P154/?y3;                                [Town Portal: y3=1 if banned]
!!UN&y3=1:J0/9/1;                             [Disable Town Portal]
!!UN:P155/?y4;                                [Dimension Door: y4=1 if banned]
!!UN&y4=1:J0/8/1;                             [Disable Dimension Door]
!!UN:P156/?y5;                                [Fly: y5=1 if banned]
!!UN&y5=1:J0/6/1;                             [Disable Fly]
!!UN:P221/?y6;                                [Scuttle Boat: y6=1 if banned]
!!UN&y6=1:J0/1/1;                             [Disable Scuttle Boat]
!!UN:P222/?y7;                                [Visions: y7=1 if banned]
!!UN&y7=1:J0/2/1;                             [Disable Visions]
!!UN:P223/?y8;                                [Armageddon: y8=1 if banned]
!!UN&y8=1:J0/26/1;                            [Disable Armageddon]
!!UN:P246/?y9;                                [View Air: y9=1 if banned]
!!UN&y9=1:J0/5/1;                             [Disable View Air]
!!UN:P247/?y10;                               [View Earth: y10=1 if banned]
!!UN&y10=1:J0/3/1;                            [Disable View Earth]

** Timer routines
!?FU(OnEveryDay)&i^wog_205_enabled^/i^timerDay^>1/i^timerOnce^;         [daily - continue if learning enabled]
!!UN:J1/?(maxLevel:y)/d;                [Note: Level limit is 0 by default, if there is no limit]
!!FU(WOG_GetExpRequirementOfLevel)&(maxLevel)>0:P(maxLevel)/?(maxExp:y);

!!re i/(HERO_FIRST)/(HERO_LAST_WOG);
  !!HEi:S(SKILL_LEARNING)/?(skillLevel:y) E?(exp:y)/?(level:y)/1;
  !!co&(maxLevel)>0/(level)>=(maxLevel);[active only when the hero has not yet reach the level limit of the scenario.]

  !!if&(skillLevel:y)>0;
    !!VR(bonusExp:y):S(skillLevel) *100;
    !!VR(exp):+(bonusExp);

    ; Fix exp if there is a level limit in the scenario
    !!VR(exp)&(maxLevel)>0:F0/(maxExp);

    !!HEi:E(exp);
  !!en;
!!en;

!?FU(OnEveryDay)&i^timerWeekday^=1/i^timerDay^>1; [weekly - continue if estates or scholar enabled]
!!DO(WOG_203_211_ManageWeeklyEvents)/(HERO_FIRST)/(HERO_LAST_WOG)/1|i^wog_203_enabled^/i^wog_211_enabled^:P; [iterate through all heroes]
** end of timer routines


** start of movement trigger
!?FU(OnHeroMove)|i^wog_208_enabled^/i^wog_212_enabled^;                        [continue if navigation or scouting enabled]
!!HE-1:N?v7020 O?y-2;                          [get #, owner of hero]
!!OW:C?y-3 Iy-3/?y-4 Gy-3/?y-5;                [get current player]
!!FU&y-2<>y-3:E;                               [exit if not current player's hero]
!!FU&y-4=0/y-5=0:E;
!!HEv7020:P?v7023/?v7024/?v7025;               [get hero's position]
!!TR7023:T?y-5/d/d/d/d/d/d/d;                  [get terrain type]

!!IF:Wv7020;                                   [enable hero variable]
!!VRw4&i^wog_208_enabled^/y-5<>8:S0;                      [reset w4 if not on water - if enabled]
!!HEv7020&i^wog_208_enabled^/y-5=8:S5/?w4;                [get hero's navagation skill level if on water - if enabled]

!!HEv7020&i^wog_212_enabled^/y-5<>8:S3/?y-1;              [get hero's scouting skill level if on land]
!!FU7023&i^wog_212_enabled^/y-5<>8/y-1>0:Py-1;            [do scouting function - if enabled]
** end of movement trigger

!?FU(WOG_CreateERMHook);
!!SN:Ex1/1/4607915/(WOG_201_KillWithArtillery); hook before artifact cast
!!SN:Ex1/1/4718431/(WOG_OnHeroMove);

!?FU(WOG_OnHeroMove);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(activeHeroPtr:y);
!!if&(activeHeroPtr)=0;
  !!SN:X?y99/0;
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4721255;
!!en;


** start of battle-start trigger
!?FU(OnBeforeBattle)|i^wog_204_enabled^/i^wog_207_enabled^;



** first aid
!!if&i^wog_204_enabled^;
  !!VRv7040:C0/0/0/0/0/0/0;                   [no creatures to resurrect after battle attacker]
  !!VRv7047:C0/0/0/0/0/0/0;                   [no creatures to resurrect after battle defender]
  !!BA:M0/0/?y-1/?v7040;                      [save qty in each of attacking hero's slots for after battle]
  !!BA:M0/1/?y-1/?v7041;                      [to determine qty lost for first aid skill]
  !!BA:M0/2/?y-1/?v7042;
  !!BA:M0/3/?y-1/?v7043;
  !!BA:M0/4/?y-1/?v7044;
  !!BA:M0/5/?y-1/?v7045;
  !!BA:M0/6/?y-1/?v7046;
  !!BA:M1/0/?y-1/?v7047;                      [save qty in each of defending hero's slots for after battle]
  !!BA:M1/1/?y-1/?v7048;                      [to determine qty lost for first aid skill]
  !!BA:M1/2/?y-1/?v7049;
  !!BA:M1/3/?y-1/?v7050;
  !!BA:M1/4/?y-1/?v7051;
  !!BA:M1/5/?y-1/?v7052;
  !!BA:M1/6/?y-1/?v7053;
!!en;

** mysticism
!!if&i^wog_207_enabled^;
  ; Initialise vars
  !!VRi^wog_207_manaDiff_0^:S0;
  !!VRi^wog_207_manaDiff_1^:S0;

  ; Set up Mysticism effect if the battle is with two heroes
  !!if&i^battle_hero_1^>(NO_HERO);
    !!FU(WOG_207_SetUpMysticismManaReduction):P(BATTLE_LEFT);
    !!FU(WOG_207_SetUpMysticismManaReduction):P(BATTLE_RIGHT);
  !!en;
!!en;

!?FU(OnSetupBattlefield)&i^wog_202_enabled^;               [Continue trigger if any skills are enabled]

** eagle eye
!!VRv7018:S0;                               [reset v7018]
!!VRv7019:S0;                               [reset v7019]
!!VRi^wog_202_heroSpellCountered^:S(FALSE);                        [reset global flag of whether a spell has been countered]

!!VRy-9:S-1;                                [reset y-9]
!!BA:H0/?y-9;                               [get attacking hero's #]
!!FU7017&y-9>-1:Py-9/0;                     [call function 7017 for attacking hero]

!!VRy-9:S-1;                                [reset y-9]
!!BA:H1/?y-9;                               [get defending hero's #]
!!FU7017&y-9>-1:Py-9/1;                     [call function 7017 for defending hero]
** end of battle-start trigger


** start of battlefield start trigger
!?FU(WOG_BattleStack_InitParams)&i^battle_hero_%x2^<>(NO_HERO)/i^wog_208_enabled^;                               [continue if luck or navigation enabled]
!#VA(stackId:x) (side:x);
!!HEi^battle_hero_%i^:R7/?(bits:y);
!!VR(bits):&(BIT_18);                                                                         [if hero is on boat]
!!if&(bits);
  !!HEi^battle_hero_%(side)^:S(SKILL_NAVIGATION)/?(skillLevel:y);
  !!if&(skillLevel);
    !!BM(stackId):Ad(skillLevel:y) Dd(skillLevel:y);
  !!en;
!!en;
** navigation

** start of battle turn one trigger
!?FU(OnBattleRound)&i^wog_206_enabled^/i^battle_round^=0;
** luck
 ** luck

!!re i/0/i^battle_hero_vs_hero^;
  !!HEi^battle_hero_%i^:S(SKILL_LUCK)/?(luckLevel:y);
  !!if&(luckLevel);
    !!FU(NewIntArray):P?(mons:y);
    !!re j/0/(ARMY_SLOT_LAST);
      !!BA:Mi/j/?n/?t;
      !!if&t<>(NO_MON)/n>0;
        !!FU(Array_Push):P(mons)/j;
      !!en;
    !!en;
    !!SN:M(mons)/?(size:y);
    !!if&(size);
      !!VR(chance:y):S10 *(luckLevel);
      !!VR(luckLevel):F0/(size);
      !!FU(Array_Shuffle):P(mons);
      !!re j/0/(luckLevel)/1/-1;
        !!FU(Array_Pop):P(mons)/?(stackBySideId:y);
        !!VR(rand:y):R0/1/100;
        !!if&(chance)>=(rand);
          !!VR(stackId:y):Si *(BATTLE_STACKS_PER_SIDE) +(stackBySideId);
          !!BM(stackId):Z?s Dd2 Ad2; P?(pos:y) ; C(SPELL_FORTUNE)/(pos)/(SKILL_NOT_LEARNED)/100/1 Dd2 Ad2;
          !!FU(WOG_Battle_CanStackReceiveSpell):P(stackId)/(SPELL_FORTUNE)/i/?(canRecieveSpell:y);
          !!HEi^battle_hero_%i^:Z?h;
          !!SN&(canRecieveSpell:y):E4474384/(CALLCONV_THISCALL)/s/(SPELL_FORTUNE)/100/0/h;
        !!en;
      !!en;
    !!en;
  !!en;
!!en;


** start of pre-action trigger
!?FU(OnBeforeBattleAction)&i^wog_202_enabled^;                                      [Continue trigger if eagle eye is enabled]
!!FU&v7018=0/v7019=0:E;                 [exit if no one has eagle eye]

; Exit if not casting
!!BG:A?(action:y) E?(target:y);         [get action type and target]


!!FU&(action)<>(BATTLE_ACTION_HERO_CAST)/(action)<>(BATTLE_ACTION_MONSTER_CAST):E; [no effect if not casting]

; Check if the spell is beneficial, here we check the type of target
; Note: BG:S returns -1 on monster casting, that's why we have to check target side
!!VR(isBenificial:y):S(FALSE);

!!if&(action)=(BATTLE_ACTION_HERO_CAST);
  !!BG:S?(spell:y);                     
  !!FU&(spell)>(SPELL_LAST_WOG):E;      [no effect if the spell is an extended spell, could have compatibility impact with erm]

  !!SS(spell):O?(spellTargetType:y);
  !!VR(isBenificial)&(spellTargetType)=1:S(TRUE);
!!el&(action)=(BATTLE_ACTION_MONSTER_CAST);
  ; Check if the target is valid, if not, check the casting position and see if there is a dead stack (need this for Archangel resurrection casting)
  !!if&(target)=(NO_STACK);
    !!BG:D?(pos:y);
    !!BU:D(pos)/?(target:y);
    !!FU&(target)<0:E;
  !!en;

  !!BM(target):I?(targetSide:y);
  !!VR(isBenificial)&(targetSide)=i^battle_acting_side^:S(TRUE);
!!en;

!!FU&(isBenificial)<>(TRUE):E;

; Check if it is lucky enough to counter
!!VR(result:y):S(FALSE);
!!VR(random:y):R0/0/99;                 [random roll]
!!VR(result)&i^battle_acting_side^=(BATTLE_LEFT)/v7019>0/(random)<v7019:S(TRUE); [if attacker cast, check against defender Eagle Eye rating]
!!VR(result)&i^battle_acting_side^=(BATTLE_RIGHT)/v7018>0/(random)<v7018:S(TRUE); [if defender cast, check against attacker Eagle Eye rating]
!!FU&(result)<>(TRUE):E;

!!if&i^battle_isVisible^;
  ; Play sound
  !!SN:P^telptin^;

  ; Show shield animation on the target or acting stack if massive
  !!if&(target)>(NO_STACK);
    !!BM(target):V32;
  !!el;
    !!BMi^battle_acting_stack^:V32;
  !!en;
!!en;

; Reduce mana (spell count) and show animation on the caster
; For monster cast
!!if&(action)=(BATTLE_ACTION_MONSTER_CAST);
  ; Skip the current turn
  !!BMi^battle_acting_stack^:Ed-1;      [reduce spell count by 1]
  !!BG:A(BATTLE_ACTION_WALK);           [make unit move (cancel action), possible to get morale]
  ; Show mana drained animation on the casting monster
  !!BMi^battle_acting_stack^&i^battle_isVisible^:V76;
; For hero cast
!!el&(action)=(BATTLE_ACTION_HERO_CAST);
  ; Reduce mana by the cost of the spell supposed to cast (by daemon_n)
  !!BG:H?(hero:y);

  !!if&(hero)<>(NO_HERO);
    !!VR(oppSide:y):Si^battle_acting_side^ X1;
    !!HE(hero):Z?(hero);
    !!VR(oppArmyOffs:y):S(oppSide) *(UNC_INT) +21700;
    !!UN:C(COMBAT_MANAGER)/4/?(cmbMgr:y)  C(cmbMgr)/(oppArmyOffs)/4/?(oppArmyPtr:y) C(cmbMgr)/21440/4/?(groundType:y);
    !!SN:E5133488/(CALLCONV_THISCALL)/(hero)/(spell)/(oppArmyPtr)/(groundType);
    !!SN:E5084480/(CALLCONV_THISCALL)/(hero)/v1;
  !!en;

  ; Set to no cast and pass the turn
  ; Note: BG:A would result in grid visually missing. Here we pass the stack turn and get back to redraw grids and spell book button
  !!BG:A(BATTLE_ACTION_SKIP);
  !!BHi^battle_acting_side^:M1;
  !!VRi^wog_202_heroSpellCountered^:S(TRUE);

  ; Show mana drained animation on the hero
  !!if&i^battle_isVisible^;
    !!if&i^battle_current_side^=(BATTLE_LEFT);
      !!VR(pos:y):S0;                   [attakcing hero]
    !!el;
      !!VR(pos):S16;                    [defending hero]
    !!en;

    !!FU(WOG_PlayAnimationOnHex):P76/(pos)/100;
  !!en;
!!en;

; Show combat msg
!!if&i^battle_isVisible^;
  !!VRz2:Sz148004;                      [set combat message]
  !!MM:Sz2;                             [display combat message]
!!en;

; Return to the caster's stack turn
; This is needed as when we cancel the hero spell with BG:A, the action turn is finished and roll to the next stack. We don't want to skip the caster's turn when the spell failed as it is way too imba
!?FU(OnBeforeBattleStackTurn)&i^wog_202_enabled^/i^wog_202_heroSpellCountered^;
!#VA(stack:x);

!!VR(stack):Si^battle_acting_stack^;
!!BM(stack):Fd~(MON_FLAG_ACTED);
!!VRi^wog_202_heroSpellCountered^:S(FALSE);

** end of pre-action trigger

!?FU(WOG_204_FindTargetToResurrect);
!#VA(side:x) (power:x);

    !!VR(min:y):S(side) *21;
    !!VR(max:y):S(min) +20;(ARMY_SLOT_LAST);
    !!re i/(min)/(max);
      !!BMi:N?n O?(slot:y) B?(startNumber:y);
      !!if&(slot)<>(NO_STACK)/n>0/(startNumber:y)>n;
        *!BMi:B?(startNumber:y);
      !!en;
    !!en;

  *!re i/(min)/(max);
    *!BMi:T?t N?n;
    *!if&t=(MON_FIRST_AID_TENT)/n>0;
      
      *!IF:L^%n %t^;
    *!en;
  *!en;

███─████─████────████──████─███─█───█─████─█──█────█──█
█───█──█─█──█────█──██─█──█─█───██─██─█──█─██─█────██─█
███─█──█─████────█──██─████─███─█─█─█─█──█─█─██─██─█─██
█───█──█─█─█─────█──██─█──█─█───█───█─█──█─█──█────█──█
█───████─█─█─────████──█──█─███─█───█─████─█──█────█──█


*?FU(WOG_204_GetResurrectPower);
*#VA(side:x) (result:x);
*!VR(result):S0;

*!HEi^battle_hero_%i^:A2/(ART_FIRST_AID_TENT)/?y99/?(isTent:y);
*!if&(isTent);
   *!HEi^battle_hero_%i^:A2/(ART_AMMO_CART)/?y99/?(isAmmo:y) S(SKILL_FIRST_AID)/?(skillLvl:y) E?y99/?(heroLv:y)/1;
   *!VR(multipler:y):S1 +(isAmmo) +(skillLvl);
   *!VR(result):R0/1/50 + (heroLv) *(multipler);

*!en;
  *!VR(min:y):S(side) *21;
  *!VR(max:y):S(min) +20;

*?FU(OnAfterBattleUniversal);
  *!re i/0/i^battle_hero_vs_hero^;(end_value);
    *!HEi^battle_hero_%i^:O?o A2/(ART_FIRST_AID_TENT)/?y99/?(isTent:y);
    *!IF:M^%o^;
    *!if&o<>(NO_OWNER);/(isTent);
      *!FU(WOG_204_GetResurrectPower):Pi/?(power:y);
      *!if&(power);
        *!FU(WOG_73_BattleFunc_CalculateStackHealing):Pi/(power:y)/?l/?n;
        
      *!en;
    *!en;
  *!en;
** end of post-action trigger


// Additional resistance for the resistance artifacts combo
!?FU(OnDwarfMagicResistance)&i^wog_210_enabled^;
; Exit if the targeted stack does not belong to a hero
!!MR:N?(stack:y);
!!BM(stack):I?(side:y);
!!FU&i^battle_hero_%(side)^=(NO_HERO):E;

; Exit if the owner of the stack does not own all 3 resistance artifacts
!!re i/(ART_GARNITURE_OF_INTERFERENCE)/(ART_BOOTS_OF_POLARITY);
  !!HEi^battle_hero_%(side)^:A2/i/?(backpacked:y)/?(equipped:y);

  !!FU&(equipped)=0:E;
!!en;

; Increase spell immunity by 20
!!MR:F?(resist:y);
!!VR(resist):+20 F0/100;
!!MR:F(resist);


** start of battle end trigger
!?FU(OnAfterBattleUniversal)|i^wog_204_enabled^/i^wog_207_enabled^/i^wog_202_enabled^;                     [Continue trigger if any skills are enabled]
** first aid
!!if&i^wog_204_enabled^;
  !!HEi^battle_hero_0^:O?(owner:y);     [get attacking hero's owner]

  !!if&(owner)<>(NO_OWNER);
    !!HEi^battle_hero_0^A2/6/?(backpacked:y)/?(equipped:y); [see if attacking hero has a First Aid Tent]
    !!FU(WOG_204_FirstAidAfterBattle)&(equipped)>0:P1; [handle first aid tent for attacker]
  !!en;

  !!if&i^battle_hero_1^>(NO_HERO);
    !!HEi^battle_hero_1^:O?(owner);     [get defending hero's owner]

    !!if&(owner)<>(NO_OWNER);
      !!HEi^battle_hero_1^:A2/6/?(backpacked:y)/?(equipped:y); [see if defending hero has a First Aid Tent]
      !!FU(WOG_204_FirstAidAfterBattle)&(equipped)>0:P2; [handle first aid tent for defender]
    !!en;
  !!en;
!!en;

** mysticism
!!if&i^wog_207_enabled^/i^battle_hero_1^>(NO_HERO);
  !!HEi^battle_hero_0^:Id-i^wog_207_manaDiff_0^/1;
  !!HEi^battle_hero_1^:Id-i^wog_207_manaDiff_1^/1;
!!en;

** end of battle end trigger
!?FU(WOG_201_SelectBestTarget);
!#VA(side:x) (dmg:x) (result:x);

!!VR(min:y):S(side) *21;
!!VR(max:y):S(min) +20;
!!VR(result):S(NO_STACK);
!!VR(killFv:y):S0;
!!VR(killCount:y):S0;

!!re i/(min)/(max);
  *!BA:M(enemySide)/i/?(mon:y)/?(qty:y);
  !!BMi:N?(qty:y) H?(hp:y) T?(mon:y) O?(armySlot:y);

  !!co|(armySlot)=(NO_MON);

  !!if&(mon)>(NO_MON)/(qty)>0/(hp)>0;
    !!MA:F(mon)/?(fv:y);
    *!VR(maxKillCount:y):S(qty);
    !!VR(currKillCount:y):S(dmg) :(hp) F0/(qty);
    !!VR(currKillFv:y):S(currKillCount) *(fv);

    ; Store the values if killing at least one
    !!if&(currKillCount)>0/(currKillFv)>(killFv);
      !!VR(result):Si;
      !!VR(killFv):S(currKillFv);
      !!VR(killCount):S(currKillCount);
    !!en;
  !!en;
!!en;
!?FU(OnStackToStackDamage)&i^wog_201_Shoot^;
!!VRx4:Si^wog_201_Shoot^;

** function to handle artillery, hero, skill level
!?FU(OnAfterTacticsPhase);
!!VRi^wog_201_ShootOnce^:S(TRUE);
&i^wog_201_enabled^
!?FU(WOG_201_KillWithArtillery)&i^wog_201_enabled^/i^wog_201_ShootOnce^;
  !!VRi^wog_201_ShootOnce^:S(FALSE);
  !!FU(WOG_GetRandomSeedByCoord):Pi^battle_x^/i^battle_y^/i^battle_z^/?(seed:y);
  !!re (side:y)/0/i^battle_hero_vs_hero^;
    !!HEi^battle_hero_%(side)^:A2/(ART_BALLISTA)/?y99/?(ballista:y) S(SKILL_ARTILLERY)/?(artilleryLv:y);
    !!if&(ballista)/(artilleryLv);

      !!VR(min:y):S(side) *21;
      !!VR(max:y):S(min) +20;

      !!re i/(min)/(max);
        !!BMi:T?t N?n;

        !!if&n>0/t=(MON_BALLISTA);
          !!BMi:Z?(stack:y);
          !!HEi^battle_hero_%(side)^:A2/(MON_AMMO_CART)/?(has:y)/?(equipped:y) E?(exp:y)/?(heroLv:y)/1; [check for Ammo Cart, get hero's level, artillery level]
          !!VR(equipped):F0/1 +1;       [ammo cart bonus]
          !!VR(mult:y):S1 +(artilleryLv) *(equipped); [set multiplier to 1]
          !!VR(seed):+i^timerDay^ +(side) +i^battle_hero_%(side)^;
          !!FU(WOG_SafeRand):P1/50/(seed)/?(dmg:y);
          !!VR(dmg:y):+(heroLv) *(mult); [ballista damage: (1-50 + hero level) x bonus multiplier x ammo]
          !!VR(oppSide:y):S(side) X1;
          !!FU(WOG_201_SelectBestTarget):P(oppSide)/(dmg)/?(targetStackId:y);

          !!if&(targetStackId)<>(NO_STACK);
            !!BM(targetStackId:y):Z?(targetStack:y) N?n H?h L?l;

            !!VR(maxDamage:y):Sn *h -l -1;
            !!VRi^wog_201_Shoot^:S(dmg) Fd/(maxDamage);

            !!UN:C(stack)/16/4/(targetStack:y);                              [set stack target]

            !!BMi:U3/?(shots:y) U3/1 G213/?(luck:y)/d  G213/0/d;

            !!if&i^battle_isVisible^;
              !!VR(msg:z):S^%T(wog.201.ballista_log)^;
              !!MM:S(msg:z);
            !!en;

            !!re j/0/4;                                                      [ skip double damage bonus]
              !!UN:C4470304/j/1/?i^test_%j^ C4470304/j/1/(OPCODE_NOP_1); 
            !!en;

            !!SN:E4453920/(CALLCONV_THISCALL)/(stack)/(targetStack:y);       [shoot stack to stack]

            !!re j/0/4;
              !!UN:C4470304/j/1/i^test_%j^;
            !!en;
            restore stack and hero data
            !!BMi:U3/(shots:y) G213/(luck:y)/d;

            next time make lost uncureable
            *!BM(targetStackId:y):N?(new:y);
            *!VR(lost:y):Sn -(new);
            *!BM(targetStackId:y):Bd-(lost);
            !!VRi^wog_201_Shoot^:S(FALSE);
          !!en;

          !!br;

        !!en;
      !!en;

    !!en;
  !!en;


** function to handle first aid tent
!?FU(WOG_204_FirstAidAfterBattle);                 y1= HP   y2=slot y9= first aid
!#VA(index:x);

!!VRy30:Sx1 -1;                                     [Legacy]
!!VRv7020:Si^battle_hero_%y30^;

!!HEv7020:A2/5/?y7/?y8 E?y3/?y4/1 S27/?y9;          [check for Ammo Cart, get hero's level, first aid level]
!!VRy5:S1;                                          [set multiplier to 1]
!!VRy5&y8>0:+1;                                     [ammo cart bonus]
!!VRy5&y9>0:+y9;                                    [first aid bonus]
!!VRy1:S0 +1 T49 +y4 *y5;                           [first aid tent heal: (1-50 + hero level) x bonus multiplier]
!!VRy2:R0/0/6;                                      [random slot # to start search from]
!!VRv2:S7;                                          [7 = slot not found]
!!DO7003/0/6/1:Px1/y1/y2;                           [heal next slot with >= 1 monster killed]
** end of function


** function to find slot where at least 1 cr was lost
!?FU7003;           x1=filter x2=hp healed  x3=slot

!!VRy4:Sx3 %7;                                      [get an actual slot number]
!!BA&x1=1:M0/y4/?y5/?y6;                            [get y5 type and y6 qty in slot y3 :attacker]
!!BA&x1=2:M1/y4/?y5/?y6;                            [get y5 type and y6 qty in slot y3 :defender]
!!VRy1&x1=1:S7040 +y4;                              [get variable # of previous qty :attacker]
!!VRy1&x1=2:S7047 +y4;                              [get variable # of previous qty :defender]
!!VRy7:Svy1;                                        [get previous qty]
!!VRy7:-y6;                                         [subtract current qty to get qty lost]

!!FU7004&v2=7/y7>0/y6>0:Px1/x2/x3/y4/y5/y6/y7;      [try to heal stack if some lost but some left]
!!VRx3:+1;                                          [next slot]
** end of function


** function to heal a stack
!?FU7004;
!!FU&x5<0:E;                                        [exit if invalid value]

!!HEv7020:B0/?z1;                                   [get hero's name]
!!MA:Px5/?y8;                                       [get hit points of monster x5 into y8]
!!FU&y8<1:E;                                        [exit if invalid value]

!!VRy5:Sx2;                                         [# of hit points to heal]
!!VRy5::y8;                                         [divided by monster hit points, rounded down, equals # to save]
!!VRy5&y5>x7:Sx7;                                   [can't save more than qty that died]
!!BA&x1=1/y5>0:M0/x4/?x5/dy5;                       [restore y5 creatures attacker]
!!BA&x1=2/y5>0:M1/x4/?x5/dy5;                       [restore y5 creatures defender]
!!IF&1000/y5=1:Q2/21/x5/1/z148007;
!!IF&1000/y5>1:Q2/21/x5/1/z148008;
!!UN:R1;                                            [redraw screen to show revived creatures]
!!VRv2&y5>0:Sx4;                                     [note that we healed a stack if we did]
** end of function


** function for mysticism
!?FU(WOG_207_SetUpMysticismManaReduction);
!#VA(side:x);
!#VA(usedY[1]:y);

!!VR(enemySide:y):S(side) X1;

; Check for Mysticism level
!!HEi^battle_hero_%(side)^:S(SKILL_MYSTICISM)/?(mysticismLv:y); [get hero's Mysticism level]
!!FU&(mysticismLv)=(SKILL_NOT_LEARNED):E;     [Exit if Mysticism is not learned]

; Check for Mana
!!HEi^battle_hero_%(enemySide)^:I?(mana:y)/1; [get enemy hero's spell points]

; Reduce mana for the enemy if Mysticism is learned and enemy has mana
!!if&(mysticismLv)>(SKILL_NOT_LEARNED)/(mana)>0;
  !!FU(WOG_207_GetManaPercentage):P(mysticismLv)/?y1; [Get percenatge of mana left]
  !!VR(newMana:y):S(mana) *y1 :100;           [calculate enemy hero's new spell points, decimal adjustment]

  ; Show msg for humna player - could be both sides
  !!if&1000;
    !!HEi^battle_hero_%(side)^:B0/?z1;            [get hero's name]
    !!HEi^battle_hero_%(enemySide)^:B0/?z3;       [get enemy hero's name]
    !!VR(picIndex:y):S26 +(mysticismLv);          [set mysticism picture]
    !!IF:Q2/(PIC_TYPE_SEC_SKILL)/(picIndex)/(MSG_TYPE_MES)/z148009; [Show message for human player]
  !!en;

  !!HEi^battle_hero_%(enemySide)^:I(newMana); [enemy hero's spell points reduced]
  ; Store the mana reduced of the enemy hero
  !!VRi^wog_207_manaDiff_%(enemySide)^:S(newMana) -(mana);
!!en;

!?FU(WOG_207_GetManaPercentage);
!#VA(mysticismLv:x) (result:x);

!!if&(mysticismLv)=(SKILL_BASIC);
  !!VR(result):S80;                           [basic 80%]
!!el&(mysticismLv)=(SKILL_ADVANCED);
  !!VR(result):S70;                           [advanced 70%]
!!el&(mysticismLv)=(SKILL_EXPERT);
  !!VR(result):S60;                           [expert 60%]
!!en;
** end of function


** function to iterate through current player's heroes (weekly)
!?FU(WOG_203_211_ManageWeeklyEvents);
!!HEx16:O?(owner:y);                              [get owner of iterated hero]

!!if&(owner)=i^timerOwner^;
  !!HEx16:S(SKILL_ESTATES)/?(skillLevel:y);                            [get hero's estates level]
  !!FU(WOG_203_SetUpEstatesWeeklyBonus)&i^wog_203_enabled^/(skillLevel)>(SKILL_NOT_LEARNED):Px16/(skillLevel);     [if hero in use and it's that hero's owner's turn, continue in function (estates) - if enabled]
  !!HEx16:S(SKILL_SCHOLAR)/?(skillLevel);                            [get hero's scholar skill level]
  !!FU(WOG_211_TeachScholarSpell)&i^wog_211_enabled^/(skillLevel)>(SKILL_NOT_LEARNED):Px16/(skillLevel);                  [if hero in use and it's that hero's owner's turn, continue in function (scholar) - if enabled]
!!en;
** end of function


** function for estates      x2=estates level
!?FU(WOG_203_SetUpEstatesWeeklyBonus);
!#VA(hero:x) (estatesLv:x);

!!HE(hero):B0/?z700;                           [get hero's name]
!!HE(hero):R2/?y1;                             [get hero's sex]
!!IF:W(hero);                                  [enable hero variables]

; Question: Is w8 really used for anything? - Archer30
!!if&(estatesLv)>=(SKILL_BASIC);
  !!VRw5&w8<1:R0/0/5;             [if not set, get random resource #]
  !!VRw8&w8=0:S1;                 [set to lock resources]

  !!if&(estatesLv)>=(SKILL_ADVANCED);
    !!VRw6&w8<2:R0/0/5;
    !!VRw8&w8=1:S2;

    !!if&(estatesLv)>=(SKILL_EXPERT);
      !!VRw7&w8<3:R0/0/5;
      !!VRw8&w8=2:S3;
    !!en;
  !!en;
!!en;

!!VRy3:R0/1/2;                                [set quantity for resource 1]
!!VRy3|w5=(RES_WOOD)/w5=(RES_ORE):*2;         [double for wood or ore]
!!VRy4:R0/1/2;                                [set quantity for resource 2]
!!VRy4|w6=(RES_WOOD)/w6=(RES_ORE):*2;          [double for wood or ore]
!!VRy5:R0/1/2;                                [set quantity for resource 3]
!!VRy5|w7=(RES_WOOD)/w7=(RES_ORE):*2;         [double for wood or ore]

!!if&1000;
  !!IF&(estatesLv)=(SKILL_BASIC):Q2/w5/y3/1/z148013;
  !!IF&(estatesLv)=(SKILL_ADVANCED):Q2/w5/y3/w6/y4/1/z148014;
  !!IF&(estatesLv)>=(SKILL_EXPERT):Q2/w5/y3/w6/y4/w7/y5/1/z148015;
!!en;

!!if&(estatesLv)>=(SKILL_BASIC);
  !!OW:Ri^timerOwner^/w5/dy3; [give the resources]

  !!if&(estatesLv)>=(SKILL_ADVANCED);
    !!OW:Ri^timerOwner^/w6/dy4; [give the resources]
    !!OW&(estatesLv)>=(SKILL_EXPERT):Ri^timerOwner^/w7/dy5; [give the resources]
  !!en;
!!en;
** end of function


** function for scholar       x2=scholar level
!?FU(WOG_211_TeachScholarSpell);
!#VA(hero:x) (scholarLv:x);

!!HE(hero):B0/?z700;                           [get hero's name]
!!HE(hero):S7/?y2;                             [get hero's wisdom skill level]
!!VRy3&(scholarLv)=1:S57;                      [set basic scholar picture]
!!VRy3&(scholarLv)=2:S58;                      [set advanced scholar picture]
!!VRy3&(scholarLv)=3:S59;                      [set expert scholar picture]
!!HE(hero):A2/0/?y7/?y8;                       [see if hero has a spell book]
!!VRy6:R0/0/99;                                [random roll for chance to learn spell]
!!VRy6&(scholarLv)=2:+10;                      [advanced bonus]
!!VRy6&(scholarLv)=3:+20;                      [expert bonus]
!!VRv7027:S0;                                  [loop counter]

** Algor: begin
!!if&y8>0/y6>59;
  !!VRv1:S-1;
  !!DO7015/0/69/1:P(hero)/y2/-1/(scholarLv);            [count number of avaliable spells in v1]

  !!if&v1>-1;
    !!VRv1:-1;
    !!VRy10:S0 Rv1;                           [y10 - random avaliable spell]
    !!VRv1:S-1;
    !!DO7015/0/69/1:P(hero)/y2/y10/(scholarLv);         [learn y10 avaliable spell]
  !!en;
!!en;

!?FU7015;                                     [x1 - hero, x2 - wisdom, x3 - learn spell(>=0)/count spells(=-1), x4 - scholar]
!!HEx1:Mx16/?y1;                              [y1=1 for known spell]
!!UN:J0/x16/?y2;                              [y2=1 for banned spell]
!!SSx16:L?y3;                                 [y3 - spell level]
!!VRy6:Sy3 -2;                                [y6 - required wisdom level]
!!VRy7:Sy3 -1;                                [y7 - required sholar level]

!!if&y1=0/y2=0/y6<=x2/y7<=x4;
  !!VRv1:+1;                                  [v1 - spell count]

  !!if&v1=x3;
    !!HEx1:Mx16/1 O?y4;                       [learn slell, y4 - owner]
    !!OW:Iy4/?y5;                             [y5=0 for human player]
    !!IF&y5=0:Q2/9/x16/1/z148016;             [message for human player]
    !!VRx16:S100;                             [exit cycle]
  !!en;
!!en;
** Algor: end


** function for eagle eye            x1 = hero #     x2 = attacker/defender
!?FU7017;
!!HEx1:S11/?y1 A2/63/?y2/?y3 A2/64/?y2/?y4 A2/65/?y2/?y5;     [get eagle eye skill level, check for artifacts]
!!VRy6&y1>0:S10 *y1;                          [set base chance to skill level x 10]
!!VRy6&y1>0/y3>0:+5;                          [Bird of Perception +5]
!!VRy6&y1>0/y4>0:+10;                         [Stoic Watchman +10]
!!VRy6&y1>0/y5>0:+15;                         [Emblem of Cognizance +15]
!!VRy6&y1>0/y3>0/y4>0/y5>0:+30;               [All three +30]
!!VRv7018&y1>0/x2=0:Sy6;                      [set for attacker]
!!VRv7019&y1>0/x2=1:Sy6;                      [set for defender]
** end of function


** function to pick a monster
!?FU(WOG_212_GetRandMonAndNames);
!#VA(mon:x);

!!FU(WOG_GetRandomMonster):P?(mon);

!!SN:H^monname^/(mon)/0/?z704;          [get monster name]
!!SN:H^monname^/(mon)/1/?z705;          [get monsters name]
** end of function


** function for scouting       x1=scouting
!?FU7023;
!!VRy4:S0;                                    [set to 0]
!!VRy4&x1=1:R1199;                            [set random roll to 1.0% (12/1200)]
!!VRy4&x1=2:R799;                             [set random roll to 1.5% (12/800)]
!!VRy4&x1=3:R599;                             [set random roll to 2.0% (12/600)]
!!FU&y4>12:E;
*!HEv7020:O?v7021;                            [get hero's owner]
!!HEv7020:B0/?z700;                           [get hero's name]
!!HEv7020:R2/?y1;                             [get hero's sex]
!!VRz701&y1=0:Sz148017;
!!VRz701&y1=1:Sz148018;
!!VRz702&y1=0:Sz148019;
!!VRz702&y1=1:Sz148020;
!!VRz703&y1=0:Sz148021;
!!VRz703&y1=1:Sz148022;
!!VRy3:S11 +x1;                               [set scouting picture]
!!IF&1000/y4=1:Q2/20/y3/1/z148023;
!!IF&1000/y4=1:Q2/35/20/1^^;
!!HEv7020&y4=1:Id+20;                         [give 20 spell points]
!!IF&1000/y4=2:Q2/20/y3/1/z148024;
!!VRr&y4=2:S1 R24 *100;                       [random 1 to 25 x 100]
!!IF&1000/y4=2:Q2/6/r/1^^;
!!OW&y4=2:Ri^timerOwner^/6/dr;                        [give gold]
!!IF&1000/y4=3:Q2/20/y3/1/z148025;
!!VRs&y4=3:S0 R5;                             [random resource 0 to 5]
!!VRr&y4=3:S1 R2;                             [random quantity 1 to 3]
!!VRr&y4=3/s=0:*2;                            [double for wood]
!!VRr&y4=3/s=2:*2;                            [double for ore]
!!IF&1000/y4=3:Q2/s/r/1^^;
!!OW&y4=3:Ri^timerOwner^/s/dr;                        [give the resources]
!!IF&1000/y4=4:Q2/20/y3/1/z148026;
!!VRs&y4=4:S0 R5;                             [random resource 0 to 5]
!!VRr&y4=4:S4 R2;                             [random quantity 4 to 6]
!!VRr&y4=4/s=0:*2;                            [double for wood]
!!VRr&y4=4/s=2:*2;                            [double for ore]
!!IF&1000/y4=4:Q2/s/r/1^^;
!!OW&y4=4:Ri^timerOwner^/s/dr;                        [give resources]
!!UN&y4=4:R2;                                 [redraw resources bar]
!!FU(WOG_212_GetRandMonAndNames)&y4=5:P?s;                            [call function 7019 to pick monster]
!!MA&y4=5:Gs/?r;                              [get 1 weeks production]
!!IF&1000/y4=5/r=1:Q2/20/y3/1/z148027;
!!IF&1000/y4=5/r>1:Q2/20/y3/1/z148028;
!!HEv7020&1000/y4=5:Cs/r/-1/0/-1/0/-1/0/-1/0/-1/0/-1/0;  [give creatures]
!!HEv7020&-1000/y4=5:C2/s/r/0;                [offer AI creatures]
!!IF&1000/y4=6:Q2/20/y3/1/z148029;
!!IF&1000/y4=6:Q2/14/1/1^^;
!!HEv7020&y4=6:R0/d1;                         [+1 morale]
!!IF&1000/y4=7:Q2/20/y3/1/z148030;
!!IF&1000/y4=7:Q2/11/1/1^^;
!!HEv7020&y4=7:R1/d1;                         [+1 luck]
!!IF&1000/y4=8:Q2/20/y3/1/z148031;
!!HEv7020&y4=8:E?y5/?y6/1;                     [get hero's level]
!!VRr&y4=8:Sy6 T20 *50;                        [(level + 0-20) x 50]
!!IF&1000/y4=8:Q2/17/r/1^^;
!!HEv7020&y4=8:Edr;                            [give experience]
!!IF&1000/y4=9:Q2/20/y3/1/z148032;
!!HEv7020&y4=9:Wd+400;                         [increase movement]
!!IF&1000/y4=10:Q2/20/y3/1/z148033;
!!VRr&y4=10:S3 *x1 +16;                        [area]
!!UN&y4=10:Sv7023/v7024/v7025/i^timerOwner^/r; [reveal area]
!!FU(WOG_212_GetRandMonAndNames)&y4=11:P?s;    [call function 7019 to pick monster]
!!MA&y4=11:Vs/?r;                              [get AdvMapL]
!!IF&1000/y4=11:Q2/20/y3/1/z148034;
!!IF&1000/y4=11:Q2/21/s/2/z148035;
!!HEv7020&2/y4=11:Tv7023/v7024/v7025/s/r O?o;  [fight monsters]
!!FU(WOG_212_GetRandMonAndNames)&y4=12:P?s;    [call function 7019 to pick monster]
!!MA&y4=12:Hs/?r;                              [get AdvMapH]
!!IF&1000/y4=12:Q2/20/y3/1/z148036;
!!IF&1000/y4=12:Q2/21/s/2/z148037;
!!HEv7020&2/y4=12:Tv7023/v7024/v7025/s/r O?o;  [fight monsters]
!!if&o=(NO_OWNER);
  !!HEv7020:P?y1/?y2/?y3 Z?y4;
  !!UN:Cy4/7/1/y1 Cy4/9/1/y1 Cy4/10/1/y3;
!!en;

!!SN:D;                                       [redraw screen]
** end of function


** function to offset skill levels
!?FU(WOG_210_SetOrRestoreResistance);   x1=hero  x2=set/reset
!#VA(hero:x) (mode:x);

!!HE(hero):S(SKILL_RESISTANCE)/?(resLv:y); [get hero's resistance skill level]

!!if&(mode)=0;
  !!HE(hero)&(resLv)=(SKILL_BASIC):S(SKILL_RESISTANCE)/9; [set basic resistance skill level]
  !!HE(hero)&(resLv)=(SKILL_ADVANCED):S(SKILL_RESISTANCE)/10; [set advanced resistance skill level]
  !!HE(hero)&(resLv)=(SKILL_EXPERT):S(SKILL_RESISTANCE)/11; [set expert resistance skill level]

  !!VR(resArtSetEquipped:y):S(FALSE);
  !!HE(hero):A2/(ART_GARNITURE_OF_INTERFERENCE)/?(has:y)/?(art1:y) A2/(ART_SURCOAT_OF_COUNTERPOISE)/?(has)/?(art2:y) A2/(ART_BOOTS_OF_POLARITY)/?(has)/?(art3:y); [see if hero has Garniture of Interference, Surcoat of Counterpoise, Boots of Polarity]
  !!VR(resArtSetEquipped)&(art1)/(art2)/(art3):S(TRUE); [artifact bonus]

  !!if&(resArtSetEquipped);
    !!HE(hero)&(resLv)=(SKILL_NOT_LEARNED):S(SKILL_RESISTANCE)/-17; [set no resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_BASIC):S(SKILL_RESISTANCE)/-7; [set basic resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_ADVANCED):S(SKILL_RESISTANCE)/-6; [set advanced resistance (combo)]
    !!HE(hero)&(resLv)=(SKILL_EXPERT):S(SKILL_RESISTANCE)/-5; [set expert resistance (combo)]
  !!en;
!!el;
  !!HE(hero)&(resLv)=-17:S(SKILL_RESISTANCE)/0; [restore no resistance (combo)]
  !!HE(hero)|(resLv)=9/(resLv)=-7:S(SKILL_RESISTANCE)/1; [restore basic resistance skill level]
  !!HE(hero)|(resLv)=10/(resLv)=-6:S(SKILL_RESISTANCE)/2; [restore advanced resistance skill level]
  !!HE(hero)|(resLv)=11/(resLv)=-5:S(SKILL_RESISTANCE)/3; [restore expert resistance skill level]
!!en;
** end of function


** function to check for combo artifacts
!?FU7007;   x1= switch

!!HE-1&x1=1:A2/63/?y1/?y2 A2/64/?y1/?y3 A2/65/?y1/?y4;  [see if hero has Bird of Perception, Stoic Watchman, Emblem of Cognizance]
!!HE-1&x1=2:A2/57/?y1/?y2 A2/58/?y1/?y3 A2/59/?y1/?y4;  [see if hero has Garniture of Interference, Surcoat of Counterpoise, Boots of Polarity]

!!IF&1000/x1=1/y2>0/y3>0/y4>0:Q2/8/63/8/64/8/65/1/z148038;
!!IF&1000/x1=2/y2>0/y3>0/y4>0:Q2/8/57/8/58/8/59/1/z148039;
** end of function


**  object trigger - post visit - Bird of Perception
!$OB5/63&i^wog_202_enabled^;
!!FU7007:P1;
**  object trigger - post visit - Stoic Watchman
!$OB5/64&i^wog_202_enabled^;
!!FU7007:P1;
**  object trigger - post visit - Emblem of Cognizance
!$OB5/65&i^wog_202_enabled^;
!!FU7007:P1;

**  object trigger - post visit - Garniture of Interference
!$OB5/57&i^wog_202_enabled^;
!!FU7007:P2;
**  object trigger - post visit - Surcoat of Counterpoise
!$OB5/58&i^wog_202_enabled^;
!!FU7007:P2;
**  object trigger - post visit - Boots of Polarity
!$OB5/59&i^wog_202_enabled^;
!!FU7007:P2;


** Hooking trigger for Pathfinding
!?FU(WOG_CreateERMHook)&i^wog_209_enabled^;
!#VA(address:x);

!!SN:E(address)/1/5131991/(WOG_OnGetMovementPointsByMonsterSpeed);

!?FU(WOG_OnGetMovementPointsByMonsterSpeed);
!#VA(address:x);

!!UN:C(address)/(STRUCT_HOOK_CONTEXT_EBX)/4/?(heroStruct:y) C(heroStruct)/26/2/?(hero:y);

!!HE(hero):S(SKILL_PATHFINDING)/?(skillLevel:y);
!!FU&(skillLevel)<=(SKILL_NOT_LEARNED):E;[exit if the hero has no Pathfinidng skill]

!!UN:C(address)/(STRUCT_HOOK_CONTEXT_ECX)/4/?(lowestSpeed:y); [Get the lowest monster speed of the hero's army]
!!FU&(lowestSpeed)>8:E;                 [exit if Pathfinding is not needed at all]

!!if&(skillLevel)=(SKILL_BASIC);
  !!VR(lowestSpeed):S6;
!!el&(skillLevel)=(SKILL_ADVANCED);
  !!VR(lowestSpeed):S7;
!!el&(skillLevel)>=(SKILL_EXPERT);
  !!VR(lowestSpeed):S8;
!!en;

!!UN:C(address)/(STRUCT_HOOK_CONTEXT_ECX)/4/(lowestSpeed:y);
** end of trigger
