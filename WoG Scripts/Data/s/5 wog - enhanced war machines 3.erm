ZVSE2

** Enhanced War Machines III by Bonizag
** Wogify Name: script73.erm
** 
** Updated: Febrary 20, 2012 by rennyo
** Updated: Nov 2021 by Archer30
** Updated: Dec 2021 by daemon_n

!BY daemon_n:
*Since 05.12.2021 ballista is w81, ammo_cart is w82, first aid tent is w83!


** variables used:        v847, v850-v859, v864-v880 for long term
**                        v1-v3,v7800-v7956 temporarily

** string variables used: z1-z4, z78-z90 temporarily

** flags used:            782-785, 787-790 for long term
**                        2,3,4 temporarily

** functions used:        7795-7819

** hero variables used:   w81-w83

** object variables used: H (at towns and war machine factories), O for owner at war machine factory, T at towns
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------  I N I T I A L I Z A T I O N  -----------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------


!#UN:P(WOG_OPT_ENHANCED_WAR_MACHINES_III)/?v847;                       [check if option is enabled]
!?FU(OnAfterErmInstructions)&v847;
!!FU(WOG_73_Initialization):P;

!?FU(WOG_73_Initialization);
  !!IF:V784/0;                            [flg#784, 784 set false for the first battle]
  !!IF:V785/0;                            [flg#785, hero doesn't fights for war machine artifact by default]
  !!IF:V787/0;                            [flg#787, 787 set false for the fist battle]

  !!MA:C(MON_BALLISTA)/(RES_GOLD)/2500;
  !!MA:C(MON_FIRST_AID_TENT)/(RES_GOLD)/750;                        [War machines cost 750 gold except for Ballista]
  !!MA:C(MON_AMMO_CART)/(RES_GOLD)/750;

  !!re i/0/(HERO_LAST_WOG);                                         [reset all w-vars]
    !!IF:Wi;

    !!re j/81/83;
      !!VRwj:S0;
    !!en;

    !!FU(WOG_73_Func_CorrectHeroVariablesW):Pi;       [correct w-vars if there are some wm equipped]
  !!en;


-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
---------------------  A D V M A P   P R O C E D U R E  ---------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------


!?FU(OnEveryDay)&i^timerOnce^/v847; [continue trigger only if it is an other days and the beginning of a new week]

  !!VR(perThreeDays:y):Si^timerDay^ %3;
  !!if&(perThreeDays)=0;
    !!FU(WOG_73_Func_ForceBuyMachinesInTownsForAI):P;
  !!en;

  !!if&i^timerWeekday^=1;

    !!UN:U(OBJ_TOWN)/-1/?(towns:y);                         [get the number of towns]

    !!re i/1/(towns)/1;/1/-1;
      !!FU(WOG_73_Func_TownsAndFactoriesFilling):Pi/(OBJ_TOWN);[iterate through towns and fill them up]
    !!en;

    !!UN:U(OBJ_WAR_MACHINE_FACTORY)/-1/?(factories:y);                        [get the number of war machines factories]

    !!re i/1/(factories);
      !!FU(WOG_73_Func_TownsAndFactoriesFilling):Pi/(OBJ_WAR_MACHINE_FACTORY); [iterate through war machine factories and fill them up]
    !!en;

  !!en;


!?OB(OBJ_ARTIFACT)&v847=1;                                                                  [hero finds first aid tent on adventure map]
  !!OB998:U?(artifact:y);

  !!if|(artifact)=(ART_BALLISTA)|(artifact)=(ART_AMMO_CART)|(artifact)=(ART_FIRST_AID_TENT);
    !!HE-1:N?(heroId:y);                                                                    [store hero number in (heroId)]
    !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(heroId);                              [dismiss original war machines]
    !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);                                      [to show correct w vars]
    !!FU(WOG_73_Func_RemoveEquippedMachines):P(heroId);                                     [remove equipment so later we can detect the picked up artifact]
    !!IF:V785/1;                                                                            [we fight for a war machine artifact]
  !!en;

!$OB(OBJ_ARTIFACT)&v847=1;
  !!OB998:U?(artifact:y);

  !!if|(artifact)=(ART_BALLISTA)|(artifact)=(ART_AMMO_CART)|(artifact)=(ART_FIRST_AID_TENT);
    !!HE-1:N?(heroId:y);                                                                    [store hero number in (heroId)]

    *!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);
      !!IF:W(heroId);
      !!HE-1:A2/(artifact)/d/?(equipped:y);                                                          [vg nr of equipped first aid tents]
      !!if&(equipped);
        !!VR(wVar:y):S(artifact) +77;
        !!VRw(wVar):+1;
      !!en;

    *!en;

    !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroId);                                    [correct equipment]
    !!IF:V785/0;                                                                            [we don't fight for a war machine artifact]
  !!en;

!?FU(OnAdventureMapRightMouseClick)&v847=1/i^mouse_item^=(ITEM_ADVMAP_QUEST_LOG_BTN)/999;                                              [continue trigger only for the right player]
  !!OW:A-1/?(heroId:y);                                                                                                                [selected hero in vg]

  !!if&(heroId)>=0;

    !!IF:W(heroId);                                                                                                                    [use hero's w# variables]
    !!HE(heroId):B0/?(heroName:z);                                                                                                     [get hero name]
    !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(heroId);                                                                         [dismiss original war machines]
    !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);                                                                                 [to show correct w vars]
    !!CM:R0;                                                                                                                           [don't show quest log standard info when right clicked on it]

    //set New  Names for The Artifacts
    !!SN:H^art^/(ART_BALLISTA)/0/^%W81^ H^art^/(ART_AMMO_CART)/0/^%W82^ H^art^/(ART_FIRST_AID_TENT)/0/^%W83^;
    !!IF:Q1/(PIC_TYPE_ART)/(ART_BALLISTA)/(PIC_TYPE_ART)/(ART_AMMO_CART)/(PIC_TYPE_ART)/(ART_FIRST_AID_TENT)/(MSG_TYPE_POPUP)/z173000; [show number]

    //restore original Names for The Artifacts
    !!SN:H^-art^/(ART_BALLISTA)/0/^^ H^-art^/(ART_AMMO_CART)/0/^^ H^-art^/(ART_FIRST_AID_TENT)/0/^^;

  !!en;

!?FU(OnAdventureMapRightMouseClick)&v847=1/i^mouse_item^=(ITEM_ADVMAP_ADVENTURE_MAP)/999;                 [when we right-click on war machine factory]
  !!OBi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^:T?j;                                                      [get type of clicked object]
  !!FU&j<>(OBJ_WAR_MACHINE_FACTORY):E;

  !!POi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^:H?k O?o;                                                  [get H value of war machine factory and owner]
  !!IF:V2/1;                                                                                              [assume the war machine factory is owned by current or an allied player]

  !!IF&o<0:V2/0;                                                                                          [owned by no color]
  !!OW:To/?q Tp/?r;                                                                                       [get teams]
  !!IF&q<>r:V2/0;                                                                                         [owner is not allied]

  !!if&2;
    !!CM:R0;
    !!FU(WOG_73_Func_GetMachinesAmountInFactory):Pi^mouse_mapX^/i^mouse_mapY^/i^mouse_mapZ^/?(ballistas:y)/?(ammos:y)/?(tents:y);

    //set New  Names for The Artifacts
    !!SN:H^art^/(ART_BALLISTA)/0/^%(ballistas)^ H^art^/(ART_AMMO_CART)/0/^%(ammos)^ H^art^/(ART_FIRST_AID_TENT)/0/^%(tents)^;
    !!IF:Q1/(PIC_TYPE_ART)/(ART_BALLISTA)/(PIC_TYPE_ART)/(ART_AMMO_CART)/(PIC_TYPE_ART)/(ART_FIRST_AID_TENT)/(MSG_TYPE_POPUP)/z173001; [show number]
    //restore original Names for The Artifacts
    !!SN:H^-art^/(ART_BALLISTA)/0/^^ H^-art^/(ART_AMMO_CART)/0/^^ H^-art^/(ART_FIRST_AID_TENT)/0/^^;
  !!en;

!?FU(OnHeroScreenMouseClick)&v847=1/i^mouse_action^=(MOUSE_RMB_PRESSED); //see number of hero's war machines - hero screen
  !!if|i^mouse_item^=15/i^mouse_item^=16/i^mouse_item^=17;
    !!CM:R0;
    !!IF:W-1;                                                      [use hero's w# variables]
    !!HE-1:B0/?z1;

    !!if&i^mouse_item^=15;                                         [if ballista slot]

      !!VRz2:S^%W81^;
      !!VRz3&w81<=1:Sz173002;
      !!VRz3&w81>1:Sz173003;    
    !!el&i^mouse_item^=16;                                         [if ammo slot]

      !!VRz2:S^%W82^;
      !!VRz3&w82<=1:Sz173004;
      !!VRz3&w82>1:Sz173005;
    !!el;                                                          [if tent slot]

      !!VRz2:S^%W83^;
      !!VRz3&w83<=1:Sz173006;
      !!VRz3&w83>1:Sz173007;
    !!en;

    !!VR(artifact:y):Si^mouse_item^ -11;                           [correction artifact picture by clicking slot]
    !!IF:Q1/(PIC_TYPE_ART)/(artifact)/(MSG_TYPE_POPUP)/z173008;

  !!en;

!?OB(OBJ_WAR_MACHINE_FACTORY)&v847=1;                              [hero is at war machine factory]
  flag 790 - check if gold is enough

  !!HE-1:P?(x:y)/?(y:y)/?(z:y) N?(heroId:y) O?(owner:y);           [hero number in vi]

  !!if&999;                                                        [only for Human and His turn]
    !!OB(x)/(y)/(z):S;                                             [disable standard reaction]
    !!PO(x)/(y)/(z):O(owner);                                            [update owner]
    !!VR(x):+1;
    !!PO(x)/(y)/(z):O(owner);

    !!VR(x):-1;                                                    [restore vf]
    *!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(heroId);     [dismiss original war machines]
    !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);             [correct w vars if needed]
    !!PO(x)/(y)/(z):H?(wmAmount:y);
    !!FU(WOG_73_Msg_BuyMachinesInFactory):P(x)/(y)/(z)/(heroId); [call buy machines DLG]

  !!en;

  !!if&-(ERM_FLAG_IS_HUMAN);
    
    !!FU(WOG_73_Func_GetMachinesAmountInFactory):P(x)/(y)/(z)/?(ballistas:y)/?(ammos:y)/?(tents:y); [get available machines]

    !!if&(tents);
      !!IF:V790/1; //init 790

      !!re i/0/(tents)/1/-1;
        !!FU(WOG_73_Func_BuyMachinesInFactory)&790:P(x)/(y)/(z)/0/0/1/(heroId);
      !!en;
    !!en;

    !!if&(ballistas);
      !!IF:V790/1; //init 790

      !!re i/0/(ballistas)/1/-1;
        !!FU(WOG_73_Func_BuyMachinesInFactory)&790:P(x)/(y)/(z)/1/0/0/(heroId);
      !!en;
    !!en;

    !!if&(ammos);
      !!IF:V790/1; //init 790

      !!re i/0/(ammos)/1/-1;
        !!FU(WOG_73_Func_BuyMachinesInFactory)&790:P(x)/(y)/(z)/0/1/0/(heroId);
      !!en;
    !!en;

    !!OB(x)/(y)/(z):R;                                             [AI gets an enabled factory (player might have disabled it)]
  !!en;

!$OB(OBJ_WAR_MACHINE_FACTORY)&-(ERM_FLAG_IS_HUMAN)/v847=1;         [For AI only]
  !!HE-1:P?(x:y)/?(y:y)/?(z:y) N?(heroId:y) O?(owner:y);           [hero number in vi]
  !!PO(x)/(y)/(z):O(owner);                                            [update owner]
  !!VR(x):+1;
  !!PO(x)/(y)/(z):O(owner);
  !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(heroId);       [dismiss original war machines]


!?FU(WOG_73_Msg_BuyMachinesInFactory);
!#VA(x:x) (y:x) (z:x) (heroId:x); (townType:x);
!#VA(usedY[5]:y);

  !!FU(WOG_73_Func_GetMachinesAmountInFactory):P(x)/(y)/(z)/?(ballistas:y)/?(ammos:y)/?(tents:y)/?y5; [get available machines]

  !!VR(total:y):Sy5;
  !!if&(total)=0;
    !!IF:Mz173015;
    !!FU:E;
  !!en;

  !!VRy1:S(ammos) *750;
  !!VRy2:S(ballistas) *2500;

  !!VRy3:S(tents) *750;
  !!VRy4:Sy1 +y2 +y3;


  !!VR(title:z):Sz173102;
  !!FU(RadioDlg_Reset):P;
  !!FU(RadioDlg_SetTitle):P(title);
  !!FU(RadioDlg_AddItem)&(ballistas):P^%z173104 {%(ballistas)}^/(ART_BALLISTA);
  !!FU(RadioDlg_AddItem)&(ammos):P^%z173105 {%(ammos)}^/(ART_AMMO_CART);
  !!FU(RadioDlg_AddItem)&(tents):P^%z173103 {%(tents)}^/(ART_FIRST_AID_TENT);

  !!FU(RadioDlg_AddItem):P^%z173137^/1000;                       [buy all War Machines]

  !!FU(RadioDlg_AddCancelButton):P;
  !!FU(RadioDlg_SelectItemByValue):P1000;

  !!FU(RadioDlg_Show):Pd/?(machine:y);

  !!if&(machine)<>1000/(machine)<>(DLG_RESULT_CANCEL);
    !!VR(firstLine:z):S^^;
    !!VR(secondLine:z):S^^;

    !!if&(machine)=(ART_BALLISTA);
      !!VR(title):Sz173111;
      !!VR(firstLine):Sz173112;
      !!VR(secondLine)&(ballistas)>1:Sz173113;

    !!el&(machine)=(ART_AMMO_CART);
      !!VR(title):Sz173115;
      !!VR(firstLine):Sz173116;
      !!VR(secondLine)&(ammos)>1:Sz173117;
    !!el;
      !!VR(title):Sz173107;
      !!VR(firstLine):Sz173108;
      !!VR(secondLine)&(tents)>1:Sz173109;
    !!en;

    !!FU(RadioDlg_Reset):P;
    !!FU(RadioDlg_SetTitle):P(title);
    !!FU(RadioDlg_AddItem):P(firstLine)/1;
    !!FU(RadioDlg_AddItem)&(secondLine)<>^^:P(secondLine)/2;
    !!FU(RadioDlg_AddCancelButton):P;
    !!FU(RadioDlg_Show):Pd/?(amount:y);

    !!if&(amount)<>(DLG_RESULT_CANCEL);
      !!IF:V790/1; //init 790

      !!if&(machine)=(ART_BALLISTA);
        !!FU(WOG_73_Func_BuyMachinesInFactory):P(x)/(y)/(z)/(amount)/0/0/(heroId);
      !!el&(machine)=(ART_AMMO_CART);
        !!FU(WOG_73_Func_BuyMachinesInFactory):P(x)/(y)/(z)/0/(amount)/0/(heroId);
      !!el;
        !!FU(WOG_73_Func_BuyMachinesInFactory):P(x)/(y)/(z)/0/0/(amount)/(heroId);
      !!en;

      !!IF&-790:Mz173026;                                                         [if no money]

    !!en;

    !!FU(WOG_73_Func_GetMachinesAmountInFactory):P(x)/(y)/(z)/d/d/d/?(total:y); [get available machines]

    !!if&(total);
      !!FU(WOG_73_Msg_BuyMachinesInFactory):P(x)/(y)/(z)/(heroId); [call buy machines DLG again]
    !!en;

  !!el&(machine)=1000;
    !!IF:V790/1; //init 790
    !!FU(WOG_73_Func_BuyMachinesInFactory):P(x)/(y)/(z)/(ballistas)/(ammos)/(tents)/(heroId);

    !!if&-790;
      !!IF:Mz173026;                                                         [if no money]
      !!FU(WOG_73_Msg_BuyMachinesInFactory):P(x)/(y)/(z)/(heroId); [call buy machines DLG again]
    !!en;

  !!en;

!$OB(OBJ_TOWN)&-(ERM_FLAG_IS_HUMAN)/v847=1;                                            [AI buys war machine at town]

  !!HE-1:P?(x:y)/?(y:y)/?(z:y) N?(heroId:y);                                           [hero number in vi]
  !!HE(heroId):Z?(heroStruct:y);
  !!UN:C(heroStruct)/12/4/?(objType:y);                                                [check where the hero stands]

  !!if&(objType)=(OBJ_TOWN);
    !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(heroId);                         [dismiss original war machines]
    !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);                                 [correct w vars if needed]

    !!CA(x)/(y)/(z):B3/16 T?(townType:y) O?(townOwner:y);                              [look if blacksmith is built, get subtype and owner]
    !!HE(heroId):O?(heroOwner:y);                                                      [get the owner of hero]

    !!if&(heroOwner)=(townOwner);
      !!FU(WOG_73_Func_BuyMachinesInTown):P(heroId)/(x)/(y)/(z)/(FALSE)/(townType);    [AI buys machine if blacksmith is built]

      !!if&(townType)=(TOWN_STRONGHOLD);
        !!CA(x)/(y)/(z):B3/22;                                                         [look if ballista yard is built, get subtype and owner]
        !!FU(WOG_73_Func_BuyMachinesInTown)&1:P(heroId)/(x)/(y)/(z)/(TRUE)/(townType); [AI buys ballista if ballista yard is built]
      !!en;
    !!en;
  !!en;

!?FU(OnTownMouseClick)&v847=1/i^mouse_action^=(MOUSE_LMB_PRESSED)/999; [trigger for click inside town @daemon_n]

  !!CA-1:T?(townType:y);

  !!if&i^mouse_item^=22/(townType)=(TOWN_STRONGHOLD)|i^mouse_item^=16;
    !!CA-1:B3/10; //check if village hall is built
    !!FU&-1:E;

    !!CA-1:H0/?(garrisonHero:y) H1/?(visitingHero:y);

    !!if&(visitingHero)>=0;
      !!CM:R0;
      !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(visitingHero); //dismiss original war machines
      !!FU(WOG_73_Func_DismissOriginalBoughtMachines):P(garrisonHero); //dismiss original war machines
      !!HE(visitingHero):P?(x:y)/?(y:y)/?(z:y);

      !!if&i^mouse_item^=22; BallistaYard in TOWN_STRONGHOLD
        !!VR(isBallistaYard:y):S(TRUE);
      !!el;
        !!VR(isBallistaYard:y):S(FALSE); standard blacksmith 
      !!en;

      !!HE(visitingHero):O?(player:y);
      !!OW:R(player)/(RES_GOLD)/?(goldBefore:y);

      !!FU(WOG_73_Func_BuyMachinesInTown):P(visitingHero)/(x)/(y)/(z)/(isBallistaYard)/(townType); - recursion is inside;

      !!OW:R(player)/(RES_GOLD)/?(goldAfter:y);

      //refresh resource bar
      !!if&(goldBefore)>(goldAfter);
        !!SN:D;
      !!en;

    !!en;
  !!en;


------------------------------------------------------------------------
------------------------    F U N C T I O N S   ------------------------
------------------------------------------------------------------------

; Calls buying funtion for AI at every town if the town has a hero at the town (garrison or visitor)
!?FU(WOG_73_Func_ForceBuyMachinesInTownsForAI);
  !!re (player:y)/(PLAYER_FIRST)/(PLAYER_LAST);
    !!OW:I(player)/?(isAi:y) W(player)/?(towns:y);

    !!if&(isAi)/(towns);                                                                   [if AI]

      !!re (playerTown:y)/0/(towns)/1/-1;                                                  [loop all towns]
        !!OW:W(player)/(playerTown)/?(townId:y);                                           [get town ID]

        !!CA0/(townId):H0/?(garrisonHero:y) H1/?(visitingHero:y);                          [check for Heroes]

        !!if|(visitingHero)>(NO_HERO)/(garrisonHero)>(NO_HERO);                            [if there is someone]

          !!if&(visitingHero)>(NO_HERO);                                                   [priority for the visitor]
            !!VR(heroId:y):S(visitingHero);
          !!el;
            !!VR(heroId:y):S(garrisonHero);
          !!en;

          !!CA0/(townId):B3/22 T?(townType:y) P?(x:y)/?(y:y)/?(z:y);

          !!if&1/(townType)=(TOWN_STRONGHOLD);
            !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);                             [correct w vars if needed]
            !!FU(WOG_73_Func_BuyMachinesInTown)&1:P(heroId)/(x)/(y)/(z)/(TRUE)/(townType); [AI buys ballista if ballista yard is built]
          !!en;

          !!CA0/(townId):B3/16;                                                            [look if blacksmith is built]

          !!if&1;
            !!FU(WOG_73_Func_CorrectHeroVariablesW):P(heroId);                             [correct w vars if needed]
            !!FU(WOG_73_Func_BuyMachinesInTown):P(heroId)/(x)/(y)/(z)/(FALSE)/(townType);  [AI buys machine if blacksmith is built]
          !!en;

        !!en;
      !!en;
    !!en;
  !!en;

!?FU(WOG_73_Func_CheckIfHeroInTown);
!#VA(x:x) (y:x) (z:x) (townId:x);
  !!UN:U(OBJ_TOWN)/-1/?(towns:y);                                          [v1 v2 v3 coordinates of town]
  !!VR(townId):S-1;                     [assume we have no such town]

  !!re i/0/(towns)/1/-1;
    !!CA0/i:P?(townX:y)/?(townY:y)/?(townZ:y);
    
    !!if&(townX)=(x)/(townY)=(y)/(townZ)=(z);
      !!VR(townId):Si;
      !!FU:E;
    !!en;
  !!en;

!?FU(WOG_73_Func_DismissOriginalBoughtMachines);
!#VA(heroId:x);
  //dismisses war machines that could be bought originally in heroes3 and gives back gold spent on them
  //x1 hero number
  !!IF:W(heroId);                                            [use hero w variables]

  !!re i/0/2;                                                [(ART_BALLISTA)/(ART_FIRST_AID_TENT); iterate war machines]
    !!VR(art:y):Si +(ART_BALLISTA);
    !!HE(heroId):A3/(art)/d/?(equipped:y);                   [remove machine if necessary]
    !!VR(wVar:y):Si +81;

    !!if&(equipped)/w(wVar)=(FALSE);
      !!VR(artMonster:y):S(art) +142;
      !!MA:C(artMonster)/(RES_GOLD)/?(artCost:y);            [cause tent and ammo have same cost - change that line, if need to fix]
      !!HE(heroId):O?(owner:y);                              [remove machine if necessary]
      !!OW&(owner)>(NO_OWNER):R?(owner)/(RES_GOLD)/d(artCost);                  [give back gold spent on first aid tent]
    !!en;

  !!en;

!?FU(WOG_73_Func_CorrectHeroVariablesW);
!#VA(heroId:x);

  !!IF:W(heroId);                                            [use hero w variables]

  !!re i/0/2;                                                [(ART_BALLISTA)/(ART_FIRST_AID_TENT); iterate war machines]
    !!VR(wVar:y):Si +81;
    !!VR(art:y):Si +(ART_BALLISTA);
    !!VR(slot:y):Si +(ART_SLOT_BALLISTA);
    !!HE(heroId):A2/(art)/d/?(equipped:y);                   [y2: nr of equipped ballistas]
    !!VRw(wVar)&w(wVar)=(FALSE)/(equipped):S1;
    !!VRw(wVar)&w(wVar)/(equipped)=(FALSE):S0;
  !!en;

!?FU(WOG_73_Func_CorrectMachineEquipment);
!#VA(heroId:x);
  //corrects hero's war machine equipment according to hero's w vars

  !!IF:W(heroId);                                            [use hero w variables]

  !!re i/0/2;                                                [(ART_BALLISTA)/(ART_FIRST_AID_TENT); iterate war machines]
    !!VR(wVar:y):Si +81;
    !!VR(art:y):Si +(ART_BALLISTA);
    !!VR(slot:y):Si +(ART_SLOT_BALLISTA);
    !!HE(heroId):A2/(art)/d/?(equipped:y);                   [y2: nr of equipped ballistas]
    !!HE(heroId)&w(wVar):A1/(art)/(slot); [equip machine if necessary]
    !!HE(heroId)&w(wVar)=(FALSE)/(equipped):A3/(art)/1/1;    [remove machine if necessary]
  !!en;

!?FU(WOG_73_Func_BuyMachinesInTown);
!#VA(heroId:x) (x:x) (y:x) (z:x) (isBallistaYard:x) (townType:x);

  //asks for buying until player cancels
  //uses flag 2 for question
  //x1 hero number x2 x3 x4 position of object that stores number of available machines
  //x5:0 hero buys machine at blacksimth x5:1 hero buys ballista at ballista yard

  !!if&(isBallistaYard);
    !!PO(x)/(y)/(z):T?(wmAmount:y);                            [get number of T attribute in (wmAmount)  - if (isBallistaYard);]
  !!el;
    !!PO(x)/(y)/(z):H?(wmAmount:y);                            [get number of H attribute in (wmAmount)  - if common Blacksmith]
  !!en;

  !!IF:V2/1;                                                   [init flag 2]

  !!OW:C?(currentPlayer:y);
  !!CA(x)/(y)/(z):O?(townOwner:y);

  !!VR(displayMessage:y)&(ERM_FLAG_IS_HUMAN)/(currentPlayer)=(townOwner):S(TRUE);

  !!if&(wmAmount)=0;
    !!IF&(displayMessage):M1/z173015;
    !!IF:V2/0;                                                 [won't ask longer]
    !!FU:E;
  !!en;

  !!IF:W(heroId);                                              [use hero's w variables]

  !!if|(townType)=1/(townType)=4/(townType)=7;
    !!VR(art:y):S(ART_FIRST_AID_TENT);
  !!el|(townType)=0/(townType)=5/(townType)=8/(isBallistaYard);
    !!VR(art:y):S(ART_BALLISTA);
  !!el|(townType)=2/(townType)=3/(townType)=6;
    !!VR(art:y):S(ART_AMMO_CART);
  !!en;

  !!VR(artMonster:y):S(art) +142;
  !!MA:C(artMonster)/(RES_GOLD)/?(artCost:y);

  !!if&(displayMessage);
    !!SN:H^art^/(art)/0/?(artName:z);

    !!if&(isBallistaYard);
      !!VRz1:Sz173025;
    !!el;
      !!VRz1:Sz173016;
    !!en;


    !!VRz-1:S^%(artCost)^;
    !!VRz-1:Sz173014;  //  

    !!SN:H^art^/(art)/0/z-1;
    !!IF:Q2/(PIC_TYPE_ART)/(art)/(MSG_TYPE_QUESTION)/z1;
    !!SN:H^-art^/(art)/0/^^;
  !!en;

  !!if&2;
    !!HE(heroId):O?(player:y);
    !!OW:R(player)/(RES_GOLD)/?(gold:y); //get gold in y4

    !!if&(artCost)<=(gold);
      !!OW:R(player)/(RES_GOLD)/d-(artCost); //remove cost from gold pool

      !!if&(art)=(ART_BALLISTA);
        !!VRw81:+1;
      !!el&(art)=(ART_AMMO_CART);
        !!VRw82:+1;
      !!el;
        !!VRw83:+1;
      !!en;

      !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroId); //correct equipment

      !!if&(isBallistaYard);
        !!PO(x)/(y)/(z):Td-1; //set object H and T attribute to store updated value
      !!el;
        !!PO(x)/(y)/(z):Hd-1; //set object H and T attribute to store updated value
      !!en;

      !!VR(wmAmount):-1;

      !!if&(wmAmount)=0;
        !!IF&(displayMessage):M1/z173027;
        !!FU:E;
      !!en;

      !!FU(WOG_73_Func_BuyMachinesInTown):P(heroId)/(x)/(y)/(z)/(isBallistaYard)/(townType); //ask longer if clicked yes, had enough gold and there is something to buy or continue buying if AI could buy this machine
    
    !!el&(displayMessage);

      !!IF:M1/z173026;
    !!en;
  !!en;

!?FU(WOG_73_Func_RemoveEquippedMachines);
!#VA(heroId:x);
//removes equipped war machines
  !!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);
    !!HE(heroId):A2/i/d/?(equipped:y); //y2: nr of equipped first aid tents

    !!if&(equipped:y);
      !!HE(heroId):A3/i/1/1; //remove tent if present
    !!en;
  !!en;

!?FU(WOG_73_Func_TownsAndFactoriesFilling);
!#VA(objNumber:x) (objType:x);
  //sets the available number of machines at towns and war machine factory every week
  !!UN:U(objType)/-1/(objNumber)/2;                      [v1 v2 v3 coordinates]

  !!if&(objType)=(OBJ_TOWN);


    !!POv2/v3/v4&i^timerDay^=1:H0 T0;                  [init H and T attributes on first day]
    !!POv2/v3/v4:H?(hWarMacchinesNumber:y);            [get H values in towns]

    !!IF:V783/0;                                       [init flag 783]
    !!CAv2/v3/v4:B3/10;                                [check if village hall is built]
    !!IF&1:V783/1;                                     [save flag 1]

    !!CAv2/v3/v4:B3/16;                                [check if blacksmith is built]


    !!POv2/v3/v4|-1/-783:H1;                           [refresh H variable if blacksmith is not built]
    !!POv2/v3/v4&1/(hWarMacchinesNumber)<=148/783:Hd2; [add 2 war machines/week]

    !!OBv2/v3/v4:U?(townType:y);                       [get town subtype]
    !!if&(townType)=(TOWN_STRONGHOLD);
      !!CAv2/v3/v4:B3/22;                              [check if blallista yard is built]

      !!if&1/783;
        !!POv2/v3/v4:T?(tWarMachinesNumber:y);         [get T values in towns]
        !!POv2/v3/v4&(tWarMachinesNumber)<=148:Td2;    [add 2 war machines/week]
      !!el;
        !!POv2/v3/v4:T1;                               [refresh T variable if ballista yard is not built]
      !!en;

    !!en;

  !!el;
    //war machine factory
    !!re i/0/1;
      !!VRv2:+i;
      !!POv2/v3/v4:H42 O(NO_OWNER);                            [refresh H variable to 42 if war machine factory and set no owner]
    !!en;
  !!en;


!?FU(WOG_73_Func_GetMachinesAmountInFactory);
!#VA(x:x) (y:x) (z:x) (ballistas:x) (ammos:x) (tents:x) (total:x);
  !!PO(x)/(y)/(z):H?(hValue:y); //y1 is the machine number available

  !!if&(hValue);
    !!VRy2:S(hValue);         [42]
    !!VRy2::16;         [y2 number of ammo carts 42 :16 = 2]
    !!VR(ammos):Sy2;    [2]
    !!VRy3:Sy2;         [2]
    !!VRy3:*16;         [2*16 =32]
    !!VR(hValue):-y3;         [42 -32 = 10]
    !!VRy3:S(hValue);         [10]
    !!VRy3::4;          [y3 number of ballistas 10:4 = 2]
    !!VR(ballistas):Sy3;
    !!VRy4:Sy3;         [2]
    !!VRy4:*4;          [2*4 = 8]
    !!VR(hValue):-y4;         [10-8 = 2]
    *!VRy4:Sy1;         [y4 number of tents 2]
    !!VR(tents):S(hValue);

    !!VR(total):S(ballistas) +(tents) +(ammos);

  !!el;
    !!re i/(@ballistas)/(@total);
      !!VRxi:S0;
    !!en;
  !!en;

!?FU(WOG_73_Func_SetMachinesAmountInFactory);
!#VA(x:x) (y:x) (z:x) (ballistas:x) (ammos:x) (tents:x) (total:x);

  !!if&(total)=0;
    !!VR(machines:y):S0;
  !!el;
    !!VR(ammos):*16;
    !!VR(ballistas):*4;
    !!VR(machines:y):S(tents) +(ammos) +(ballistas);
  !!en;

  !!PO(x)/(y)/(z):H(machines); //y1 is the machine number available
  !!VR(x):+1;
  !!PO(x)/(y)/(z):H(machines); //y1 is the machine number available

!?FU(WOG_73_Func_BuyMachinesInFactory);
!#VA(x:x) (y:x) (z:x) (ballistas:x) (ammos:x) (tents:x) (heroId:x);
    //called when buying machines at war machine factory

  !!FU(WOG_73_Func_GetMachinesAmountInFactory):P(x)/(y)/(z)/?(currBallistas:y)/?(currAmmos:y)/?(currTents:y);/?y5; [get available machines]

  !!VR(totalCost:y):S0;

  !!if&(ballistas);
    !!MA:C(MON_BALLISTA)/(RES_GOLD)/?(cost:y);
    !!VR(cost):*(ballistas);
    !!VR(totalCost):+(cost);
    !!VR(currBallistas): -(ballistas);
  !!en;

  !!if&(ammos);
    !!MA:C(MON_AMMO_CART)/(RES_GOLD)/?(cost:y);
    !!VR(cost):*(ammos);
    !!VR(totalCost):+(cost);
    !!VR(currAmmos): -(ammos);
  !!en;

  !!if&(tents);
    !!MA:C(MON_FIRST_AID_TENT)/(RES_GOLD)/?(cost:y);                        [War machines cost 750 gold except for Ballista]
    !!VR(cost):*(tents);
    !!VR(totalCost):+(cost);
    !!VR(currTents): -(tents);
  !!en;

  !!HE(heroId):O?(owner:y);
  !!OW:R(owner)/(RES_GOLD)/?(gold:y);

  !!if&(gold)>=(totalCost);
    !!VR(total:y):S(currBallistas) +(currAmmos) +(currTents);
    !!FU(WOG_73_Func_SetMachinesAmountInFactory):P(x)/(y)/(z)/(currBallistas)/(currAmmos)/(currTents)/(total);/?y5; [get available machines]

    !!OW:R(owner)/(RES_GOLD)/d-(totalCost);
    !!IF:W(heroId);

    !!VRw81:+(ballistas);                                [modify hero's w vars]
    !!VRw82:+(ammos);
    !!VRw83:+(tents);
    !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroId); [correct equipment]

  !!el;
    !!IF:V790/0;                                         [not enough gold]
  !!en;


-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
---------------------  B A T T L E   P R O C E D U R E  ---------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------




---------------------     B E F O R E     B A T T L E   ---------------------

!?FU(OnBeforeBattleUniversal)&v847=1; //before battle begins
  ** variables used:        v847, v850-v859, v864-v880 for long term
  ** flags used:            784-785, 787-790 for long term
  ** hero variables used:   w81-w83
  !!IP:V847/883 F781/790 Wi^battle_hero_0^/81/83 Wi^battle_hero_1^/81/83;


!?FU(OnBeforeBattleUniversal)&v847=1; //before battle begins
F784 = battle is in town//
  !!IF:V784/0; //assume battle takes place not in town

  *!IF:V789/0; //assume the battle is not on a place of a castle

  !!if&i^battle_hero_1^>=(HERO_FIRST);

    !!OBi^battle_x^/i^battle_y^/i^battle_z^:T?(objType:y);

    !!if&(objType)=(OBJ_HERO);
      !!HEi^battle_hero_1^:Z?(heroStruct:y);
      !!UN:C(heroStruct)/12/4/?(objType);        [check where the hero stands]
    !!en;

    !!if&(objType)=(OBJ_TOWN);
      !!CAi^battle_x^/i^battle_y^/i^battle_z^:U?(townId:y);

      !!CA0/(townId):H0/?(garrisonHero:y) H1/?(visitingHero:y);

      !!if&i^battle_hero_1^=(visitingHero)/(garrisonHero)=(NO_HERO)|i^battle_hero_1^=(garrisonHero);
        !!CA0/(townId):B3/7;                                                                            [check if there is fort ]
        !!IF&1:V784/1;                                                                                  [battle in town - ballista cannot be used]
      !!en;
        
    !!en;

    !!FU(WOG_73_Func_DismissOriginalBoughtMachines):Pi^battle_hero_1^;
    !!FU(WOG_73_Func_CorrectHeroVariablesW):Pi^battle_hero_1^;

    !!HEi^battle_hero_1^:I?i^WOG_73_battle_hero_1_SpellPoints^/1; //get spell points of defender hero (if exists)
  !!en;


  !!FU(WOG_73_Func_DismissOriginalBoughtMachines)&-785:Pi^battle_hero_0^; //dismiss original war machines if hero doesn't fight for a war machine artifact

  !!FU(WOG_73_Func_CorrectHeroVariablesW)&-785:Pi^battle_hero_0^; //correct w vars if hero doesn't fight for a war machine artifact
  !!FU(WOG_73_Func_CorrectMachineEquipment)&785:Pi^battle_hero_0^; [correct equipment for attacker - we got away that at war machine's object trigger]

  !!IF:V790/1;                          [assume hero uses war machines on normal battlefield (i.e. cyclop stockpile, grotto etc. excluded) or on not normal but the hero doesn't have any equipped war machine]

!?FU(OnBeforeBattleUniversal)&i^Random_Hero_Active^/v847=1/i^battle_hero_1^>(NO_HERO); //army camp fight
  !!re i/0/2;
    !!VR(art:y):S(ART_BALLISTA) +i;
    !!VR(slot:y):S(ART_SLOT_BALLISTA) +i;
    !!HEi^battle_hero_1^:A1/(art)/(slot); [A1/4/13 A1/5/14; //equip war machines]
  !!en;


!?FU(OnBeforeBattleUniversal)&v847=1; //continue trigger unconditioned
  !!HEi^battle_hero_0^:I?i^WOG_73_battle_hero_0_SpellPoints^/1;                     [get spell points of attacker hero]
  !!HEi^battle_hero_1^&i^battle_hero_1^>=0:I?i^WOG_73_battle_hero_1_SpellPoints^/1; [get spell points of attacker hero]

*?FU(OnBattleReplay)&v847=1;
  *!HEi^battle_hero_0^:I?i^WOG_73_battle_hero_0_SpellPoints^/1;                      [get spell points of attacker hero]
  *!HEi^battle_hero_1^&i^battle_hero_1^>=0:I?i^WOG_73_battle_hero_1_SpellPoints^/1;  [get spell points of attacker hero]
*!IF:L^%i(WOG_73_battle_hero_0_SpellPoints)^;
-------------------------- B A T T L E F I E L D   S E T U P   --------------------------

*?BF&v847=1; //battle round trigger for placing war machines when battle begins
!?FU(OnSetupBattlefield)&v847=1;

  !!FU(WOG_73_BattleFieldSetup):P(BATTLE_LEFT);
  !!FU(WOG_73_BattleFieldSetup)&i^battle_hero_1^>(NO_HERO):P(BATTLE_RIGHT);


!?FU(WOG_73_BattleFieldSetup);

!#VA(side:x); (siege:x);
  !!VR(balPos:y):S16 *(side) +51;
  !!VR(ammoPos:y):S14 *(side) +18;
  !!VR(tentPos:y):S16 *(side) +153;


  !!VRv852:S0; //init v852
  !!VRv853:S0; //init v853
  !!VRv854:S0; //init v854
  !!VRv855:S0; //init v855

  *!VRs:S0; //init vs
  !!VR(hasNPC:y):S0;
  !!COi^battle_hero_%(side)^:E?(hasNPC);                     [look if commander is enabled]
  !!COi^battle_hero_%(side)^&(hasNPC):D?(isDead:y);          [look if commander is enabled]

  !!VR(npcBals:y):S0;
  !!VR(npcTents:y):S0;

  !!if&(isDead)=(FALSE);
    !!COi^battle_hero_%(side)^:X2/?(npcLvl:y) T?(npcType:y); [if enabled and alive get commander's level and its type]
    !!VR(npcTents)&(npcType)=1:S(npcLvl);                    [v852 number of added war machines (hierophant)]
    !!VR(npcBals)&(npcType)=6:S(npcLvl);                    [v853 number of added war machines (ogre leader)]
    !!VR(npcBals)&(npcType)=6::4 +1;                        [v853 number of added war machines (ogre leader - reduced)]
    *!VR(npcTents)&(npcType)=1::4 +1;                        [v852 number of added war machines (hierophant - reduced)]

  !!en;


    !!IF:Wi^battle_hero_%(side)^; //use attacker hero's w# variable

    !!if&(side)=(BATTLE_RIGHT)/i^Random_Hero_Active^;
      !!VR(totalHp:y):S0;

      !!re i/(BATTLE_DEFENDER_STACK_FIRST)/(BATTLE_DEFENDER_STACK_LAST);
        !!BMi:H?h N?n T?t;
        !!if&t<>(MON_BALLISTA)/t<>(MON_FIRST_AID_TENT)/t<>(MON_AMMO_CART)/t<>(MON_CATAPULT)/n>0;
          !!VRh:*n;
          !!VR(totalHp):+h;
        !!en;
      !!en;

      !!VR(totalHp): :10 :25 :3;
      !!VR(totalHp)&(totalHp)<1:S1;
    !!en;

    !!re i/(@balPos)/(@tentPos);

      !!VR(wVar:y):Si +80;

      !!BU:Eyi/?(wmStack:y);

      !!if&(wmStack)<>(NO_STACK);

        !!if&(side)=(BATTLE_RIGHT)/i^Random_Hero_Active^;
          !!BM(wmStack):Bd(totalHp) Nd(totalHp);
        !!el&w(wVar);
          !!VR(art:y):Si +3;                                                        [4/5/6]
          !!HEi^battle_hero_%(side)^:A2/(art)/d/?(nonScriptArt:y);                  [vp vq vr mchines in hero's equipment slot (0 or 1)]

          !!if&(art)=(ART_BALLISTA);
            !!VR(nonScriptArt):+(npcBals);
          !!en;

          !!if&(art)=(ART_FIRST_AID_TENT);
            !!VR(nonScriptArt):+(npcTents);
          !!en;


          !!BM(wmStack):N?(wmAmount:y);           [get number of monsters in stack]
          !!IF:V790/1;
          !!IF&(wmAmount)<>(nonScriptArt):V790/0; [not a normal battlefield and hero has equipped war machines]
          *!BM(wmStack):B?i N?f;

          !!if&790;
            !!BM(wmStack):Bdw(wVar) Bd-1  Ndw(wVar) Nd-1;

            !!VRi^WOG_73_Battle_MachinePlaced^:S(TRUE);
          !!en;

        !!en;
      !!en;
    !!en;

--------------------- B A T T L E      R O U N D   ---------------------
!?FU(OnBattleRound)&v847=1/i^battle_round^>0;
  //add spell points to hero, spell points equals number of ammo carts currently owned
  //spell points cannot be greater than the hero's maximum spell points (intelligence and artifacts are taken into count)
  //perhaps this part could be moved to a function

  !!HEi^battle_hero_0^:I?n/1;                                                           [get current spell points]
  !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_LEFT)/(MON_AMMO_CART)/?(number:y);
  !!VRn:+(number);                                                                      [add number of ammo carts to spell points]
  !!VRn&n>i^WOG_73_battle_hero_0_SpellPoints^:Si^WOG_73_battle_hero_0_SpellPoints^;     [if increased spell points would be greater than the maximum then set spell points to maximum]
  !!HEi^battle_hero_0^&(number)>0:In/1;                                                 [give hero spell points]

  !!if&i^battle_hero_1^>=0;
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_RIGHT)/(MON_AMMO_CART)/?(number:y);
    !!HEi^battle_hero_1^:I?n/1;                                                         [get current spell points]
    !!VRn:+(number);                                                                    [add number of ammo carts to spell points]
    !!VRn&n>i^WOG_73_battle_hero_1_SpellPoints^:Si^WOG_73_battle_hero_1_SpellPoints^;   [if increased spell points would be greater than the maximum than set spell points to maximum]
    !!HEi^battle_hero_1^&(number)>0:In/1;                                               [give hero spell points]
  !!en;

!?FU(WOG_73_BattleFunc_CountWarMachines);
!#VA(side:x) (machine:x) (number:x);
  !!VR(number):S0;
  !!VR(firstStack:y):S(side) *(BATTLE_STACKS_PER_SIDE);
  !!VR(lastStack:y):S(firstStack) +(BATTLE_STACKS_PER_SIDE) -1;

  !!re i/(firstStack)/(lastStack);
    !!BMi:T?(type:y);                   [F?f; H130; //y1 hp y2 lost y3 original number y4 actual number y5 monster side]
    !!if&(type)=(machine);
      !!BMi:N?(number);                 [F?f; H130; //y1 hp y2 lost y3 original number y4 actual number y5 monster side]
      !!FU:E;
    !!en;
  !!en;


-------------------------- B E F O R E   S T A C K    T U R N --------------------------
!?FU(OnBattleStackObtainsTurn)&v847=1;
!#VA(stackSide:x) (stackInd:x);

  !!BMi^battle_current_stack^:T?(monType:y);

  !!if&(monType)=(MON_FIRST_AID_TENT);
    !!if&i^battle_hero_%(stackSide)^>=0;
      !!HEi^battle_hero_%(stackSide)^:S(SKILL_FIRST_AID)/?(skillLvL:y) X?(heroSpec:y)/?(skillSpec:y); [store hero's first aid skill in v874]
      !!if&(heroSpec)=0/(skillSpec)=(SKILL_FIRST_AID);
        !!HEi^battle_hero_%(stackSide)^:Ed/?(heroLvl:y); //get hero level if he/she is specialist of first aid skill
        !!VR(specBonus:y):S(heroLvl) *2; //calculate increased heal value
      !!en;
    !!el;
      !!VR(specBonus:y):S(NULL);
      !!VR(skillLvL:y):S0;
    !!en;

    *!if&i^battle_human_%i(battle_current_side)^=(FALSE)|(skillLvL)>=(FALSE);
      !!FU(WOG_73_BattleFunc_CheckForDamagedStacks):P(stackSide)/?(damagedStacks:y)/?(damagedMachines:y);
      !!VRi^WOG_73_Battle_HealPower^:S0;
      !!FU&(damagedStacks)=(FALSE):E;

      !!BMi^battle_current_stack^:N?(tentsAmount:y); 

      !!re i/1/(tentsAmount);
        !!FU(WOG_73_BattleFunc_CalculateHealPower):P(skillLvL)/?(result:y);
        !!VRi^WOG_73_Battle_HealPower^:+(result) +(specBonus);
      !!en;

      !!if&(damagedStacks)=(damagedMachines);
        !!FU(WOG_73_BattleFunc_SetMonsterAttributeFromMachine):P(stackSide)/(TRUE);
      !!en;

      !!FU(WOG_73_BattleFunc_RemoveOneHP):P(stackSide)/(TRUE);

    *!en;
  !!en;
!?FU(OnBeforeBattleAction)&v847=1;

  !!BG:A?(actionType:y) N?y4;                [D?(healDest:y);]
*!IF:L^%y4^;
  !!BMy4:T?(monType:y);               [D?(healDest:y);]
  !!if&(actionType)=(BATTLE_ACTION_WALK_AND_ATTACK)/(monType)=(MON_FIRST_AID_TENT);
    !!BG:A(BATTLE_ACTION_CANCEL);
  !!en;
------------------------- A F T E R         A C T I O N --------------------- 
!?FU(OnBattleActionEnd)&v847=1/i^WOG_73_Battle_HealPower^;_%i(battle_acting_side)^;
  !!BG:A?(actionType:y); D?(healDest:y); N?i^WOG_73_Battle_ActingTentStack^; //get stack number attack type and destination

  !!if|(actionType)=(BATTLE_ACTION_TENT_HEAL)/(actionType)=(BATTLE_ACTION_DEFEND)/(actionType)=(BATTLE_ACTION_SURRENDER)/(actionType)=(BATTLE_ACTION_RETREAT)/(actionType)=(BATTLE_ACTION_WAIT);

    !!if&(actionType)=(BATTLE_ACTION_TENT_HEAL);
      !!BG:E?(healTarget:y); N?i^WOG_73_Battle_ActingTentStack^; //get stack number attack type and destination
      *!BU:E(healDest)/?(healTarget:y);                          [; //v875 is the stack that is healed]
      !!FU(WOG_73_BattleFunc_CalculateStackHealing):P(healTarget)/i^WOG_73_Battle_HealPower^/?(hpLost:y)/?(num:y);

      !!BM(healTarget):L(hpLost) N(num); //set stack to new - before anim, lost hp is 0, action will be: 0 hp removed
    !!en;

    !!FU(WOG_73_BattleFunc_RemoveOneHP):Pi^battle_acting_side^/(FALSE);
    !!FU(WOG_73_BattleFunc_SetMonsterAttributeFromMachine):Pi^battle_acting_side^/(FALSE);
    *!IF:M^%^;
    !!VRi^WOG_73_Battle_HealPower^:S0;    
  !!en;

  !!if&(actionType)=(BATTLE_ACTION_WALK_AND_ATTACK);
    !!BG:A(BATTLE_ACTION_CANCEL);
  !!en;

!?BG;
  !!BG:A?i^WOG_73_BattleLastAction^ Q?i^WOG_73_BattleLastSide^;

!?FU(OnAfterBattleAction);
  !!BU:C?(isBattleEnd:y);

  !!if&(isBattleEnd);
*!IF:M^%^;
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_LEFT)/(MON_BALLISTA)/?(number:y);
    !!VRi^WOG_73_battle_hero_0_0_machine^:S(number);
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_LEFT)/(MON_AMMO_CART)/?(number:y);
    !!VRi^WOG_73_battle_hero_0_1_machine^:S(number);
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_LEFT)/(MON_FIRST_AID_TENT)/?(number:y);
    !!VRi^WOG_73_battle_hero_0_2_machine^:S(number);

    !!FU|i^battle_hero_1^<0/i^Random_Hero_Active^:E;

    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_RIGHT)/(MON_BALLISTA)/?(number:y);
    !!VRi^WOG_73_battle_hero_1_0_machine^:S(number);
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_RIGHT)/(MON_AMMO_CART)/?(number:y);
    !!VRi^WOG_73_battle_hero_1_1_machine^:S(number);
    !!FU(WOG_73_BattleFunc_CountWarMachines):P(BATTLE_RIGHT)/(MON_FIRST_AID_TENT)/?(number:y);
    !!VRi^WOG_73_battle_hero_1_2_machine^:S(number);

  !!en;

------------------------ A F T E R           B A T T L E --------------------

!?FU(OnAfterBattleUniversal)&v847=1/i^WOG_73_Battle_MachinePlaced^=(TRUE);
  !!FU(WOG_73_BattleFunc_CorrectMachines):Pi^battle_hero_0^/(BATTLE_LEFT);
  !!FU(WOG_73_BattleFunc_CorrectMachines)&i^battle_hero_1^>=1:Pi^battle_hero_1^/(BATTLE_RIGHT);
  !!VRi^WOG_73_Battle_MachinePlaced^:S(FALSE);

!?FU(WOG_73_BattleFunc_CorrectMachines);
!#VA(heroId:x) (side:x);
  !!IF:W(heroId);

  !!HE(heroId):O?(heroOwner:y);
  *!IF:M^WOG_73_BattleLastAction %i(WOG_73_BattleLastAction)^;

  !!if&i^WOG_73_BattleLastAction^=(BATTLE_ACTION_SURRENDER)/i^WOG_73_BattleLastSide^=(side)|(heroOwner)<>(NO_OWNER);

    !!re i/0/2;
      !!VR(wVar:y):Si +81;
      !!VRw(wVar)&w(wVar)>i^WOG_73_battle_hero_%(side)_%i_machine^:Si^WOG_73_battle_hero_%(side)_%i_machine^;
    !!en;
    
  !!el;
    !!if&i^WOG_73_BattleLastAction^=(BATTLE_ACTION_RETREAT);

      !!re i/0/2;
        !!VR(wVar:y):Si +81;

        !!if&i^WOG_73_battle_hero_%(side)_%i_machine^/w(wVar);
          !!VRw(wVar):S1;
        !!el;
          !!VRw(wVar):S0;        
        !!en;

      !!en;  

    !!el;

      !!re i/0/2;
        !!VR(wVar:y):Si +81;
        !!VRw(wVar):S0;        
      !!en;
      
    !!en;

  !!en;

  !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroId);                                                      [correct eqipment]

!?FU(OnBattleMouseHint)&v847=1/i^mouse_battleHex^>=(BATTLE_HEX_FIRST)/i^mouse_battleHex^<=(BATTLE_HEX_LAST);
  !!BMi^battle_current_stack^:T?(monType:y);                                     [get type of monster]
  !!FU&(monType)<>(MON_FIRST_AID_TENT):E;
  *!BMi^battle_current_stack^:I?(side:y);                                        [get type of monster]
  !!OW:Cd/?(clickOwner:y);
  !!if&(clickOwner)=i^battle_owner_%i(battle_current_side)^;
    !!BU:Ei^mouse_battleHex^/?(stack:y);                                         [check if any stak here]
    !!FU&(stack)<0:E;

    !!FU(WOG_73_BattleFunc_HealWarMachines):P(stack)/i^battle_current_side^/?(allowAction:y)/?(stackPos:y);
    !!if&(allowAction);                                                          [if does fit]
      !!BU:Ei^mouse_battleHex^/?(stack:y);                                       [check mouse targer]
      !!BM(stack):F?f;
      !!VRf:&(MON_FLAG_WIDE);                                                    [check 2 hexes]
      !!VR(offset:y):S(stackPos);

        !!if&f;
          !!VR(offset)&i^battle_current_side^=(BATTLE_LEFT):S(stackPos) +1;                      [fix 2 hexes]
          !!VR(offset)&i^battle_current_side^=(BATTLE_RIGHT):S(stackPos) -1;
        !!en;
      !!UN|i^mouse_battleHex^=(stackPos)/i^mouse_battleHex^=(offset):R5/2/17;    [change cursor]
    !!en;
  !!en;

!?FU(OnBattleScreenMouseClick)&v847=1/i^mouse_action^=(MOUSE_LMB_PRESSED)/i^mouse_battleHex^>=(BATTLE_HEX_FIRST)/i^mouse_battleHex^<=(BATTLE_HEX_LAST);       [trigger for click on first aid tent, player can heal theFunc tent this way]
  !!BMi^battle_current_stack^:T?(monType:y);                                     [get type of monster]
  !!FU&(monType)<>(MON_FIRST_AID_TENT):E;

  !!BMi^battle_current_stack^:I?(side:y);                                        [get type of monster]
  !!BHi^battle_current_side^:N?(heroId:y);                                       [get hero number]
  !!HE(heroId)&(heroId)>=0:S(SKILL_FIRST_AID)/?(skillLvL:y);                     [store first aid skill in v874 of hero]
  !!OW:Cd/?(clickOwner:y);

  !!if&(skillLvL)/(clickOwner)=i^battle_owner_%i(battle_current_side)^;

    !!BU:Ei^mouse_battleHex^/?(stack:y);
    !!FU&(stack)<0:E;

    !!FU(WOG_73_BattleFunc_HealWarMachines):P(stack)/i^battle_current_side^/?(allowAction:y)/?(stackPos:y); [/?(offset:y);]

    !!if&(allowAction);
      !!CM:R0;
      !!BG:A(BATTLE_ACTION_TENT_HEAL) D(stackPos);                               [perform healing any War machine]
    !!en;
  !!en;

------------------------------------------------------------------------
------------------------    F U N C T I O N S   ------------------------
------------------------------------------------------------------------

!?FU(WOG_73_BattleFunc_SetMonsterAttributeFromMachine);
!#VA(side:x) (delete:x);
  //deletes monsters' machine attribute

  !!VR(firstStack:y):S(side) *(BATTLE_STACKS_PER_SIDE);
  !!VR(lastStack:y):S(firstStack) +(BATTLE_STACKS_PER_SIDE) -1;

  !!re i/(firstStack)/(lastStack);

    !!BMi:T?(monType:y);

    !!if&(monType)>=(MON_CATAPULT)/(monType)<=(MON_AMMO_CART);
      !!BMi:F?f F?(newFlags:y);
      !!VRf:&(MON_FLAG_SIEGE_WEAPON);

      !!if&(delete)=(FALSE)/f=(FALSE);
        !!VR(newFlags):+(MON_FLAG_SIEGE_WEAPON);
      !!en;

      !!if&(delete)/f;
        !!VR(newFlags):-(MON_FLAG_SIEGE_WEAPON);
      !!en;

      !!BMi:F(newFlags);
    !!en;
  !!en;

!?FU(WOG_73_BattleFunc_CheckForDamagedStacks);
!#VA(side:x) (damagedStack:x) (isMachine:x) (rndStack:x);

  !!VR(damagedStack):S0;                             [assume we have no damage stacks]
  !!VR(isMachine):S0;                             [assume we have no damage stacks]
  !!VR(firstStack:y):S(side) *(BATTLE_STACKS_PER_SIDE);
  !!VR(lastStack:y):S(firstStack) +(BATTLE_STACKS_PER_SIDE) -1;

  *!FU(NewIntArray):P?(damagedStacksArray:y);

  !!re i/(firstStack)/(lastStack);

    !!BMi:L?(hpLost:y) B?(startNum:y) N?(num:y) F?f; H130; //y1 hp y2 lost y3 original number y4 actual number y5 monster side
    !!if&(num);
      !!if&(startNum)>(num)|(hpLost);
        !!VR(damagedStack):+1;
        !!VRf:&(MON_FLAG_SIEGE_WEAPON);
        !!VR(isMachine)&f:+1;
        *!FU(Array_Push):P(damagedStacksArray)/i;
      !!en;
    !!en;
  !!en;

  !!FU:E;                              [@daemon_n will continue later]

  *!FU:A?(args:y);
  *!FU&(args)<(@rndStack):E;

  *!SN:M(damagedStacksArray)/?(size:y);
  *!if&(size);
    *!VR(size):-1;
    *!VR(randIndex:y):S0 R(size);
    *!SN:M(damagedStacksArray)/(randIndex)/?(rndStack);
  *!en;

!?FU(WOG_73_BattleFunc_RemoveOneHP);
!#VA(side:x) (remove:x);

  !!VR(firstStack:y):S(side) *(BATTLE_STACKS_PER_SIDE);
  !!VR(lastStack:y):S(firstStack) +(BATTLE_STACKS_PER_SIDE) -1;

  !!if&(remove);
    !!re i/(firstStack)/(lastStack);
      !!BMi:B?s N?n L?l P?p; F?f;
      !!BMi&s>n/l=0:Ld1;?l B?s N?n F?f;
    !!en;

  !!el;
    !!re i/(firstStack)/(lastStack);
      !!BMi:B?s N?n L?l P?p; F?f;
      !!BMi&s>n:Ld-1;?l B?s N?n F?f;
    !!en;
  !!en;

!?FU(WOG_73_BattleFunc_AI_ChangeStackHP);
!#VA(stack:x);
  !!BM(stack):Ld1;

**fixed bugs, balanced specialization[upd rennyo 26.05.2020]
!?FU(WOG_73_BattleFunc_CalculateHealPower);
!#VA(skillLvL:x) (heal:x); 
  //calculates random heal value 
  !!VR(maxHeal:y):S25 *(skillLvL) +25; [y1+1 max limit for random heal]
  !!VR(heal):S1 R(maxHeal);          [y2 1-25/1-50/1-75/1-100 random]


!?FU(WOG_73_BattleFunc_CalculateStackHealing);
!#VA(stack:x) (healPower:x) (hpLost:x) (num:x);
  !!BM(stack):H?(maxHp:y) L?(hpLost) B?(startNum:y) N?(num);

  !!if&(startNum)>(num);

    !!if&(healPower)>(hpLost);

      !!VR(qtyToResurrect:y):S(healPower) +(maxHp) -(hpLost) :(maxHp); -1;
      !!VR(hpLost):S(healPower) +(maxHp) %(maxHp);
      !!if&(qtyToResurrect);
        !!VR(num):+(qtyToResurrect);
        !!VR(num)&(num)>(startNum):S(startNum);
      !!en;
    !!el;
      !!VR(hpLost):-(healPower);
    !!en;

  !!el;
  
    !!VR(hpLost):-(healPower);
    !!VR(hpLost)&(hpLost)<0:S0;
  !!en;

!?FU(WOG_73_BattleFunc_HealWarMachines);
!#VA(stack:x) (tentSide:x) (allowAction:x) (stackPos:x);
  
  !!VR(allowAction):S(FALSE);                                                    [default is retrict]
  !!BM(stack):I?(side:y);
  !!FU&(side)<>(tentSide):E;                                                   [exit if wrong side]

  !!BM(stack):L?l B?(startNum:y) N?(num:y) P?(stackPos);                            

  !!if&l|(startNum)>(num);
    !!VR(allowAction):S(TRUE);
  !!en;
  


--------------- T R I G G E R S  F O R  H E R O  M E E T I N G --------------

!?FU(OnHeroesMeetScreenMouseClick)&v847=1;                                                [transfer and RMB window]
  
  !!if&i^mouse_item^>=40/i^mouse_item^<=42|i^mouse_item^=59/i^mouse_item^=60/i^mouse_item^=61;
    
    !!CM:R0;                                                                                                                     [dismiss mouse action]
    !!if&i^mouse_action^=(MOUSE_LMB_PRESSED);
      !!HEi^mouse_hero_1^:O?(rightOwner:y);                                                                                      [get the owner]
      !!HEi^mouse_hero_0^:O?(leftOwner:y);                                                                                       [get the owner]
      !!OW:C(currentPlayer:y)/?(clickOwner:y)  I(rightOwner)/?(rightIsAi:y)  I(leftOwner)/?(leftIsAi:y);

      !!FU&(leftOwner)<>(rightOwner)/(rightIsAi)=(leftIsAi):E;                                                                   [disable in MP]

      !!if&i^mouse_item^>=40/i^mouse_item^<=42;
        !!OW:Cd/?(clickOwner:y);
        !!HEi^mouse_hero_0^:O?(leftOwner:y);                                                                                     [get the owner]
        !!VR(warMachine:y):Si^mouse_item^ - 39;
        !!FU(WOG_73_Msg_TransferMachinesInMeetingScreen)&(clickOwner)=(leftOwner):Pi^mouse_hero_0^/i^mouse_hero_1^/(warMachine)/i^mouse_flags^; [war machine transfer between heroes]
        !!IP:D(rightOwner) Wi^mouse_hero_0^/81/83 Wi^mouse_hero_1^/81/83;
      !!el;
        !!OW:Cd/?(clickOwner:y);
        !!HEi^mouse_hero_1^:O?(rightOwner:y);                                                                                    [get the owner]
        !!VR(warMachine:y):Si^mouse_item^ - 58;
        !!FU(WOG_73_Msg_TransferMachinesInMeetingScreen)&(clickOwner)=(rightOwner):Pi^mouse_hero_1^/i^mouse_hero_0^/(warMachine)/i^mouse_flags^;
        !!IP:D(leftOwner) Wi^mouse_hero_0^/81/83 Wi^mouse_hero_1^/81/83;
      !!en;
    !!en;

    !!if&i^mouse_action^=(MOUSE_RMB_PRESSED);                                                                                    [right clicking popup msg]

      !!if&i^mouse_item^>=40/i^mouse_item^<=42;
        !!IF:Wi^mouse_hero_0^;                                                                                                   [use hero's w# variables]
        !!HEi^mouse_hero_0^:B0/?z1;                                                                     [get hero name]
        !!VR(art:y):Si^mouse_item^ - 36;
      !!el;
        !!VR(art:y):Si^mouse_item^ - 55;
        !!IF:Wi^mouse_hero_1^;                                                                          [use hero's w# variables]
        !!HEi^mouse_hero_1^:B0/?z1;                                                                     [get hero name]
      !!en;

      !!VRz2&(art)=(ART_BALLISTA):S^{%W81}^;
      !!VRz3&(art)=(ART_BALLISTA)/w81<=1:Sz173124;
      !!VRz3&(art)=(ART_BALLISTA)/w81>1:Sz173125;

      !!VRz2&(art)=(ART_AMMO_CART):S^{%W82}^;
      !!VRz3&(art)=(ART_AMMO_CART)/w82<=1:Sz173126;
      !!VRz3&(art)=(ART_AMMO_CART)/w82>1:Sz173127;

      !!VRz2&(art)=(ART_FIRST_AID_TENT):S^{%W83}^;
      !!VRz3&(art)=(ART_FIRST_AID_TENT)/w83<=1:Sz173128;
      !!VRz3&(art)=(ART_FIRST_AID_TENT)/w83>1:Sz173129;

      !!IF:Q1/(PIC_TYPE_ART)/(art)/(MSG_TYPE_POPUP)/z173130;
    !!en;   

  !!en;

!?FU(WOG_73_Msg_TransferMachinesInMeetingScreen);
!#VA(sender:x) (receiver:x) (warMachine:x) (flags:x);
!#VA(usedY[2]:y);
  //called when two hero of the same color meets - only for player
  //set dlg title



  //get hero's w var
  !!IF:W(sender);
  !!VR(wVar:y):S(warMachine) +80;

  !!VR(wmAmount:y):Sw(wVar);

  !!FU&(wmAmount)=0:E;

  !!if&(flags)=(NO_MOUSE_FLAGS);
    !!VRz1&(warMachine)=1:Sz173029;
    !!VRz1&(warMachine)=2:Sz173030;
    !!VRz1&(warMachine)=3:Sz173028;
    //set machine name

    !!VRz-1&(warMachine)=1:Sz173035;
    !!VRz-1&(warMachine)=2:Sz173036;
    !!VRz-1&(warMachine)=3:Sz173034;

    !!FU(RadioDlg_Reset):P;
    !!FU(RadioDlg_SetTitle):Pz1;

    !!re i/1/(wmAmount);
      !!br&i=11;
      !!VRy2:Si;                                             [original y2 variable from ert file]
      !!FU(RadioDlg_AddItem):P^%z173037^/i;
    !!en;

    !!FU(RadioDlg_AddItem)&(wmAmount)>1:Pz173038/(wmAmount);
    !!FU(RadioDlg_AddCancelButton):P;

    !!FU(RadioDlg_SelectItemByValue):P(DLG_RESULT_CANCEL);
    !!FU(RadioDlg_Show):Pd/?(value:y);

    !!if&(value)<>(DLG_RESULT_CANCEL);
      !!FU(WOG_73_Func_TransferMachinesInMeetingScreen):P(sender)/(receiver)/(wVar)/(value);
    !!en;

  !!el&(flags)=(MOUSE_FLAG_SHIFT);
    !!FU(WOG_73_Func_TransferMachinesInMeetingScreen):P(sender)/(receiver)/(wVar)/1;
  !!el&(flags)=(MOUSE_FLAG_ALT);
    !!FU(WOG_73_Func_TransferMachinesInMeetingScreen):P(sender)/(receiver)/(wVar)/(wmAmount);
  !!en;

!?FU(WOG_73_Func_TransferMachinesInMeetingScreen);
!#VA(sender:x) (receiver:x) (wVar:x) (value:x);
  !!IF:W(sender);
  !!VRw(wVar):-(value);

  !!IF:W(receiver);
  !!VRw(wVar):+(value);

  !!FU(WOG_73_Func_CorrectMachineEquipment):P(sender);   [correct eqippment]
  !!FU(WOG_73_Func_CorrectMachineEquipment):P(receiver); [correct eqippment]

  !!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);
    !!HEi^swap_hero_0^:A2/i/d/?i^WM_Machine_%i_Hero_0^;
    !!HEi^swap_hero_1^:A2/i/d/?i^WM_Machine_%i_Hero_1^;
  !!en;


!?FU(WOG_73_Func_AI_TransferMachinesWhenHeroMeeting);
!#VA(heroLeft:x) (heroRight:x);
    //called when two hero of the same color meet - only for AI
  !!VR(leftArmy:y):S0;
  !!VR(rightArmy:y):S0;

  !!re i/0/(ARMY_SLOT_LAST);
    !!HE(heroLeft):C0/i/d/?(amount:y);
    !!VR(leftArmy):+(amount);

    !!HE(heroRight):C0/i/d/?(amount:y);
    !!VR(rightArmy):+(amount);
  !!en;

  !!if&(leftArmy)>(rightArmy);
    !!VR(sender:y):S(heroRight);
    !!VR(receiver:y):S(heroLeft);
  !!el;
    !!VR(sender:y):S(heroLeft);
    !!VR(receiver:y):S(heroRight);
  !!en;

  !!re i/81/83;
    !!IF:W(sender);
    !!VR(wmAmount:y):Swi;
    !!VRwi:S0;
    !!IF:W(receiver);
    !!VRwi:+(wmAmount);
  !!en;

  !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroLeft);                                                 [correct equipment]
  !!FU(WOG_73_Func_CorrectMachineEquipment):P(heroRight);                                                [correct equipment]

; Trigger for human players
!?FU(WOG_OnBeforeHeroSwap)&v847/(ERM_FLAG_IS_HUMAN);
  !!FU(WOG_73_Func_DismissOriginalBoughtMachines):Pi^swap_hero_0^;                                       [dismiss original war machines]
  !!FU(WOG_73_Func_DismissOriginalBoughtMachines):Pi^swap_hero_1^;                                       [dismiss original war machines]
  !!FU(WOG_73_Func_CorrectMachineEquipment):Pi^swap_hero_0^;                                             [correct equipment, needed if we transferred machines by hand on meeting screen, added machine to allied hero or AI transfered it to an allied hero]
  !!FU(WOG_73_Func_CorrectMachineEquipment):Pi^swap_hero_1^;                                             [correct equipment, needed if we transferred machines by hand on meeting screen, added machine to allied hero or AI transfered it to an allied hero]

; for AI players
!?FU(OnBeforeHeroInteraction)&v847/-(ERM_FLAG_IS_HUMAN);
!#VA(heroLeft:x) (heroRight:x);
  !!HE(heroLeft):O?(leftOwner:y);                                                                        [get the owner]
  !!HE(heroRight):O?(rightOwner:y);                                                                      [get the owner]
  !!FU(WOG_73_Func_AI_TransferMachinesWhenHeroMeeting)&(leftOwner)=(rightOwner):P(heroLeft)/(heroRight); [transfer AI]