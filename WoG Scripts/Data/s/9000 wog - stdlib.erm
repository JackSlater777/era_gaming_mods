ZVSE2
; MAIN WOG Script


!#VRi^WOG_RandomSeedValue^:R0/11/99;

!?FU(OnAfterErmInstructions);   
!!FU(WOG_StartGame):P0;

!?FU(OnAfterLoadGame);
!!FU(WOG_StartGame):P1;

; UNIVERSAL TIMER INIT
; (every color every day)
!#TM1:S1/999/1/255;     
!#TM2:S1/999/1/255;

; **************************************************************************************************
; CREATE WOG HOOKS (need plugin: erm_hooker.era)
!?FU(WOG_StartGame);
!!SN:F^GetModuleHandleA^/^HD_WOG.dll^;

!!if&v1<>(FALSE);
  !!VRi^WOG_IsHdMod^:S(TRUE);
!!el;
  !!VRi^WOG_IsHdMod^:S(FALSE);
!!en;

!!SN:L^erm_hooker.era^/?(hooker:y);
!!FU&(hooker)=0:E;

!!SN:A(hooker)/^SetHook^/?(hookingFuncAddress:y);
!!FU(WOG_CreateERMHook):P(hookingFuncAddress);

!?FU(WOG_CreateERMHook);
!#VA(address:x);

!!SN:E(address)/1/5013149/(WOG_OnNewDay);                      [trigger on start every day]
!!SN:E(address)/1/5014608/(WOG_OnNewWeek);                     [trigger on start every week]
!!SN:E(address)/1/5016587/(WOG_OnNewMonth);                    [trigger on start every month]
!!SN:E(address)/1/7710213/(WOG_PreBeforeBattle);               [use only in exceptional cases]
!!SN:E(address)/1/5008601/(WOG_EndOfTurn);                     [trigger on every player end of turn]

!!SN:E(address)/1/5968384/(WOG_OnUpdateHeroInteractionScreen); [trigger WHILE hero meeting screen]
!!SN:E(address)/1/5942672/(WOG_OnBeforeHeroSwap);              [trigger AFTER OnBeforeHeroInteraction but BEFORE Dlg show (works in town screen)]
!!SN:E(address)/1/4893738/(WOG_OnAfterHeroSwap);               [trigger AFTER Dlg Closed but BEFORE OnAfterHeroInteraction(works in town screen)]
!!SN:E(address)/1/4893738/(WOG_OnAfterHeroSwap);               [trigger AFTER Dlg Closed but BEFORE OnAfterHeroInteraction(works in town screen)]
!!SN:E(address)/1/4526215/(WOG_OnChangeWindowByResources);     [trigger WHEN counts what pic to display in status window for pickuped resource]

; **************************************************************************************************
; Get the real type and subtype of a map object
!?FU(WOG_MapItem_GetRealTypeAndSubtype); 
; Получение реального типа и подтипа объекта на карте (например, под героем)
!#VA(x:x) (y:x) (z:x) (type:x) (subtype:x);
; получаем MapItem
!!UN:C6918840/(UNC_UINT32)/?(advMgr:y); 
!!UN:C(advMgr)/92/(UNC_UINT32)/?(gameMap:y); 
!!SN:E4228816/(CALLCONV_THISCALL)/(gameMap)/(x)/(y)/(z); 
!!VR(mapItem:y):Sv1;
; получить подтип объекта
!!UN:C(mapItem)/34/(UNC_INT16)/?(subtype);
; получить правильный тип объекта
!!SN:E5231136/(CALLCONV_THISCALL)/(mapItem);
!!VR(type):Sv1;
!!UN&(type)=(NULL):C(mapItem)/30/(UNC_INT16)/?(type);

; CHECK RANDOM MAP
!?FU(WOG_CheckRandomMap);
!#VA(result:x);

!!VR(result):S(FALSE);
!!UN:C6919480/4/?(value:y);
!!VR(address:y):S(value) +128980;
!!UN:C(address)/1/?(value2:y);              [(value2)=114 -> random map]
!!VR(result)&(value2)=114:S(TRUE);

; Get random seed by coordinates
!?FU(WOG_GetRandomSeedByCoord);
!#VA(x:x) (y:x) (z:x) (seed:x);

!!VR(x)|(x)<1/(x)>255:S255;
!!VR(y)|(y)<1/(y)>255:S255;
!!VR(z)&(z)<1:Si^WOG_RandomSeedValue^;

!!VR(seed):Si^WOG_RandomSeedValue^ *255 *(x) *255 *(y) +(z); +v99
; **************************************************************************************************
; HD MOD WAR MACHINES SWAP FIX
!?FU(WOG_OnBeforeHeroSwap)&1000;
  !!FU&v591<1/v847<1:E;                            [v591 is WM 1, v847 is WM 3]
  !!SN:F^GetModuleHandleA^/^HD_WOG.dll^;

  !!FU&v1<1:E;

  !!UN:C6962576/(UNC_INT32)/?(heroSwapStructure:y);

  !!UN:C(heroSwapStructure)/64/(UNC_INT32)/?(leftHeroStructure:y);
  !!UN:C(heroSwapStructure)/68/(UNC_INT32)/?(rightHeroStructure:y);

  !!UN:C(leftHeroStructure)/26/(UNC_INT32)/?i^swap_hero_0^;
  !!UN:C(rightHeroStructure)/26/(UNC_INT32)/?i^swap_hero_1^;

  !!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);
    !!HEi^swap_hero_0^:A2/i/d/?i^WM_Machine_%i_Hero_0^;
    !!HEi^swap_hero_1^:A2/i/d/?i^WM_Machine_%i_Hero_1^;
  !!en;
  !!VRi^WM_Machine_Before_Art_Swap^:S(TRUE);

!?FU(OnUnequipArt)|i^swap_hero_0^/i^swap_hero_1^;
  !!if&v998>=(ART_BALLISTA)/v998<=(ART_FIRST_AID_TENT)/i^WM_Machine_Before_Art_Swap^;
    !!VRi^WM_Machine_Before_Art_Swap^:S(FALSE);
  !!en;


!?FU(WOG_OnUpdateHeroInteractionScreen)&i^WM_Machine_Before_Art_Swap^=(FALSE);
  !!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);

    !!VR(artUnequip:y):Si *-1;
    !!if&i^WM_Machine_%i_Hero_0^>i^WM_Machine_%i_Hero_1^;
      !!HEi^swap_hero_0^:A4/i;
      !!HEi^swap_hero_1^:A(artUnequip);
    !!el&i^WM_Machine_%i_Hero_1^>i^WM_Machine_%i_Hero_0^;
      !!HEi^swap_hero_0^:A(artUnequip);
      !!HEi^swap_hero_1^:A4/i;
    !!en;
    !!VRi^WM_Machine_Before_Art_Swap^:S(TRUE);

  !!en;

!?FU(WOG_OnAfterHeroSwap)&1000;
  !!re i/(ART_BALLISTA)/(ART_FIRST_AID_TENT);
    !!VRi^WM_Machine_%i_Hero_0^:S(FALSE);
    !!VRi^WM_Machine_%i_Hero_1^:S(FALSE);
  !!en;

  !!VRi^swap_hero_0^:S(FALSE);
  !!VRi^swap_hero_1^:S(FALSE);
  !!VRi^WM_Machine_Before_Art_Swap^:S(FALSE);

; **************************************************************************************************
; SKILL CLICK FUNCTION (get number of clicked skill in hero screen)
!?FU(WOG_GetSkillInfoByClick);                            
!#VA(itemId:x) (heroId:x) (skill:x) (skillArea:x) (skillSlot:x);
!!re i/(@skill)/(@skillArea);
  !!VRxi:S-1;
!!en;
!!if&(itemId);
  !!SN:L^10SSkills.dll^/?(isPlugin:y);
  !!VR(skilZone:y):S(FALSE);

  !!if&(isPlugin);
    !!VR(skilZone)&(itemId)>500/(itemId)<508:S2;
  !!en;
  !!VR(skilZone)&(itemId)>78/(itemId)<103:S1;

  !!FU&(skilZone)=(FALSE):E;           [exit if not clicked on SS skill area]

  !!if&(skilZone)=1;
    !!VR(skillArea):S(itemId) -79 :8 +1;
    !!VR(skillSlot):S(skillArea)*8 +(itemId) -79 %8 +1; 

  !!el;
    !!VR(skillSlot):S(itemId) -501 :3 +9;
    !!VR(skillArea):S(itemId) -501 %3 +1;
  !!en;

  !!HE(heroId):S(skillSlot)/?(skill)/1;
!!en;

; **************************************************************************************************
; Get strings from text resources
; Note: The following functions have duplicates. Ideally only one should be kept
!?FU(WOG_GetColorOwnerString);
!#VA(owner:x) (string:x);

!!VR(line:y):S(owner) +23;

!!FU(WOG_ReadTxtString):P6971564/(line);
!!VR(string):Z^%z1^;

!?FU(WOG_GetResourceName);
!#VA(resType:x) (string:x);

!!FU(WOG_ReadTxtString):P6968208/(resType);
!!VR(string):Z^%z1^;

!?FU(WOG_GetMineName);
!#VA(mineType:x) (string:x);

!!FU(WOG_ReadTxtString):P6968376/(mineType);
!!VR(string):Z^%z1^;

!?FU(WOG_GetGeneralText);
!#VA(index:x) (string:x);

!!FU(WOG_ReadTxtString):P6970820/(index);
!!VR(string):Z^%z1^;

!?FU(WOG_ReadTxtString);; @Master Of Puppets
!#VA(txtLoadAddres:x) (stringNum:x);

  !!UN:C(txtLoadAddres)/4/?y1;            
  !!VRy1:+32;
  !!UN:Cy1/4/?y2;
  !!VR(stringNum):*4+y2;
  !!UN:C(stringNum)/4/?y1;
  !!SN:X?y4 Xy1 X?z1 Xy4;


; Get strings from text resources
!?FU(WOG_GetStringByFilename);
!#VA(txtFilename:x);                    [filename of the text]
!#VA(lineIndex:x);                      [number of line of the string, starts from 0]
!#VA(string:x);                         [returned string]

; Standarize the filename
!!FU(StrToLower):Pz(txtFilename)/?(text:z);
; Remove filename extension (if applicable)
!!SN:K(text)/?(size:y);
!!VR(index:y):S(size) -4;
!!SN:K(text)/(index)/?(character:z);
!!FU(Substr)&(character)=^.^:P(text)/0/-4/?(text);

!!if&(text)=^artevent^;
  !!VR(address:y):S6909120;             [artifact events]
!!el&(text)=^crgen1^;
  !!VR(address):S6886304;               [creature generator 1]
!!el&(text)=^crgen4^;
  !!VR(address):S6887052;               [creature generator 4]
!!el&(text)=^dwelling^;
  !!VR(address):S6972144;               [dwelling]
!!el&(text)=^minename^;
  !!VR(address):S6968376;               [mine names]
!!el&(text)=^objnames^;
  !!VR(address):S6974640;               [object names]
!!el&(text)=^plcolors^;
  !!VR(address):S6976900;               [player colour]
!!el&(text)=^priskill^;
  !!VR(address):S6974556;               [primary skills]
!!el&(text)=^restypes^;
  !!VR(address):S6968208;               [resources]
!!el&(text)=^skilllev^;
  !!VR(address):S6979432;               [secondary skill levels]
!!el;
  !!VR(string):Z^Wrong txt filename!^;
  !!FU:E;
!!en;

; @Master Of Puppets
!!UN:C(address)/(UNC_INT)/?(value:y);            
!!VR(address2:y):S(value) +32;
!!UN:C(address2)/(UNC_INT)/?(value3:y);
!!VR(address3:y):S(lineIndex) *4 +(value3);
!!UN:C(address3)/(UNC_INT)/?(value4:y);
!!SN:X?(value5:y) X(value4) X?z1 X(value5);
!!VR(string):Z^%z1^;

; **************************************************************************************************
; Set up IF:N dialogue with array
!?FU(WOG_SetupMultiPicDlg);              [by Berserker]
!#VA(argsArr:x); SN:M array ID with picture type and subtype pairs.

!!SN:M(argsArr)/?(numArgs:y);
!!VR(numArgPairs:y):S(numArgs) :2;
!!VR(numArgPairs)&(numArgPairs)>8:S8;

!#VA(params[16]:y);

!!re i/0/(params[SIZE])/1/-1;
  !!VR(params[i]):S(NO_PIC_TYPE);
!!en;

!!VR(paramPtr:y):S(@params);
!!VR(argInd:y):S0;

!!re i/0/(numArgPairs)/1/-1;
  !!SN:V(argsArr)/(argInd)/?(picType:y)/?(picValue:y);

  !!if&(picType)<>(NO_PIC_TYPE);

    !!if|(picType)<>(PIC_TYPE_MONSTER)/(picValue)>=(MON_FIRST);
      !!VRy(paramPtr):S(picType);
      !!VR(paramPtr):+1;
      !!VRy(paramPtr):S(picValue);
      !!VR(paramPtr):+1;
    !!en;
  !!en;

  !!VR(argInd):+2;
!!en;

!!IF:N(params[0])/(params[1])/(params[2])/(params[3])/(params[4])/(params[5])/(params[6])/(params[7])/
      (params[8])/(params[9])/(params[10])/(params[11])/(params[12])/(params[13])/(params[14])/(params[15]);
