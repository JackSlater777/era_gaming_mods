ZVSE2

** CASTLE UPGRADING
** УЛУЧШЕНИЯ ЗАМКОВ

** Option 045 by Alexis Koz
** Rewritten by igrik (28.02.2021)
** Rebalanced costs and improved interaction by Archer30

* City Halls and Capitols  may be upgraded to increase daily income. 
* Upgraded  town dwellings may be upgraded to increase troop growth.

* To upgrade the City Hall or Capitol, left-click the Hall icon 
* (just below the town name) in the town screen. 
* Each Hall upgrade costs 5000 gold and 5 pieces of each resource and increases daily income by 1000 gold.

* To increase growth in upgraded creature dwellings, left-click the town picture 
* (to the left of the town name). Each upgrade increases growth by one. 
* Each troop growth is worth 5 wood and ore, and the 5x cost of price all given creatures.

* Computer players have a daily chance to build a building for free:
*      5% - build a gold reserve
*     10% - build a upgrade dwelling

; ============= CONSTANTS ==========================================================================

!#DC(WOG_OPT_CASTLE_UPGRADING) = 045;

!#DC(ITEMID_TOWN_TOWNPIC)      = 150;
!#DC(ITEMID_TOWN_HALLPIC)      = 158;

!#DC(WOG_45_MINCOST)            = 5;
!#DC(WOG_45_GOLDBONUS)       = 1000;

!#DC(WOG_45_TOWNSCOUNT)        = 48;
!#DC(WOG_45_ITEMCOUNT)         = 10;

!#DC(PTR_RESOURCE_DEF)     = 6865956;

; ==================================================================================================

; Store the upgraded monsters in the global variables for calculating the costs of upgrading dwellings later
; This is necessary for compatiblity with mods modifying UN:T values
; Must be executed earlier than any temparory UN:T modification
!?FU(OnPreTownScreen)&999;
!!re (monLvl:y)/0/6;
  !!CA(CURRENT_TOWN):T?(townType:y);
  !!UN:T(townType)/(monLvl)/1/?i^wog_45_upgMonLvl%(monLvl)^;
!!en;

; Release variables
!?FU(OnCloseTownScreen)&999;
!!re (monLvl:y)/0/6;
  !!VRi^wog_45_upgMonLvl%(monLvl)^:S0;
!!en;

; Function to get the special resource requirement of a town
!?FU(WOG_45_GetTownSpecialResource);
!#VA(townType:x) (specResId:x);

!!VR(specResId):S(NULL);
!!UN:P36/?(mithrilEnhancement:y);

!!if&(mithrilEnhancement);
  !!VR(specResId):S(RES_MITHRIL);
!!el;
  !!FU(WOG_Town_GetCreatureID):P(townType)/6/1/?(monID:y);
  !!FU(WOG_Creature_GetCost):P(monID)/(NULL)/?(mercury:y)/(NULL)/?(sulfur:y)/?(crystal:y)/?(gems:y)/(NULL);

  !!if&(mercury)>(NULL);
    !!VR(specResId):S(RES_MERCURY);
  !!el&(sulfur)>(NULL);
    !!VR(specResId):S(RES_SULFUR);
  !!el&(crystal)>(NULL);
    !!VR(specResId):S(RES_CRYSTAL);
  !!el&(gems)>(NULL);
    !!VR(specResId):S(RES_GEMS);
  !!en;

  ; Use fail safe when the level 7 creature does not cost any rare resource
  !!if&(specResId)=(NULL);
    !!VR(specResId)|(townType)=(TOWN_INFERNO)/(townType)=(TOWN_NECROPOLIS)/(townType)=(TOWN_CONFLUX):S(RES_MERCURY);
    !!VR(specResId)|(townType)=(TOWN_DUNGEON)/(townType)=(TOWN_FORTRESS):S(RES_SULFUR);
    !!VR(specResId)|(townType)=(TOWN_RAMPART)/(townType)=(TOWN_STRONGHOLD):S(RES_CRYSTAL);
    !!VR(specResId)|(townType)=(TOWN_CASTLE)/(townType)=(TOWN_TOWER):S(RES_GEMS);
  !!en;
!!en;

; ==================================================================================================

!?FU(OnTownMouseClick); 
!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;

; получение параметров клика
!!CM:I?(itemId:y) F?(flags:y) S?(clickSubtype:y);
!!FU|(flags)<>(NO_MOUSE_FLAGS)/(clickSubtype)<>(MOUSE_LMB_PRESSED):E;

!!FU(WOG_45_IncreaseCreatureGrowth)&(itemId)=(ITEMID_TOWN_TOWNPIC):P;
!!FU(WOG_45_IncreaseTownGoldIncome)&(itemId)=(ITEMID_TOWN_HALLPIC):P;

!?FU(OnTownMouseHint); 
!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;

; display hint text
!!CM:I?(itemId:y);  
!!SN&(itemId)=(ITEMID_TOWN_TOWNPIC):T^wog.45.hintTownPic^/?(hint:z);
!!SN&(itemId)=(ITEMID_TOWN_HALLPIC):T^wog.45.hintHallPic^/?(hint);
!!CM|(itemId)=(ITEMID_TOWN_TOWNPIC)/(itemId)=(ITEMID_TOWN_HALLPIC):M(hint);

; =========== CREATURE BONUS =======================================================================

!?FU(WOG_45_IncreaseCreatureGrowth);
; получение необходимых параметров города
!!CA(CURRENT_TOWN):O?(ownerId:y) U?(townId:y) T?(townType:y); 

; выход если не наш город
!!FU(WOG_GameMgr_GetPlayer_Me):P?(meId:y);
!!FU&(ownerId)<>(meId):E;

; вычисляем ссылку на город в массиве бонусов
!!VR(ptrAlreadyBuilt:y):S(townId) *(WOG_45_ITEMCOUNT);
!!VR(monBonusItemId:y):S(ptrAlreadyBuilt) +2; 

; инициализируем главные переменные
!#VA(monType[7]:y) (monCount[7]:y) (monLevel[7]:y);
!#VA(msgType[7]:y) (msgMonType[7]:y);

; инициализируем массивы дефолнтными значениями
!!VR(msgType[0]):C(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON); 
!!VR(msgMonType[0]):C(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON)/(NO_MON); 

; инициализируем дополнительные переменные
!!VR(counter:y):S0;
!!VR(buildId:y):S36;
!!VR(prtMonBonusItem:y):S0;

!!re i/(MON_MIN_LEVEL)/(MON_MAX_LEVEL)/1;
  ; проверяем построено ли улучшенное жилище
  !!VR(buildId):+1;
  !!CA0/(townId):B3/(buildId); 

  !!if&(TRUE); 
    ; формируем указатели
    !!VR(monTypePtr:y):S(@monType) +(counter);      
    !!VR(monCountPtr:y):S(@monCount) +(counter);  
    !!VR(monLevelPtr:y):S(@monLevel) +(counter); 
    !!VR(msgTypePtr:y):S(@msgType) +(counter);  
    !!VR(msgMonTypePtr:y):S(@msgMonType) +(counter); 

    ; получаем тип нанимаемого монстра в городе
    !!FU(WOG_Town_GetCreatureID):P(townType)/i/1/?y(monTypePtr);
    ; сохраняем уровень monLevel (через него будем вытаскивать значение результата из IF:N)
    !!VRy(monLevelPtr):Si; 

    ; получаем правильную ссылку на массив и считываем бонус кол-ва
    !!VR(prtMonBonusItem):S(monBonusItemId) +i;  
    !!SN:M(WOG_OPT_CASTLE_UPGRADING)/(prtMonBonusItem)/?y(monCountPtr); 

    ; формируем тип картинки, и кладём его в указатель на массив картинок
    !!VRy(msgTypePtr):S(PIC_TYPE_MONSTER) |(PIC_TYPE_FLAG_DISPLAY_ZEROS);
    ; формируем номер монстра (и его кол-во), и кладём его в указатель на тип монстра
    !!VRy(msgMonTypePtr):Sy(monCountPtr) Sd<<16 |y(monTypePtr);  

    ; увеличиваем счетчик существующих элементов
    !!VR(counter):+1; 
  !!en;
!!en;

; улучшенных жилищ нет - выходим
!!if&(counter)<1;
  !!IF:M^%T(wog.45.noOneUpgDwelling)^;
  !!FU:E;
!!en;

; конфигурируем сообщение 1 
!!IF:N(msgType[0])/(msgMonType[0])/
      (msgType[1])/(msgMonType[1])/
      (msgType[2])/(msgMonType[2])/
      (msgType[3])/(msgMonType[3])/
      (msgType[4])/(msgMonType[4])/
      (msgType[5])/(msgMonType[5])/
      (msgType[6])/(msgMonType[6])/
      (NO_PIC_TYPE)/(NULL);

; Configure message
!!VR(requirementMsg:z):S^^;
!!VR(msgDlgType:y):S(MSG_TYPE_QUESTION);

; проверка: если что-то сегодня уже строилось - выходим
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrAlreadyBuilt)/?(isAlreadyBuilt:y);

!!if&(isAlreadyBuilt)=(TRUE);
  !!VR(requirementMsg):S^

{~r}%T(wog.45.alreadyBuild){~}^;
  !!VR(msgDlgType):S(MSG_TYPE_MES);
!!en;

!!SN:T^wog.45.mainCreaturesMsg^/?(message:z)/^requirementMsg^/(requirementMsg);

; показать сообщение 
!!IF:N(MSG_TYPE_CHOOSE_PIC_OR_CANCEL)/^%(message)^/?(chosenPicture:y);
; выходим, если нажата ОТМЕНА
!!FU&(chosenPicture)=-1:E;

; вытаскиваем какой юнит был выбран в сообщении
!!VR(chosenId:y):S(@monLevel) +(chosenPicture);
!!VR(monLvl:y):Sy(chosenId);
!!FU|(monLvl)<(MON_MIN_LEVEL)/(monLvl)>(MON_MAX_LEVEL):E;

; опять получаем id существа этого уровня в замке
!!FU(WOG_Town_GetCreatureID):P(townType)/(monLvl)/1/?(monID:y);
; опять получаем кол-во монстров
; получаем правильную ссылку на массив и считываем бонус кол-ва
!!VR(monBonusItemId):+(monLvl);  
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(monBonusItemId)/?(monNum:y); 

; величина бонуса в зависимости от уровня существа
!!MA:G(monID)/?(growth:y);
!!VR(growth):+1 :2;
!!VR(growth)&(growth)<1:S1;
!!VR(growth)&(growth)>10:S10;

; получаем стоимость существа
; Fix mods with UN:T hacks compatibility by using global variables - Archer
*!FU(WOG_Town_GetCreatureID):P(townType)/(monLvl)/0/?(trueMonID:y);
!!VR(trueMonID:y):Si^wog_45_upgMonLvl%(monLvl)^;
!!FU(WOG_Creature_GetCost):P(trueMonID)/?(wood:y)/?(mercury:y)/?(ore:y)/?(sulfur:y)/?(crystal:y)/?(gems:y)/?(gold:y);

; обязательны простые ресурсы для постройки (5 дерева, 5 руды)
!!VR(wood)&(wood)<(WOG_45_MINCOST):S(WOG_45_MINCOST);
!!VR(ore)&(ore)<(WOG_45_MINCOST):S(WOG_45_MINCOST);
; создаём величину золота для улучшения 
!!VR(gold):*(growth) *(WOG_45_MINCOST);

; проверяем опцию Половинная Cтоимость Существ
!!UN:P(WOG_OPT_CREATURES_HALF_PRICE_ON_7TH_DAY)/?(wogOptionHalfPrice:y);

!!if&(wogOptionHalfPrice)=(TRUE);
  !!VR(day:y):Sc %(DAYS_IN_WEEK);
  !!VR(gold)&(day)=0:*2; if Sunday
!!en;

; дефолтная картинка спец.ресурса
!!VR(typeSpecResPicId:y):S(NO_PIC_TYPE);
!!VR(typeSpecResPicCount:y):S(NULL);
!!VR(specResId:y):S(NULL);

; если спец.ресурс существует
!!if&(mercury)>(NULL);
  !!VR(typeSpecResPicId):S(PIC_TYPE_RES_MERCURY);
  !!VR(typeSpecResPicCount):S(mercury) * (growth) * (WOG_45_MINCOST);
  !!VR(specResId):S(RES_MERCURY);
!!el&(sulfur)>(NULL);
  !!VR(typeSpecResPicId):S(PIC_TYPE_RES_SULFUR);
  !!VR(typeSpecResPicCount):S(sulfur) * (growth) * (WOG_45_MINCOST);
  !!VR(specResId):S(RES_SULFUR);
!!el&(crystal)>(NULL);
  !!VR(typeSpecResPicId):S(PIC_TYPE_RES_CRYSTAL);
  !!VR(typeSpecResPicCount):S(crystal) * (growth) * (WOG_45_MINCOST);
  !!VR(specResId):S(RES_CRYSTAL);
!!el&(gems)>(NULL);
  !!VR(typeSpecResPicId):S(PIC_TYPE_RES_GEMS);
  !!VR(typeSpecResPicCount):S(gems) * (growth) * (WOG_45_MINCOST);
  !!VR(specResId):S(RES_GEMS);
!!en;

; конфигурируем сообщение 2 
!!IF:N(PIC_TYPE_MONSTER)/(monID)/
      (PIC_TYPE_RES_WOOD)/(wood)/
      (PIC_TYPE_RES_ORE)/(ore)/
      (PIC_TYPE_RES_GOLD)/(gold)/
      (typeSpecResPicId)/(typeSpecResPicCount)/
      (NO_PIC_TYPE)/(NULL)/
      (NO_PIC_TYPE)/(NULL)/
      (NO_PIC_TYPE)/(NULL);

; патч памяти (Resour82.def -> Resource.def)
!!UN:C5199571/(UNC_UINT32)/?(saveMemory1:y) C5199571/(UNC_UINT32)/(PTR_RESOURCE_DEF);
!!UN:C5199620/(UNC_UINT32)/?(saveMemory2:y) C5199620/(UNC_UINT32)/(PTR_RESOURCE_DEF);

; Check if meeting the costs requirement for specific dwelling  if did not build this turn
!!if&(requirementMsg)=^^;
  ; хватает ли у игрока простых ресурсов и золота
  !!FU(WOG_Player_CheckEnoughResources):P?(boolHasResources:y)/(ownerId)/(wood)/(NULL)/(ore)/(NULL)/(NULL)/(NULL)/(gold);

  ; хватает ли у игрока спец.ресурса
  !!if&(specResId)>(NULL);  
    !!OW:R(ownerId)/(specResId)/?(temp:y); 
    !!VR(boolHasResources)&(temp)<(typeSpecResPicCount):S(FALSE);
  !!en;

  ; если не хватает - сообщаем и выходим
  !!if&(boolHasResources)<>(TRUE); 
    ; not enough resources
    !!VR(requirementMsg):S^

{~r}%T(wog.45.noResToUpgradeUpgDwelling){~}^;
    !!VR(msgDlgType):S(MSG_TYPE_MES);
  !!en;
!!en;

; создаём полный текст сообщения 2
!!SN:T^wog.45.upgradeDwellingMsg^/?(message)/^requirementMsg^/(requirementMsg)/^count^/(monNum)/^growth^/(growth);

; показать сообщение 2
!!IF:N(msgDlgType)/(message)/?(result:y);
; патч памяти (восстановить оригинальный код)
!!UN:C5199571/(UNC_UINT32)/(saveMemory1) C5199620/(UNC_UINT32)/(saveMemory2);
!!FU&(result)<>(TRUE):E;

; забрать базовые ресурсы у игрока
!!FU(WOG_Player_RemoveResources):P(ownerId)/(wood)/(NULL)/(ore)/(NULL)/(NULL)/(NULL)/(gold);
; забрать спец.ресурс у игрока
!!OW&(specResId)>(NULL):R(ownerId)/(specResId)/d-(typeSpecResPicCount);

; добавить бонус существ
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(monBonusItemId)/d(growth); 

; установить, что в этом городе что-то уже строилось
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrAlreadyBuilt)/(TRUE);

; осключить стандартную реакцию на клик
!!CM:R0;

; обновить экран города (ресурсы)
!!UN:R(REDRAW_TOWN_SCREEN);

; Play sound
!!SN:P^buildtwn^;

; ============= GOLD BONUS =========================================================================

!?FU(WOG_45_IncreaseTownGoldIncome);
; get town owner
!!CA(CURRENT_TOWN):O?(ownerId:y) U?(townId:y); 

; exit if not my town
!!FU(WOG_GameMgr_GetPlayer_Me):P?(meId:y);
!!FU&(ownerId)<>(meId):E;

; if City Hall is built
!!CA0/(townId):B3/12; 

!!if&-1;
  !!IF:M^%T(wog.45.noCityHall)^;
  !!FU:E;  
!!en;

; get town array items id
!!VR(ptrAlreadyBuilt:y):S(townId) *(WOG_45_ITEMCOUNT);
!!VR(prtGoldBonusItem:y):S(ptrAlreadyBuilt) +1;

; check town gold bonus
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(prtGoldBonusItem)/?(goldBonus:y);
!!VR(needRes:y):S(goldBonus) :(WOG_45_GOLDBONUS) +1;
!!VR(needRes)&(needRes)<(WOG_45_MINCOST):S(WOG_45_MINCOST);
!!VR(needGold:y):S(needRes) *(WOG_45_GOLDBONUS);

; configure message
; Disable the requirement of special resouces but add in special resource requirements - Archer
; The special resources would be Mithril when applicable. If negative, it would be the rare resource required for the level 7 creature plus Wood and Ore
*!IF:N(PIC_TYPE_RES_WOOD)/(needRes)/
      (PIC_TYPE_RES_MERCURY)/(needRes)/
      (PIC_TYPE_RES_ORE)/(needRes)/
      (PIC_TYPE_RES_SULFUR)/(needRes)/
      (PIC_TYPE_RES_CRYSTAL)/(needRes)/
      (PIC_TYPE_RES_GEMS)/(needRes)/
      (PIC_TYPE_RES_GOLD)/(needGold)/
      (NO_PIC_TYPE)/(NULL);
!!CA(CURRENT_TOWN):T?(townType:y);
!!FU(WOG_45_GetTownSpecialResource):P(townType)/?(specResId:y);
!!VR(typeSpecResPicId:y):S(specResId);

; Requires Wood and Ore if Mithril is not enabled
!!if&(specResId)=(RES_MITHRIL);
  !!VR(extRes1PicId:y):S(NO_PIC_TYPE);
  !!VR(extRes2PicId:y):S(NO_PIC_TYPE);
  !!VR(extNeedRes:y):S(NULL);
  !!VR(needMithril:y):S(needRes);
!!el;
  !!VR(extRes1PicId):S(RES_WOOD);
  !!VR(extRes2PicId):S(RES_ORE);
  !!VR(extNeedRes:y):S(needRes);
  !!VR(needMithril:y):S(NULL);
!!en;

!!IF:N(PIC_TYPE_RES_GOLD)/(needGold)/
      (typeSpecResPicId)/(needRes)/
      (extRes1PicId)/(extNeedRes)/
      (extRes2PicId)/(extNeedRes)/
      (NO_PIC_TYPE)/(NULL)/
      (NO_PIC_TYPE)/(NULL)/
      (NO_PIC_TYPE)/(NULL)/
      (NO_PIC_TYPE)/(NULL);

; memory patch (Resour82.def -> Resource.def)
!!UN:C5199571/(UNC_UINT32)/?(saveMemory1:y) C5199571/(UNC_UINT32)/(PTR_RESOURCE_DEF);
!!UN:C5199620/(UNC_UINT32)/?(saveMemory2:y) C5199620/(UNC_UINT32)/(PTR_RESOURCE_DEF);

!!VR(requirementMsg:z):S^^;
!!VR(msgDlgType:y):S(MSG_TYPE_QUESTION);

; if something has already been built today
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrAlreadyBuilt)/?(isAlreadyBuilt:y);

!!if&(isAlreadyBuilt)=(TRUE);
  !!VR(requirementMsg):S^

{~r}%T(wog.45.alreadyBuild){~}^;
  !!VR(msgDlgType):S(MSG_TYPE_MES);
!!el;
  ; Change the requirement of resouces - Archer
  *!FU(WOG_Player_CheckEnoughResources):P?(boolHasResources:y)/(ownerId)/(needRes)/(needRes)/(needRes)/(needRes)/(needRes)/(needRes)/(needGold);
  !!FU(WOG_Player_CheckEnoughResources):P?(boolHasResources:y)/(ownerId)/(extNeedRes)/(NULL)/(extNeedRes)/(NULL)/(NULL)/(NULL)/(needGold)/(needMithril);

  ; Additional check for town special resource if not mithril (put it here since it is easier to write than FU:P)
  !!if&(boolHasResources)/(specResId)<>(RES_MITHRIL);
    !!OW:R(ownerId)/(specResId)/?(temp:y); 
    !!VR(boolHasResources)&(temp)<(needRes):S(FALSE);
  !!en;

  !!if&(boolHasResources)<>(TRUE);  
    ; not enough resources and gold 
    !!VR(requirementMsg):S^

{~r}%T(wog.45.noResToUpgradeGoldReserve){~}^;
    !!VR(msgDlgType):S(MSG_TYPE_MES);
  !!en;
!!en;

!!SN:T^wog.45.mainGoldReserveMsg^/?(message:z)/^requirementMsg^/(requirementMsg)/^gold^/(goldBonus);
!!VR(message):+^%T(wog.45.upgrGoldReserveMsg)^;

; show message 
!!IF:N(msgDlgType)/(message)/?(result:y);
; memory patch (restore original code)
!!UN:C5199571/(UNC_UINT32)/(saveMemory1) C5199620/(UNC_UINT32)/(saveMemory2);
!!FU&(result)<>(TRUE):E;

; remove player resources
!!FU(WOG_Player_RemoveResources):P(ownerId)/(extNeedRes)/(NULL)/(extNeedRes)/(NULL)/(NULL)/(NULL)/(needGold)/(needMithril);

; add gold bonus to this town
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(prtGoldBonusItem)/d+(WOG_45_GOLDBONUS);

; set what was already built today
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrAlreadyBuilt)/(TRUE);

; disable standard action
!!CM:R0;
!!UN:R(REDRAW_TOWN_SCREEN);

; Play sound
!!SN:P^buildtwn^;

; =========== AI BUILD =============================================================================

!?FU(WOG_45_AI_UpgradeTown);
!#VA(townID:x);

; проверяем хозяина города: человек или ИИ
!!CA0/(townID):O?(ownerId:y) T?(townType:y); 

; выход, если город ничей
!!FU&(ownerId)=(NO_PLAYER):E;

; проверка на игрока ИИ
!!OW:I(ownerId)/?(isAI:y);
!!FU&(isAI)<>(TRUE):E;

; генерируем  5% шанс постройки золотого запаса
;        или 10% шанс постройки улучшения города
;   1-50     : золото
;  51-150    : существа
; 151 и выше : выход
!!VR(chance:y):R0/1/1000; 
!!FU&(chance)>150:E;

; получаем ссылку на массив города
!!VR(townArray:y):S(townID) *(WOG_45_ITEMCOUNT);

; проверить строилось ли уже что-то в этом городе
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(townArray)/?(isAlreadyBuilt:y);
!!FU&(isAlreadyBuilt)=(TRUE):E;

; устанавливаем флаг, что уже строилось
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(townArray)/(TRUE);

!!if&(chance)<=50; выпала постройка Золотого Запаса
  ; проверяем построен ли Муниципалитет
  !!CA0/(townID):B3/12; 
  !!FU&-1:E; не построен - выход

  !!VR(townArray):+1;
  !!SN:M(WOG_OPT_CASTLE_UPGRADING)/(townArray)/d+(WOG_45_GOLDBONUS);
  !!FU:E; улучшили Золотой Запас, и вышли из триггера
!!en;

; генерируем уровень монстра
!!VR(monLvl:y):R0/(MON_MIN_LEVEL)/(MON_MAX_LEVEL);

; проверяем построено ли улучшенное жилище этого монстра
!!VR(buildID:y):S37 +(monLvl);
!!CA0/(townID):B3/(buildID); 
!!FU&-1:E; не построено - выход

; получаем id существа этого уровня в городе
!!FU(WOG_Town_GetCreatureID):P(townType)/(monLvl)/1/?(monID:y);

; смещаемся на нужного монстра в массиве
!!VR(townArray):+2 +(monLvl);

; величина бонуса в зависимости от уровня существа
!!MA:G(monID)/?(growth:y);
!!VR(growth):+1 :2;
!!VR(growth)&(growth)<1:S1;
!!VR(growth)&(growth)>10:S10;

; добавить бонус существ
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(townArray)/d(growth); 

; ============= ADD BONUSES ========================================================================

!?FU(OnCalculateTownIncome); 
!#VA(town:x) (gold:x);

!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;
; получаем величину бонуса Золотого Запаса в городе
!!VR(prtGoldBonusItem:y):S(town) *(WOG_45_ITEMCOUNT) +1;
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(prtGoldBonusItem)/?(goldBonus:y);
; начисление бонуса золота в городе
!!VR(gold)&(goldBonus)>0:+(goldBonus);


!?FU(WOG_OnNewWeek); 
; начисление бонуса прироста в городах
!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;

; проход по всем городам
!!re i/0/(WOG_45_TOWNSCOUNT)/1/-1; 
  !!VR(ptrMonstersBonus:y):Si *(WOG_45_ITEMCOUNT) +1;  
  ; проход по всем монстрам в городе
  !!re l/(MON_MIN_LEVEL)/(MON_MAX_LEVEL)/1;
    !!VR(ptrMonstersBonus):+1; 
    !!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrMonstersBonus)/?(count:y);  
    !!CA0/i&(count)>0:M1/l/d/d(count);
  !!en;
!!en;

; ============= RESET VARS =========================================================================

!?FU(WOG_OnNewDay); 
!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;

; проход по всем городам
!!VR(stop:y):S(WOG_45_TOWNSCOUNT) *(WOG_45_ITEMCOUNT) - (WOG_45_ITEMCOUNT);

; reset already built var for all towns
!!re (ptrAlreadyBuilt:y)/0/(stop)/(WOG_45_ITEMCOUNT); 
  !!SN:M(WOG_OPT_CASTLE_UPGRADING)/(ptrAlreadyBuilt)/(FALSE);
!!en;

; AI building function
!!UN:U(OBJ_TOWN)/(ANY_OBJ)/?(townsCount:y);
!!FU&(townsCount)<1:E;

!!VR(townsCount)&(townsCount)>47:S47;

!!re i/0/(townsCount)/1/-1; 
  !!FU(WOG_45_AI_UpgradeTown):Pi;
!!en;

!?FU(OnAfterErmInstructions); 
!!UN:P(WOG_OPT_CASTLE_UPGRADING)/?(wogOption:y);  
!!FU&(wogOption)<>(TRUE):E;

!!VR(size:y):S(WOG_45_TOWNSCOUNT) *(WOG_45_ITEMCOUNT);
!!SN:M(WOG_OPT_CASTLE_UPGRADING)/(size)/(M_INT)/(M_STORED)/?(townsArrayID:y);
; WOG_OPT_CASTLE_UPGRADING = id_array = 45
; items count (type int): 48 towns * 10 items = 480 items
; 0-9: first town
;   0) bool: is already built: 0 - false, 1 - true
;   1) value gold bonus
;   2) value creatures 1 lvl bonus
;   3) value creatures 2 lvl bonus
;   4) value creatures 3 lvl bonus
;   5) value creatures 4 lvl bonus
;   6) value creatures 5 lvl bonus
;   7) value creatures 6 lvl bonus
;   8) value creatures 7 lvl bonus
;   9) not used
; 10-19: second town
;   10) is already built: 0 - false, 1 - true
;   11) value gold bonus
; ... etc

** End of Script **
