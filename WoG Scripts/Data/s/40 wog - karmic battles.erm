ZVSE2

** UPDATED: July 29, 2004
** Karmic Battles Script version 1.2 by Dieter Averbeck  for WoG 3.58
** (Version 1.2 updated by Bonizag and Timothy Pulver)
** (Version 1.3 updated by Archer30 and daemon_n)

** This script summons for every battle against wandering monster
** some additional stacks of creatures. This Script can`t be used
** as predone. If you want to, just send me a mail:
** dieter@byteware.de

** Version 1.1 will work with script54.erm (War Machines) and fixes a bug
** with stacks appearing on top of obstacles. It also corrects a potential
** problem with human vs. human online battles where the script sometimes
** activated when it shouldn't have.

** Here's how the number of Karmic creatures is calculated:
** The first battle, the Karmic Battle Counter for a hero starts at two.
** Each additional Karmic Battle that hero fights adds 1 to his or her Karmic
** Battle Counter.
** 1. A random number between 0 and 9 (inclusive) is generated for each battle.
** 2. If the number isn't 0, 1 is added to this hero's Karmic Battle count which
** starts the game at 1 (so the first Karmic Battle is always at 2).
** 3. The number and type of stacks is determined at follows:
**  a) If the number is 0 there's no Karmic stacks.
**  b) If the number is 1..3, there's 6 random stacks.
**  c) If the number is 4..5, there's 3 random stacks.
**  d) If the number is 6..7, there's 1 random stack.
**  e) If the number is 8..9, there's 2 *calculated* stacks.
** 3. The number in each stack is determined as follows:
**  a) If there's 6 random stacks, it's 1 times the Karmic Battle Count
**  b) If there's 3 random stacks, it's 2 times the Karmic Battle Count
**  c) If there's 1 random stack, it's 4 times the Karmic Battle Count
**  d) If it's 2 calculated stacks, it's 1 times the Karmic Battle Count

** Calculated stacks determine the monster type depending on the hero's Karmic
** Battle Count with a random choice of two types for each Karmic Battle Count
** range, whereas random stacks are determined more randomly but level is based
** on the hero's Karmic Battle Count.


** Variables Used: w49

** monster stack trigger
!?OB(OBJ_MONSTER);
!!UN:P38/?(wogOption:y);
!!VRi^wog_48_isNeutralBattle^&(wogOption):S(TRUE); ** set to True to show that a monster stack is visited

!$OB(OBJ_MONSTER);
!!UN:P38/?(wogOption:y);
!!VRi^wog_48_isNeutralBattle^&(wogOption):S(FALSE); ** reset to False after the monster stack visit is done

!?FU(OnAfterLoadGame);
!!UN:P38/?(wogOption:y);
!!VRi^wog_48_isNeutralBattle^&(wogOption):S(FALSE);


** before battle
!?FU(OnBeforeBattle)&i^wog_48_isNeutralBattle^/1000;
!!VRi^wog_38_karmaType^:S0 R9;  ** set random parameter for battle script (0-9): i^wog_38_karmaType^
!!IF:Wi^battle_hero_0^;
!!VRw49:F1/(INT_MAX);   ** prevent 0-stacks if hero gets attacked by Tim`s WM

!!if&i^wog_38_karmaType^<>0;
  !!VRw49:+1; ** count w49 up, if battlescript called
  !!VRi^wog_38_randomSeed^:R0/0/(INT_MAX); [generate a random seed to ensure the results are the same on battle replay]
!!en;


** manage stacks to be summoned after tactics phase
!?FU(OnAfterTacticsPhase)&i^wog_48_isNeutralBattle^/1000;
!!IF:Wi^battle_hero_0^; ** all the function calls below will use w49 - @daemon_n: wrong, it requires reinit
!!VR(baseValue:y):Sw49;
; x1=multiplier x2=startPos x3=increase
!!if&i^wog_38_karmaType^>=1/i^wog_38_karmaType^<=3;
  !!DO(WOG_38_SummonRandomStacks)/1/6/1:P(baseValue)/1/5/34;     ** summon 6 random stacks
!!el&i^wog_38_karmaType^>=4/i^wog_38_karmaType^<=5;
  !!DO(WOG_38_SummonRandomStacks)/1/3/1:P(baseValue)/2/39/34/;    ** summon 3 random stacks
!!el&i^wog_38_karmaType^>=6/i^wog_38_karmaType^<=7;
  !!DO(WOG_38_SummonRandomStacks)/1/1/1:P(baseValue)/4/91/0;     ** summon 1 random stack
!!el&i^wog_38_karmaType^>=8;
  !!FU(WOG_38_SummonCalculatedStacks):P(baseValue:y);             ** summon 2 calculated stacks
!!en;


** summon random stacks
!?FU(WOG_38_SummonRandomStacks);
!#VA(baseValue:x) (multiplier:x) (proposedPos:x) (posOffset:x);

!!VR(num:y):S(baseValue:x) *(multiplier);        ** number per stack
!!VR(num)&i^Tougher_Karmic_Battles_on^:*2; [Multiple by two if Tougher Karmic Battles is enabled]

!!VR(level:y):S(baseValue:x) :10 F0/13;        ** set Level
!!VR(randomSeed:y):Si^wog_38_randomSeed^ +x16;
!!VR(type:y):R0/(randomSeed) R0/(TOWN_CASTLE)/(TOWN_FORTRESS);       ** calculate creature
!!VR(type):*14 +(level);

!!VR(type)&(type)=102:S(MON_SERPENT_FLY);       [Correct Serpent Fly number]
!!VR(type)&(type)=103:S(MON_DRAGON_FLY);        [Correct Dragon Fly number]
!!VR(type)&(type)=104:S(MON_BASILISK);          [Correct Basilisk number]
!!VR(type)&(type)=105:S(MON_GREATER_BASILISK);  [Correct Greater Basilisk number]
!!VR(type)&(type)=106:S(MON_GORGON);            [Correct Gorgon number]
!!VR(type)&(type)=107:S(MON_MIGHTY_GORGON);     [Correct Mighty Gorgon number]

!!MA:X(type)/?(monFlags:y);  ** Check monster Flags
!!VR(isWide:y):S(monFlags) &(MON_FLAG_WIDE);     ** Check for 2-hex creature

!!DO(WOG_38_FindValidPos)/1/200/1:P(proposedPos)/(isWide)/?(pos:y); ** find a position with no obstacles

!!BU:S(type)/(num)/(pos)/1/-1/0;
!!VR(proposedPos):+(posOffset);          ** increase position number: (pos)


** find a position with no obstacles
!?FU(WOG_38_FindValidPos);
!#VA(proposedPos:x) (isWide:x) (pos:x);

!!VR(pos):R0/0/7;
!!VR(pos):+(proposedPos);         ** (proposedPos) is offset position
!!BU:O(pos)/?(obstFlags:y);       ** check for obstacle: (obstflags)=0 if no obstacle
!!BU:E(pos)/?(stack:y);       ** check for monster: (stack)<0 if no monster

!!if&(isWide);
  !!VR(secPos:y):S(pos) -1;    ** check for 2-hex creature. Position
  !!BU&(obstFlags)=0:O(secPos)/?(obstFlags);     ** check for obstacle: (obstflags)=0 if no obstacle
  !!BU&(stack)<0:E(secPos)/?(stack);     ** check for monster: (stack)<0 if no monster
!!en;

!!if&x16=100;
  !!VR(pos)&(obstFlags)>0:S(proposedPos) +8; [Alternate position 1 if others not clear]
  !!BU:O(pos)/?(obstFlags);       ** check for obstacle: (obstflags)=0 if no obstacle
  !!BU:E(pos)/?(stack);       ** check for monster: (stack)<0 if no monster

  !!VR(pos)&(stack)>=0:S(proposedPos) -1; [Alternate position 2 if others not clear]
  !!BU:O(pos)/?(obstFlags);       ** check for obstacle: (obstflags)=0 if no obstacle
  !!BU:E(pos)/?(stack);       ** check for monster: (stack)<0 if no monster
!!en;

!!VRx16&(obstFlags)=0/(stack)<0:S1000;  ** exit loop if valid position is found


** summon calculated stacks
!?FU(WOG_38_SummonCalculatedStacks);
!!VR(baseValue:y):Sx1;
!!VR(type:y):R0/i^wog_38_randomSeed^ R0/0/1;
!!VR(type)&(baseValue:y)>0/(baseValue:y)<10/(type)=0:S139; **Peasant
!!VR(type)&(baseValue:y)>0/(baseValue:y)<10/(type)=1:S118; **Pixie

!!VR(type)&(baseValue:y)>=10/(baseValue:y)<20/(type)=0:S119; **Sprite
!!VR(type)&(baseValue:y)>=10/(baseValue:y)<20/(type)=1:S138; **Halfling

!!VR(type)&(baseValue:y)>=20/(baseValue:y)<30:S0 R2;
!!VR(type)&(baseValue:y)>=20/(baseValue:y)<30/(type)=0:S112;  **Air Elemental
!!VR(type)&(baseValue:y)>=20/(baseValue:y)<30/(type)=1:S140;  **Boar
!!VR(type)&(baseValue:y)>=20/(baseValue:y)<30/(type)=2:S143;  **Rogue

!!VR(type)&(baseValue:y)>=30/(baseValue:y)<40/(type)=0:S127; **Storm Elemantal
!!VR(type)&(baseValue:y)>=30/(baseValue:y)<40/(type)=1:S159; **Ghost

!!VR(type)&(baseValue:y)>=40/(baseValue:y)<50:S0 R2;
!!VR(type)&(baseValue:y)>=40/(baseValue:y)<50/(type)=0:S115; **Water Elemental
!!VR(type)&(baseValue:y)>=40/(baseValue:y)<50/(type)=1:S141; **Mummy
!!VR(type)&(baseValue:y)>=40/(baseValue:y)<50/(type)=2:S142; **Nomad

!!VR(type)&(baseValue:y)>=50/(baseValue:y)<110:S0 R2; **Random number 0..2

!!VR(type)&(baseValue:y)>=50/(baseValue:y)<60/(type)=0:S123; **Ice Elemental
!!VR(type)&(baseValue:y)>=50/(baseValue:y)<60/(type)=1:S166; **Air Messenger
!!VR(type)&(baseValue:y)>=50/(baseValue:y)<60/(type)=2:S192; **Sylvan Centaur

!!VR(type)&(baseValue:y)>=60/(baseValue:y)<70/(type)=0:S114; **Fire Elemental
!!VR(type)&(baseValue:y)>=60/(baseValue:y)<70/(type)=1:S164; **Fire Messenger
!!VR(type)&(baseValue:y)>=60/(baseValue:y)<70/(type)=2:S137; **Sharpshooter

!!VR(type)&(baseValue:y)>=70/(baseValue:y)<80/(type)=0:S129; **Energy Elemental
!!VR(type)&(baseValue:y)>=70/(baseValue:y)<80/(type)=1:S165; **Earth Messenger
!!VR(type)&(baseValue:y)>=70/(baseValue:y)<80/(type)=2:S167; **Water Messenger

!!VR(type)&(baseValue:y)>=80/(baseValue:y)<90/(type)=0:S113; **Earth Elemental
!!VR(type)&(baseValue:y)>=80/(baseValue:y)<90/(type)=1:S170; **Arctic Sharpshooter
!!VR(type)&(baseValue:y)>=80/(baseValue:y)<90/(type)=2:S194; **Werewolf

!!VR(type)&(baseValue:y)>=90/(baseValue:y)<100/(type)=0:S125; **Magma Elemental
!!VR(type)&(baseValue:y)>=90/(baseValue:y)<100/(type)=1:S171; **Lava Sharpshooter
!!VR(type)&(baseValue:y)>=90/(baseValue:y)<100/(type)=2:S144; **Troll

!!VR(type)&(baseValue:y)>=100/(baseValue:y)<110/(type)=0:S120; **Psychic Elemental
!!VR(type)&(baseValue:y)>=100/(baseValue:y)<110/(type)=1:S169; **War Zealot
!!VR(type)&(baseValue:y)>=100/(baseValue:y)<110/(type)=2:S193; **Sorceress

!!VR(type)&(baseValue:y)>=110/(baseValue:y)<120:S0 R3;
!!VR(type)&(baseValue:y)>=110/(baseValue:y)<120/(type)=0:S121; **Magic Elemental
!!VR(type)&(baseValue:y)>=110/(baseValue:y)<120/(type)=1:S172; **Nightmare
!!VR(type)&(baseValue:y)>=110/(baseValue:y)<120/(type)=2:S136; **Enchanter
!!VR(type)&(baseValue:y)>=110/(baseValue:y)<120/(type)=3:S195; **Hell Steed

!!VR(type)&(baseValue:y)>=120/(baseValue:y)<130/(type)=0:S130; **Firebird
!!VR(type)&(baseValue:y)>=120/(baseValue:y)<130/(type)=1:S168; **Gorynych

!!VR(type)&(baseValue:y)>=130/(baseValue:y)<140/(type)=0:S130; **Phoenix
!!VR(type)&(baseValue:y)>=130/(baseValue:y)<140/(type)=1:S168; **Gorynych (Guthllu)

!!VR(type)&(baseValue:y)>=140/(type)=0:S150 R8; **Random Level 8
!!VR(type)&(baseValue:y)>=140/(type)=1:S132 R4; **Random Powerful Neutral Dragon
!!VR(type)&(baseValue:y)>=140/(type)=136:S196;  **Dracolich
!!MA:X(type)/?(monFlags:y);  ** Check monster Flags
!!VR(isWide:y):S(monFlags) &(MON_FLAG_WIDE);     ** Check for 2-hex creature

!!VR(num:y):S(baseValue:y);
!!VR(num)&i^Tougher_Karmic_Battles_on^:*2;

!!DO(WOG_38_FindValidPos)/1/200/1:P73/(isWide)/?(pos:y); ** find a position with no obstacles
!!BU:S(type)/(num)/(pos)/1/-1/0;
!!DO(WOG_38_FindValidPos)/1/200/1:P107/(isWide)/?(pos); ** find a position with no obstacles
!!BU:S(type)/(num)/(pos)/1/-1/0;


** after battle - give AI experience
!?FU(OnAfterBattle)&i^wog_48_isNeutralBattle^/-1000;
!!UN:P38/?(wogOption:y);

!!if&(wogOption);
  !!IF:Wi^battle_hero_0^;
  !!VRw49:+1;
  !!VRw49:*500;
  !!HEi^battle_hero_0^:Edw49;
  !!VRw49::1000;
!!en;
