ZVSE2



************************************************************************
************************************************************************
****************************** GAME FIXES ******************************
************************************************************************
************************************************************************

// disable tactics message before tactics - 0x462D98 JMP SHORT 0x462DCA
!#UN:C4599192/2/12523;
!#UN:C4599194/4/2425393296;

!?FU(gem_CreateERMHook);
!!SN:Ex1/1/4499810/(gem_ARMY_OnGetAiValue);

!?FU(gem_ARMY_OnGetAiValue);&i^timerOwner^=7;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/?(armyPtr:y);
!!VR(numOffset:y):S28;
!!VR(result:y):S0;
!!if&(armyPtr);
  !!re i/0/(ARMY_SLOT_LAST);
    !!VR(offset:y):Si *(SIZEOF_INT);
    !!UN:C(armyPtr)/(offset)/4/?t;
    !!if&t>(NO_MON)/t<=(MON_LAST_WOG);
      !!MA:It/?(aiValue:y);
      !!VR(offset):+28;
      !!UN:C(armyPtr)/(offset)/4/?(num:y);

      !!VR(value:y):S(num) *(aiValue);
      !!VR(saveResult:y):S(result);
      !!VR(result):+(value:y);

      !!if&(result)<(saveResult);
        !!VR(result):S1000000000;(INT32_MAX);
        !!br;
      !!en;
    !!en;
  !!en;
!!en;
*!VR(re)
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/(result);
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4499845;
*!IF:L^%^;

// Divide all the AI values by 15 in order to prevent negative values after gathering massive amount of troops.
!?FU(OnAfterErmInstructions);
; Divide AI values only when Peasant's AI value is original (15)
!!MA:I(MON_PEASANT)/?(aiValuePeasant:y);

!!if&(aiValuePeasant)=15;
  !!FU(GetMaxMonsterId):P?(lastMon:y);
  !!VR(arraySize:y):S(lastMon) +1;
  !!FU(NewIntArray):P(arraySize)/?i^gem_origAiValues^/(M_STORED);

  !!re i/(MON_FIRST)/(lastMon);
    !!MA:Ii/?(aiValue:y);
    !!SN:Vi^gem_origAiValues^/i/(aiValue);
  !!en;

  !!VRi^gem_aiValuesDivided^:S(TRUE);
!!en;

!!FU(gem_ManageAIValues):P1;

!?OB(OBJ_ALTAR_OF_SACRIFICE);
!!FU(gem_ManageAIValues):P0;

!$OB(OBJ_ALTAR_OF_SACRIFICE);
!!FU(gem_ManageAIValues):P1;

!?FU(gem_ManageAIValues)&i^gem_aiValuesDivided^;
!#VA(mode:x);                           [0 - restoration, 1 - division]

!!FU(GetMaxMonsterId):P?(lastMon:y);

; Restoration
!!if&(mode)=0;
  !!re i/(MON_FIRST)/(lastMon);
    !!SN:Vi^gem_origAiValues^/i/?(aiValue:y);
    !!MA:Ii/(aiValue);
  !!en;
; Division
!!el;
  !!re i/(MON_FIRST)/(lastMon);
    !!MA:Ii/d:15;
  !!en;

  !!VRi^gem_aiValuesDivided^:S(TRUE);
!!en;


//
!?FU(OnGameEnter);
  !!UN:C6052891/1/4;                    [центрируем текст названия города в окне города (id 149)]
  ; радус открытия всей карты
  !!UN:C5196631/4/320;                  [чит-меню (ориг = 180)]
  !!UN:C4204282/4/360;                  [чит wogeyeofsauron (ориг = 200)]
  ; радус закрытия всей карты
  !!UN:C4204369/4/360;                  [чит wogeyeofsauron (ориг = 200)]
  !!UN:C5125902/4/34281 C5125907/1/144; [; отключить сообщение об ограничении опыта © Berserker]
  
  !!TL:E1; enable mulpiplayer timer

  // Fix of the speed overload
  !!SN:F^GetModuleHandleA^/^BattleSpeed.era^; [check plugin is loaded]
  !!if&v1<1;
    !!UN:C6916156/4/?(gameSpeed:y);     [if not loaded and speed >2]
    !!UN&(gameSpeed)>2:C6916156/4/2;    [set speed to 2]
  !!en;
*!UN:C5021668/1/144; cartographer lvl revie only upper level
  // 4 lines of the creature description instead of 3 

  !!UN:C6241860/1/1/?(baseHeight:y); if the best of the plugin isn't active
  !!if&(baseHeight)=41;
    !!UN:C6241860/1/1/54  C6243439/1/1/54  C6244490/1/1/54;! !UN:C 5F3E44/1/1/54  C 5F446F/1/1/54  C 5F488A/1/1/54;  [height of the creature desc in Battle/notBattle/buy creature info DLGs]
    !!UN:C6241867/1/4/230 C6243446/1/4/230 C6244497/1/4/230; [yPos of the creature desc in Battle/notBattle/buy creature info DLGs]
  !!en;

  // disable message about joining army after combat;
  !!re i/0/4;
    !!UN:C4856798/i/1/(OPCODE_NOP_1);
  !!en;

  // up to 6 digits to display mon_cost with RMC on mon dwell (default was 4)
  !!UN:C5578846/1/1/40; [new gold cost text field width (default 32)]
  !!UN:C5578848/2/1/36; [new gold cost text field xPos (default 40)]


!?FU(gem_CreateERMHook);
!!SN:Ex1/1/5576191/(gem_OnRecruitCreatureDlgLeftClick);


!?FU(gem_CreateERMHook);
!!SN:Ex1/1/5574304/(gem_OnOpenRecruitDlg);

!?FU(OnOpenRecruitDlg);
!!VRi^gem_RecruitDlg_NeedToGetData^:S1;

!?FU(OnCloseRecruitDlg);
!!VRi^gem_CurrentProc_Dlg^:S0;
!!VRi^gem_CurrentProc_Msg^:S0;
!!VRi^gem_RecruitDlg_CurrentDlg^:S0;

!?FU(gem_OnOpenRecruitDlg)&i^gem_RecruitDlg_NeedToGetData^;
!!FU(H3Dlg_GetCurrentDlg):P?i^gem_RecruitDlg_CurrentDlg^;
!!VRi^gem_RecruitDlg_NeedToGetData^:S0;

!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?i^gem_CurrentProc_Dlg^ Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y)
C(ebp)/8/4/?i^gem_CurrentProc_Msg^;
!!FU(gem_RecruitDlg_SetMax):Px1;

!?FU(OnKeyPressed)&i^gem_CurrentProc_Dlg^;

!!if&x1>=(KEY_1)/x1<=(KEY_4)|x1=(KEY_RIGHT)/x1=(KEY_LEFT);
!!FU(H3Dlg_GetCurrentDlg):P?(currentDlg:y);
!!FU&i^gem_RecruitDlg_CurrentDlg^<>(currentDlg):E;
  !!VR(dlg:y):Si^gem_CurrentProc_Dlg^;
  !!UN:C(dlg:y)/88/4/?(currIndex:y);
  !#VA(items[4]:y);
  !!UN:C(dlg:y)/96/4/?(items[1]) C(dlg:y)/100/4/?(items[2]) C(dlg:y)/92/4/?(items[0]) C(dlg:y)/104/4/?(items[3]);
  !!VR(max:y):S-1;
  !!re i/0/3;
    !!if&(items[i])<>(NO_MON);
      !!VR(max:y):+1;
    !!en;
  !!en;

  !!if&(max:y);
    !!VR(saveIndex:y):S(currIndex);
    !!if&x1<(KEY_1);
      !!VR(offset:y):Sx1 -38;
      !!VR(currIndex):+(offset:y);
      !!if&(currIndex)>(max:y);
        !!VR(currIndex):S0;
      !!el&(currIndex)<0;
        !!VR(currIndex):S(max:y);
      !!en;
    !!el;
      !!VR(currIndex:y):Sx1 -(KEY_1);
    !!en;
    !!VR(currIndex):F0/(max:y);
    !!if&(saveIndex)<>(currIndex);
      !!VR(currIndex):+538;
      !!VR(msg:y):Si^gem_CurrentProc_Msg^;
      !!UN:C(msg)/4/4/12 C(msg)/4/512 C(msg)/8/4/(currIndex);
      !!SN:E5573952/(CALLCONV_THISCALL)/(dlg:y)/(msg:y);
    !!en;
  !!en;
!!en;

!?FU(gem_OnRecruitCreatureDlgLeftClick);
!!FU(gem_RecruitDlg_SetMax):Px1;
!?FU(gem_RecruitDlg_SetMax);
!#VA(hookContext:x);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDI)/4/?(isRmc:y);
!!FU&(isRmc):E;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(dlg:y) C(dlg)/172/4/?(availableCreatures:y);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/8/4/?(msg:y) C(msg)/8/4/?(clickedItem:y);
*!IF:M^%(clickedItem) %(isRmc:y)^;
!!if&(clickedItem)<1000/(availableCreatures:y)>0;
  !!UN:C(msg)/4/4/13 C(msg)/4/512 C(msg)/8/4/532;
  !!SN:E5573952/(CALLCONV_THISCALL)/(dlg)/(msg);

!!en;


!?FU(OnGameLeave);
  !!TL:E0; disable mulpiplayer timer


4C841C
// Fix of the crash in map veiew dlg with random Theme Music mod
!?FU(gem_OnOpenMapViewDlg);
  !!FU(gem_Buttons_Interaction):P(TRUE);

!?FU(gem_OnCLoseMapViewDlg);
  !!FU(gem_Buttons_Interaction):P;

// Removing bttns from Town Dlg - hook from gem_core.erm
!?FU(gem_OnPlaceTownBttns);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/(UNC_INT)/?(ebp:y);
  !!UN:C(ebp)/-16/(UNC_INT)/?(dlg:y);

  !!UN:P724/?(isBankEnabled:y);
  !!if&(isBankEnabled)=(FALSE);
    !!SN:F^GetButtonID^/^bank^;
    !!FU(gem_DlgShowItem)&v1>0:Pv1/0/0/0/(dlg);/1;
  !!en;

  !!UN:P785/?(isPeonsEnabled:y);
  !!if&(isPeonsEnabled)=(FALSE);
    !!SN:F^GetButtonID^/^Peons^;
    !!FU(gem_DlgShowItem)&v1>0:Pv1/0/0/0/(dlg);/1;
  !!en;


!?FU(gem_OnPlaceBattleBttns)&i^gem_IsHdModLoaded^=(FALSE);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/(UNC_INT)/?(ebp:y) C(ebp)/8/(UNC_INT)/?(dlg:y);
  !!SN:F^GetButtonID^/^gem_alt_btn^;
  !!if&v1/(dlg);      
    *!FU(gem_DlgItemPosition):Pv1/d/d-1/0/(dlg);
    *!FU(gem_DlgItemPosition):Pi/d/d-1/0/(dlg);
    !!re i/2001/2010;
      !!FU(gem_DlgItemPosition):Pi/d/d-1/0/(dlg);
    !!en;
    !!FU(gem_DlgItemPosition):P2300/d/d-1/0/(dlg);
    !!FU(gem_DlgItemPosition):P30722/d/d-1/0/(dlg);

    *!FU(gem_DlgDefProc):Pv1/3/4/0/(FALSE)/(dlg);
    *!FU(gem_DlgShowItem):Pv1/(FALSE)/(FALSE)/(FALSE)/(dlg);
    *!FU(gem_DlgDisableBtn):Pv1/(FALSE)/d/(FALSE)/(dlg);
  !!en;





************************************************************************
************************************************************************
***************************** BATTLE FIXES *****************************
************************************************************************
************************************************************************
// fix of the gold disappearing OnBattleReplay
!?FU(OnBeforeBattleReplay);
!!if&i^battle_owner_1^<>(NO_OWNER);
  !!OW:Ri^battle_owner_1^/(RES_GOLD)/?i^gem_DefPlayerGold^;
!!en;

!?FU(OnBattleReplay)&i^gem_DefPlayerGold^;
  !!OW:Ri^battle_owner_1^/(RES_GOLD)/i^gem_DefPlayerGold^;
  !!VRi^gem_DefPlayerGold^:S0;

!?FU(OnBattleReplay);
!!FU(UpdateBattleVars):P;

** Shackles of war (retreat vs neutrals bttles with SW)
!?BG0&i^battle_hero_1^<(HERO_FIRST);
!!BG:A?(actionType:y);
!!if&(actionType)=(BATTLE_ACTION_RETREAT);
  !!UN:C4689325/1/(ART_GRAIL);           [replace checked artId on hero to Grail from Shakles]
!!en;

!?FU(OnAfterBattleUniversal);
!!UN:C4689325/1/(ART_SHACKLES_OF_WAR);           [setback correct art id ]
!?FU(OnBattleScreenMouseClick)&i^mouse_battleHex^>=(BATTLE_HEX_FIRST)/i^mouse_battleHex^<=(BATTLE_HEX_LAST);
!!BU:Ei^mouse_battleHex^/?(stackId:y);

!!if&(stackId)>(NO_STACK);
  !!UN:P(WOG_OPT_STACK_EXPERIENCE)/?(isStackExp:y);
  !!VR(isStackExp):X1;
  !!UN:J11/(isStackExp);
!!en;

** War Machines Cost 1 gold when surrend
!?FU(OnBeforeBattleUniversal);
  !!UN:P73/?(isEnabled:y);                       [check if option is enabled]

  !!if&(isEnabled)=(FALSE);
    !!re i/(MON_CATAPULT)/(MON_AMMO_CART);
      !!MA:Ci/(RES_GOLD)/?i^gem_%i_machine_cost^ Ci/(RES_GOLD)/1;
    !!en;
  !!en;
!?FU(OnAfterBattleUniversal);
!!UN:P73/?(isEnabled:y);                       [check if option is enabled]
!!if&(isEnabled)=(FALSE);

  !!re i/(MON_CATAPULT)/(MON_AMMO_CART);
    !!MA:Ci/(RES_GOLD)/i^gem_%i_machine_cost^;
    !!VRi^gem_%i_machine_cost^:S(NULL);
  !!en;
!!en;

!?FU(gem_OnOpenCreatureCombatDlg);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/8/4/?(stack:y);

!!UN:C(COMBAT_MANAGER)/4/?(cmbMgr:y) C(stack)/244/4/?(side:y);
!#VA(hero[2]:y) (armyPtr[2]:y);
!!UN:C(cmbMgr:y)/21440/4/?(ground:y) C(cmbMgr)/21452/4/?(hero[0]) C(cmbMgr)/21456/4/?(hero[1])
C(cmbMgr)/21700/4/?(armyPtr[0]) C(cmbMgr)/21704/4/?(armyPtr[1]);

!!VR(oppSide:y):S1 X(side);

!!if&(side);
  !!UN:C(cmbMgr)/21448/4/?(town:y);
!!el;
  !!VR(town:y):S(NULL);
!!en;

!!SN:E4447296/(CALLCONV_THISCALL)/(stack)/(hero[side])/(armyPtr[side])/(town)/(hero[oppSide])/(armyPtr[oppSide])/(ground);         [recalc luck and morale for stack only]

!?FU(gem_CreateERMHook);

// open creatureInfoIncombat;

!!SN:Ex1/1/6240062/(gem_OnOpenCreatureCombatDlg); // for morale stat changing


//stat changing
!!SN:Ex1/1/4500782/(gem_OnAfterArmySetNegativeMorale); // for morale stat changing

!!SN:Ex1/1/4501536/(gem_OnAfterArmySetNegativeLuck); for negative luck stat changing in combat only
!!SN:Ex1/1/4447389/(gem_OnAfterArmySetPositiveLuck); for positive luck stat changing in combat only

!!SN:Ex1/1/4501694/(gem_OnCreatureGetLuckLvl); for luck stat changing not in combat only


// text changing
!!SN:Ex1/1/4505906/(gem_OnCreatureLuckDescriptionHalfingPart);
!!SN:Ex1/1/4506010/(gem_OnCreatureLuckDescriptionSpellPartStart);
!!SN:Ex1/1/4506086/(gem_OnCreatureLuckDescriptionSpellPartEnd);


!!SN:Ex1/1/4505740/(gem_OnCreatureArchiDevilDescriptionCreate);
!!SN:Ex1/1/4504226/(gem_OnCreatureArchAngelDescriptionCreate);
!!SN:Ex1/1/4504330/(gem_OnCreatureGhostDragonDescriptionCreate);
!!SN:Ex1/1/4504347/(gem_OnCreatureGhostDragonDescriptionCreate);
  

!!SN:Ex1/1/4608191/(gem_OnAfterArtSpellCasting);  


!?FU(gem_OnCreatureArchAngelDescriptionCreate);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(namePtr:y);
  !!if&i^gem_MonPlusMoraleChanger^;
    !!SN:H^monname^/i^gem_MonPlusMoraleChanger^/1/?z3;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/9598952;                         [set new ptr at mon name]
    !!VRi^gem_MonPlusMoraleChanger^:S0;
    !!VR(power:y):S2;  
  !!el;
    !!VR(power:y):S1;
  !!en;
  !!FU(gem_BufferEndingEditor):P6969508/(power);



!?FU(gem_OnCreatureArchiDevilDescriptionCreate);
  !!if&i^gem_MonMinusLuckChanger^;
    !!SN:H^monname^/i^gem_MonMinusLuckChanger^/1/?z2;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/9598440;                         [set new ptr at mon name]
    !!VR(power:y):S2;
    !!VRi^gem_MonMinusLuckChanger^:S0;
  !!el;
    !!VR(power:y):S1;
  !!en;

  !!FU(gem_BufferEndingEditor):P6969512/(power);

!?FU(gem_BufferEndingEditor);
!#VA(bufferPtr:x) (newEnding:x);

  !!UN:C(bufferPtr:x)/4/?(facingPtr:y);
  !!SN:B(facingPtr:y)/d/?z1;
  !!SN:Kz1/?(length:y);
  !!VR(length):-1;
  !!SN:Kz1/(length:y)/^%(newEnding)^;
  !!SN:B(facingPtr:y)/d/z1;

!?FU(gem_OnCreatureLuckDescriptionHalfingPart)&i^gem_MonPlusLuckChanger^;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/16/4/?(monLuck:y) C(ebp)/20/4/?(heroLuck:y)
C(ebp)/16/4/d-i^gem_MonPlusLuckPower^ C(ebp)/20/4/di^gem_MonPlusLuckPower^;
*!VRi^weNeedReturn^:S(TRUE);
*!IF:L^%(monLuck) %(heroLuck:y)^;
!?FU(gem_OnCreatureLuckDescriptionSpellPartStart)&i^gem_MonPlusLuckChanger^;/i^weNeedReturn^;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y); C(ebp)/16/4/?(bonusLuck:y) C(ebp)/20/4/?(luck:y);
*!if&i^weNeedReturn^;
*!IF:L^%^;
  !!SN:H^monname^/(MON_GHOST_BEHEMOTH)/1/?z3;
  !!FU(gem_BufferEndingEditor):P6969508/i^gem_MonPlusLuckPower^;

  !!UN:C6969508/4/?(txtPtr:y);
  !!SN:E6388190/(CALLCONV_CDECL)/?z2/(txtPtr:y)/z3;/0/0;
  !!FU(gem_BufferEndingEditor):P6969508/1;

  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/9598440 C(ebp)/16/4/di^gem_MonPlusLuckPower^;
  C(ebp)/20/4/d-i^gem_MonPlusLuckPower^ C(ebp)/20/4/d-i^gem_MonPlusLuckPower^ ;
  !!VRi^gem_MonPlusLuckPower^:S(NULL);
*!en;

!?FU(gem_OnCreatureLuckDescriptionSpellPartEnd)&i^gem_MonPlusLuckChanger^;/i^weNeedReturn^;
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4505994; return dunction described above
!!VRi^gem_MonPlusLuckChanger^:S(NULL);


!?FU(OnGameEnter);      [block wog luck/morale combat bonuses]
!!re i/0/4;
  !!UN:C7725542/i/1/144;
!!en;

!?FU(gem_OnAfterArmySetNegativeMorale);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/?(morale:y);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/?(oppArmy:y);

  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/-4/4/?(ownArmy:y);
  !!FU(gem_ArmyCompareTypeIteraror):P(ownArmy)/(MON_SUPREME_ARCHANGEL)/?(result:y);

  !!VR(moraleChanger:y):S0;
  !!if&(result:y);
    !!VRi^gem_MonPlusMoraleChanger^:S(MON_SUPREME_ARCHANGEL);
    !!VR(moraleChanger:y):+1;
  !!el;
    !!VRi^gem_MonPlusMoraleChanger^:S(NULL);
  !!en;


  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/20/4/?(oppArmy:y);

  !!if&(oppArmy:y);
    !!VR(currentDecrease:y):S0;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/?(bone:y); using native iterator value as bone/ghost dragon already there;
    !!VR(decrease:y):S0;
    !!if&(bone)<>7;
      !!VR(currentDecrease:y):S1;
    !!en;
    
    !!FU(gem_ArmyCompareTypeIteraror):P(oppArmy)/(MON_BLOOD_DRAGON)/?(result:y);
    !!if&(result);
      !!VR(minusMoralMonId:y):S(MON_BLOOD_DRAGON);
      !!VR(decrease:y):S2;
    !!el;
      !!FU(gem_ArmyCompareTypeIteraror):P(oppArmy)/(MON_DRACOLICH)/?(result:y);
      !!if&(result:y);
        !!VR(minusMoralMonId:y):S(MON_DRACOLICH);
        !!VR(decrease:y):S1;
      !!el;
        !!VR(minusMoralMonId:y):S(NULL);
      !!en;
    !!en;
    !!VRi^gem_MonMinusMoralePower^:S(decrease) F(currentDecrease)/(decrease);
    !!VRi^gem_MonMinusMoraleChanger^:S(minusMoralMonId);
    !!if&(decrease);
      !!VR(moraleChanger):-(decrease) +(currentDecrease);
    !!en;

  !!en;
  !!if&(moraleChanger:y);
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBX)/4/d(moraleChanger:y);
  !!en;
!?FU(gem_OnCreatureGhostDragonDescriptionCreate)&i^gem_MonMinusMoralePower^;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/?(dragonId:y);
!!if&(dragonId:y)=(NO_MON);
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/i^gem_MonMinusMoraleChanger^;
!!el;
  !!if&i^gem_MonMinusMoraleChanger^;
    !!VR(dragonId):Si^gem_MonMinusMoraleChanger^;
  !!en;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EDX)/4/(dragonId:y);
    !!VRi^gem_MonMinusMoraleChanger^:S(NULL);
    !!VR(power:y):Si^gem_MonMinusMoralePower^;
    !!VRi^gem_MonMinusMoralePower^:S(NULL);
    !!FU(gem_BufferEndingEditor):P6969512/(power);
!!en;


!?FU(gem_OnAfterArmySetNegativeLuck);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/20/4/?(oppArmy:y);

  !!FU(gem_ArmyCompareTypeIteraror):P(oppArmy)/(MON_HELL_BARON)/?(result:y);
  !!if&(result:y);
    !!VR(luckChanger:y):S-2;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_ECX)/4/?(arch:y); using native iterator value as devil/archdevil already there;
    !!if&(arch:y)<>7;
      !!VR(luckChanger):+1;
    !!en;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/d(luckChanger:y); change luck by hostile creatures 
    !!VRi^gem_MonMinusLuckChanger^:S(MON_HELL_BARON);
  !!en;

!?FU(gem_OnAfterArmySetPositiveLuck);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EBP)/4/?(ebp:y) C(ebp)/12/4/?(ownArmy:y);
  !!FU(gem_ArmyCompareTypeIteraror):P(ownArmy)/(MON_GHOST_BEHEMOTH)/?(result:y);
  !!if&(result);
    !!VR(luckChanger:y):S2;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/d(luckChanger:y); change luck by ally creatures
    !!VRi^gem_MonPlusLuckChanger^:S(MON_GHOST_BEHEMOTH);
    !!VRi^gem_MonPlusLuckPower^:S2;
  !!el;
    !!VRi^gem_MonPlusLuckChanger^:S(NULL);
    !!VRi^gem_MonPlusLuckPower^:S(NULL);
  !!en;

!?FU(gem_OnCreatureGetLuckLvl);
  !!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(ownArmy:y);
  !!FU(gem_ArmyCompareTypeIteraror):P(ownArmy)/(MON_GHOST_BEHEMOTH)/?(result:y);
  !!if&(result);
    !!VR(luckChanger:y):S2;
    !!UN:Cx1/(STRUCT_HOOK_CONTEXT_EAX)/4/d(luckChanger:y); change luck by ally creatures
    !!VRi^gem_MonPlusLuckChanger^:S(MON_GHOST_BEHEMOTH);
    !!VRi^gem_MonPlusLuckPower^:S2;
  !!el;
    !!VRi^gem_MonPlusLuckChanger^:S(NULL);
    !!VRi^gem_MonPlusLuckPower^:S(NULL);
  !!en;

!?FU(gem_ArmyCompareTypeIteraror);
!#VA(armyPtr:x) (monId:x) (result:x);
!!VR(result):S(NULL);
!!if&(armyPtr);
  !!re i/0/(ARMY_SLOT_LAST);
    !!VR(offset:y):Si *(SIZEOF_INT);
    !!UN:C(armyPtr)/(offset)/4/?t;
    !!if&t=(monId);
      !!VR(result):S(TRUE);
      !!br;
    !!en;
  !!en;
!!en;


// Magog's Fireball attack to indirect targets respecsts fire immunity (same as in HotA)
!?FU(gem_CreateERMHook);
!#VA(address:x);

!!SN:E(address)/1/4454655/(gem_OnCalcMonsterDamage);                      [trigger on calculating monster damage]

!?FU(gem_OnCalcMonsterDamage);
!#VA(address:x);

!!UN:C(address)/(STRUCT_HOOK_CONTEXT_EDI)/4/?(stackPtr:y);
!!UN:C(stackPtr)/244/4/?(side:y) C(stackPtr)/248/4/?(stackPerSide:y);
!!VR(stack:y):S(side) *(BATTLE_STACKS_PER_SIDE) +(stackPerSide);

; Exit if for some reaosn the stack ID is wrong
!!FU|(stack)<(BATTLE_STACK_FIRST)/(stack)>(BATTLE_STACK_LAST):E;
; Exit if the stack is the one being targeted
!!BG:E?(targetStack:y);
!!FU&(stack)=(targetStack):E;

; Check if the stack has fire immunity
!!BM(stack):F?(flags:y);
!!VR(isFireImmune:y):S(flags) &(MON_FLAG_FIRE_IMMUNITY) B;
!!FU&(isFireImmune)=0:E;

; Jump if the target has fire immunity
!!SN:X?(var:y)/0;
!!UN:C(address)/(STRUCT_HOOK_CONTEXT_RET)/4/4454786;


// Enable AI's Berserk casting
; This script replaces 50% of AI's Fireball/Inferno/Meteor Shower casting to Berserk
; This script assumes that Berserk is a fire spell. AI will only cast Berserk when it has Advanced/Expert Fire Magic
; This script requires BG:E returns a valid stack to work
; This script checks the targeted stack and see if it can receive Berserk - may be improved to include the surroudning stacks and evalute whether casting Berserk is ideal
!?FU(OnBeforeBattleAction)&i^battle_ai_%i(battle_acting_side)^;
; Exit if it is not hero casting
!!BG:A?(action:y);
!!FU&(action)<>(BATTLE_ACTION_HERO_CAST):E;

; Exit if the hero does not learn Berserk
!!BG:H?(hero:y);
!!HE(hero):M(SPELL_BERSERK)/?(hasBerserk:y);
!!FU&(hasBerserk)<>(TRUE):E;

; Exit if the hero does not have Fire Magic level greater than Advanced
!!HE(hero):S(SKILL_FIRE_MAGIC)/?(spellLv:y);
!!TRi^battle_x^/i^battle_y^/i^battle_z^:G?(overlay:y);
!!VR(spellLv)|(overlay)=46/(overlay)=226:S(SKILL_EXPERT);
!!FU&(spellLv)<=(SKILL_BASIC):E;

; Now there is a chance to change the target spell to Berserk if it is casting Fireball/Inferno/Meteor Shower
!!BG:S?(spell:y);

!!if|(spell)=(SPELL_FIREBALL)/(spell)=(SPELL_INFERNO)/(spell)=(SPELL_METEOR_SHOWER);
  ; Check if the hero has sufficient mana to cast Berserk
  !!SS(spell):C(spellLv)/?(cost:y);
  !!SS(SPELL_BERSERK):C(spellLv)/?(newCost:y);

  !!HE(hero):I?(mana:y)/1;
  !!VR(newMana:y):S(mana) +(cost) -(newCost);

  !!if&(newMana)>0;
    ; Check if the target can receive Berserk (only the target but not the surrounding)
    !!BG:E?(stack:y);

    !!if&(stack)>(NO_STACK);            [The target must be alive]
      !!BM(stack):Z?(stackStruct:y);
      !!UN:C(COMBAT_MANAGER)/(UNC_INT)/?(cmbMgr:y);
      !!SN:E5914512/(CALLCONV_THISCALL)/(cmbMgr)/(SPELL_BERSERK)/i^battle_acting_side^/(stackStruct)/1/1; [can stack apply buff/debuff]

      !!if&v1;
        ; Check if it is lucky enough to replace (50% chance)
        !!VR(random:y):R0/0/1;          [Customise the chance here]

        !!if&(random)=0;
          !!HE(hero):I(newMana)/1;
          !!BG:S(SPELL_BERSERK);
        !!en;
      !!en;
    !!en;
  !!en;
!!en;


************************************************************************
************************************************************************
************************** ADVENTURE MAP FIXES *************************
************************************************************************
************************************************************************
fill refugees by mons to evade pikeman creatures there
!?FU(OnEveryDay)&i^timerWeekDay^=1/i^timerOnce^;

    !!FU(GetMaxMonsterId):P?(lastMon:y);
    !!UN:P200/?(isRefugeeSync:y);
    !!if&(lastMon)=(MON_DRACOLICH)/(isRefugeeSync)<>(TRUE);

      !!UN:U(OBJ_REFUGEE_CAMP)/(ANY_OBJ)/?(campsAmount:y);
      !!if&(campsAmount);
        !!re i/1/(campsAmount);
          !!UN:U(OBJ_REFUGEE_CAMP)/(ANY_OBJ)/i/2;
          !!FU(gem_GetRandomMon):P?(mon:y)/5/(MON_AZURE_DRAGON)/(MON_RUST_DRAGON)/(MON_FAERIE_DRAGON)/(MON_CRYSTAL_DRAGON)/(MON_DRACOLICH);
          !!MA:G(mon)/?(growth:y);
          !!OB2:T?(objType:y);
          !!if&(objType)=(OBJ_HERO);
            !!HEv2/v3/v4:N?(heroId:y);
            !!FU(gem_AdvMgr_HideHero):P(heroId:y);
          !!en;
          !!OB2:U(mon) C(growth);
          !!if&(objType)=(OBJ_HERO);
            !!FU(gem_AdvMgr_ShowHero):P(heroId:y);
          !!en;
        !!en;
      !!en;
    !!en;

!?FU(gem_OnAfterArtSpellCasting);
!!UN:C(COMBAT_MANAGER)/4/?(cmbMgr:y);
!!SN:E4625200/(CALLCONV_THISCALL)/(cmbMgr);         [recalc luck and morale]

witch huts - set all Sec Skills fix (not SKILL_NAVIGATION/ not SKILL_NECROMANCY)
!?FU(OnAfterErmInstructions);
  !!UN:C(GAME_MANAGER)/(UNC_INT)/?(value:y);
  !!VR(address:y):S(value) +128980;
  !!UN:C(address)/1/?(mapType:y); [y11=114 ?? ???????? (????[r]andom_maps)] 

  !!if&(mapType)=114;
    !!UN:U(OBJ_TOWN)/(ANY_OBJ)/?(townsAmount:y);
    !!UN:U(OBJ_RANDOM_TOWN)/(ANY_OBJ)/?(randomTownsAmount:y);
    !!VR(townsAmount)&(randomTownsAmount):+(randomTownsAmount);

    !!re i/(MAP_TOWN_FIRST)/(townsAmount)/1/-1;
      !!FU(Town_CanBuildingBuilt):Pi/31/?(canBuild:y);
      !!CA0/i&(canBuild):B6/31;
    !!en;
  !!en;


// Fix hero scouting after closing hero screen with new arts equipped // see gem_fixes.erm
!?FU(OnAfterHeroInteraction);
!!FU(gem_CalculateScoutingRadiousForAllHeroes):P;

!?FU(OnCloseHeroScreen);
!!FU(gem_CalculateScoutingRadiousForAllHeroes):P;

!?FU(gem_CalculateScoutingRadiousForAllHeroes);
  !!OW:Cd/?(clickedPlayer:y);

  !!if&(clickedPlayer)=i^timerOwner^;
    !!FU(gem_GetPlayerActiveHeroesList):P(clickedPlayer)/?(herArray:y);

    !!if&(herArray)<>0;
      !!FU(gem_UpdateScoutingRange):Pd/(herArray);
    !!en;

  !!en;

// Fix Hd mod clicks outside Swap Mgr
!?FU(OnHeroesMeetScreenMouseClick)|i^mouse_action^=(MOUSE_LMB_PRESSED)/i^mouse_action^=(MOUSE_RMB_PRESSED);
  !!FU(H3Dlg_GetCurrentDlg):P?(currentDlg:y);

  !!UN:C(currentDlg)/(STRUCT_H3DLG_WIDTH)/(UNC_INT)/?(dlgWidth:y);
  !!UN:C(currentDlg)/(STRUCT_H3DLG_HEIGHT)/(UNC_INT)/?(dlgHeight:y);

  !!if|i^mouse_x^<0/i^mouse_y^<0/i^mouse_x^>(dlgWidth)/i^mouse_y^>(dlgHeight);
    !!CM:R0;
  !!en;



; Archer30's hacks

!?FU(OnEveryDay)&i^timerOnce^;
; 904 - Disable Erm error report
; 905 - Option for checking whethere there was an error report generated
!!UN:P904/(TRUE) P905/(FALSE);

// Fix occasionally a neutral stack with invalid quantity is put on the map. These stacks would be removed from the map here.
!!VR(x:y):S-1;

!!re i;
  !!UN:U(OBJ_MONSTER)/(ANY_OBJ)/-1/(x)/(y:y)/(z:y);
  !!br&(x)<0;

  !!MO(x)/(y)/(z):G?(qty:y);
  !!UN:P905/?(hasError:y);

  !!if&(hasError);
    !!UN:P905/(FALSE);
    !!UN:O(x)/(y)/(z)/1;                [Debug msg can be added here to help collect debug info from players]
  !!en;
!!en;

!!UN:P904/(FALSE) P905/(FALSE);


// Fix a bug where the hero could fight himself/herself with spacebar pressing when flying over the entrance of an enemy's town.
!?FU(OnKeyPressed)&i^key^=(KEY_SPACE);
!#VA(key:x) (preventDefault:x);

; Exit if not on adv map (can be replaced by OnKeyPressed_AdvMap in ERA 3.9.4)
!!SN:F^GetGameState^/?(screen1:y)/?(screen2:y);
!!FU&(screen2)<>(DLG_ADVMAP):E;

; Check if there is a hero active
!!OW:Ai^timerOwner^/?(hero:y);

!!if&(hero)>(NO_HERO);
  ; Check if the hero's current location is the entrance of a town
  !!HE(hero):P?(x:y)/?(y:y)/?(z:y);
  !!UN:P904/(TRUE) P905/(FALSE);        [904 - option for disabling erm error report. 905 - option for checking whether there is an erm error]
  !!CA(x)/(y)/(z):P?(townX:y)/?(townY:y)/?(townZ:y);
  !!UN:P905/?(hasError:y);

  !!if&(hasError)<>(TRUE)/(x)=(townX)/(y)=(townY)/(z)=(townZ);
    ; Check if the hero and the town belongs to different team
    !!CA(x)/(y)/(z):O?(townOwner:y);

    !!if&i^timerOwner^<>(townOwner);
      !!OW:Ti^timerOwner^/?(timerTeam:y) T(townOwner)/?(townTeam:y);

      ; Prevent default action (battle initialization) if the hero and the town are in different teams
      !!VR(preventDefault)&(timerTeam)<>(townTeam):S(TRUE);
    !!en;
  ; Reset option 905 if we got an error (a.k.a. the hero's current location is not a town)
  !!el;
    !!UN:P905/(FALSE);
  !!en;

  ; Reset option 904 in any case
  !!UN:P904/(FALSE);
!!en;


** Fix of the heroes and towns reordering
!?FU(OnAdventureMapLeftMouseClick)&999/i^mouse_action^=(MOUSE_LMB_PRESSED);/i^WOG_IsHdMod^=(TRUE);
  !!UN:J8/1/^wog scripts.pac^;  // if wog scripts mod is loaded

  !!if&-(TRUE);
    !!if&i^mouse_item^>39/i^mouse_item^<=43:;  heroes listing
      
      !!VR(itemID:y):Si^mouse_item^-39; 
      
      !!if&i^key_alt^;
        !#VA(hero[8]:y);
        !!OW:O(CURRENT_PLAYER)/?(hrOnMap:y)/?(hero[0])/?(hero[1])/?(hero[2])/?(hero[3])/?(hero[4])/?(hero[5])/?(hero[6])/?(hero[7]);
        !!OW:O(CURRENT_PLAYER)/(itemID)/?(clickHero:y);

        !!if&(clickHero)<>(NO_HERO);
          !!re i/0/(hrOnMap)/1/-1;
            !!if&(hero[i])=(clickHero);
              !!VR(hero[i]):S(hero[0]);
              !!VR(hero[0]):S(clickHero);
              !!OW:O(CURRENT_PLAYER)/(hrOnMap)/(hero[0])/(hero[1])/(hero[2])/(hero[3])/(hero[4])/(hero[5])/(hero[6])/(hero[7]);
              !!CM:R0;
              !!UN:R1;
              !!br;
            !!en;
          !!en;
        !!en;

        !!FU:E;
      !!en;

      !!if&i^key_shift^;
        !!OW:O(CURRENT_PLAYER)/1/(itemID)/0;
        !!CM:R0;
        !!UN:R1;
        !!FU:E;
      !!en;

    !!el&i^mouse_item^>32/i^mouse_item^<=36;
      !!VR(itemID:y):Si^mouse_item^-32; 

      !!if&i^key_alt^;
        !!OW:W(CURRENT_PLAYER)/?(townsOnMap:y) N(CURRENT_PLAYER)/(itemID)/?(clickTown:y);

        !!re i/0/(townsOnMap)/1/-1;
          !!OW:W(CURRENT_PLAYER)/i/?(townId:y);

          !!if&(clickTown)=(townId);
            !!OW:W(CURRENT_PLAYER)/0/?(firstTownId:y) W(CURRENT_PLAYER)/0/(townId) W(CURRENT_PLAYER)/i/(firstTownId);
            !!CM:R0;
            !!UN:R1;
            !!br;
          !!en;
        !!en;

        !!FU:E;
      !!en;

      !!if&i^key_shift^;
        !!OW:N(CURRENT_PLAYER)/1/(itemID)/0;
        !!CM:R0;
        !!UN:R1;
      !!en;
    !!en;
  !!en;


  *** Instant Reveal Scouting Radius

!$OB81;                                         // Trigger after visiting Scolar
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!$OB104;                                        // Trigger after visiting University
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!$OB113;                                        // Trigger after visiting Witch Hut
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!$OB5/(ART_SPECULUM);                           // Trigger after visiting Speculum
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!$OB5/(ART_SPYGLASS);                           // Trigger after visiting Spyglass
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!?FU(OnAfterHeroGainLevel);                     // Trigger after lvl-up
!!FU(gem_UpdateScoutingRange):P(CURRENT_HERO);

!?FU(OnEveryDay)&i^timerDay^=1/i^timerOnce^;    // Trigger after game starts
!!re i/(HERO_FIRST)/(HERO_LAST_WOG);            // For each hero
  !!FU(gem_UpdateScoutingRange):Pi;
!!en;

  ** End of Script **

************************************************************************
************************************************************************
**************************** COMMANDER FIXES ***************************
************************************************************************
************************************************************************

// Fix occasionally commander receiving incorrect exp with campaign transfer
!?FU(OnTransferHero);
  !#VA(hero:x);

  !!UN:P(WOG_OPT_DISABLE_COMMANDERS)/?(cmdDisabled:y);
  !!FU&(cmdDisabled):E;
  !!CO(hero):X1/?i^cmd_exp_%(hero)^;

!?FU(OnAfterErmInstructions);
  !!UN:P(WOG_OPT_DISABLE_COMMANDERS)/?(cmdDisabled:y);
  !!FU&(cmdDisabled):E;

  !!SN:F^IsCampaign^;
  !!FU&v1<>(TRUE):E;

  !!re i/(HERO_FIRST)/(HERO_LAST_WOG);
    !!if&i^cmd_exp_%i^>0;
      !!COi:X1/i^cmd_exp_%i^;
      !!VRi^cmd_exp_%i^:S0;
    !!en;
  !!en;

************************************************************************
************************************************************************
******************************* LUCK FIXES *****************************
************************************************************************
************************************************************************

!?FU(gem_CreateERMHook);
!!SN:Ex1/1/4461853/(gem_CheckMeleeNegativeLuck);
!!SN:Ex1/1/4453947/(gem_CheckRangeNegativeLuck);

!?FU(gem_CheckMeleeNegativeLuck);
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4461866;                                                 [Jump over hero check]
!!FU(gem_CheckNegativeLuck):Px1;

!?FU(gem_CheckRangeNegativeLuck);
!!SN:X?y99/0;
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_RET)/4/4453960;                                                 [Jump over hero check]
!!FU(gem_CheckNegativeLuck):Px1;

!?FU(gem_CheckNegativeLuck);
!!UN:Cx1/(STRUCT_HOOK_CONTEXT_ESI)/4/?(currentStackPtr:y) C(currentStackPtr)/1260/4/?(luck:y); 
!!UN:C(currentStackPtr)/248/4/?(currentStack:y) C(currentStackPtr)/244/4/?(side:y);

!!VR(currentStack)&(side): +(BATTLE_STACKS_PER_SIDE);                                         [For right side]

!!if&(luck)<0;
  !!UN:C4605324/1/?(maxBadLuck:y);                                                            [Read max value from bad morale and use it for misfortune]
  !!VR(maxBadLuck)&(maxBadLuck:y)<0: *-1;                                                             
  !!VR(luck):*-1 F1/(maxBadLuck);
  !!VR(rand:y):R0/1/12;
  !!if&(rand)<=(luck);
    !!UN:C(currentStackPtr)/112/4/-1;                                                         [set stack atrr "isLucky" to -1]
    !!BA:Q?(isQuick:y);
    !!if&(isQuick)=0;
      !!FU(GetTextFileString):P^genrltxt^/45/?(str:z);
      !!BM(currentStack):T?t N?n;
      !!VRn:-1 F0/1;
      !!SN:H^monname^/t/n/?(name:z);
      !!SN:E6388190/(CALLCONV_CDECL)/?(varStr:z)/(str:z)/(name);                              [Replace %s in str with name and put result into varStr]
      !!MM:S(varStr:z);
      !!SN:P^BADLUCK^;
      !!BM(currentStack):V48;
    !!en;
  !!en;
!!en;

!?FU(OnStackToStackDamage)&x9=0;                                                              [(x1 - atck stack, x2 - def stack, x4 - final dmg)]
!!BMx1:Z?(structure:y);
!!UN:C(structure)/112/4/?(isLucky:y);

!!if&(isLucky)=-1;
  !!VRx4::2;                                                                                  [decrease base damage]
!!en;

************************************************************************
************************************************************************
******************************* FUNCTIONS ******************************
************************************************************************
************************************************************************
