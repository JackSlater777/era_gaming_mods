ZVSE2
** Author orig.  : igrik
** Updated by    : Archer30
** Name          : single-slot composite artifacts
** Name rus.     : однослотовые сборные артефакты
** Options       : 730

** Combination artifacts now takes only 1 slot and can no longer be disassembled.
; Archer30: You can :)


; Function for setting or restoring UN:C values
; The function has to be here for it to be executed on ! #
!?FU(ES_730_SetOrRestoreValues);
!#VA(mode:x);                           [0 for setting up new values, 1 for restoring to the original]

!!if&(mode)=0;
  !!UN:C5086678/(UNC_INT8)/-23 C5086679/(UNC_INT)/213;
  !!UN:C5086930/(UNC_INT8)/4;
  !!UN:C5103297/(UNC_INT8)/-21 C5103298/(UNC_INT)/-1869574075;
  !!UN:C5103396/(UNC_INT8)/4;
  !!UN:C5103429/(UNC_INT)/54321;
  !!UN:C5122319/(UNC_INT16)/-32023 C5122321/(UNC_INT)/-1879048191;
  !!UN:C5123506/(UNC_INT16)/5355;
  !!UN:C5123521/(UNC_INT16)/-1813 C5123523/(UNC_INT8)/-112 C5123524/(UNC_INT)/-1869574000;
  !!UN:C5123868/(UNC_INT16)/5355;
  !!UN:C5962191/(UNC_INT16)/-11215;
!!el;
  !!UN:C5086678/(UNC_INT8)/i^era_730_patch1^ C5086679/(UNC_INT)/i^era_730_patch2^;
  !!UN:C5086930/(UNC_INT8)/i^era_730_patch3^;
  !!UN:C5103297/(UNC_INT8)/i^era_730_patch4^ C5103298/(UNC_INT)/i^era_730_patch5^;
  !!UN:C5103396/(UNC_INT8)/i^era_730_patch6^;
  !!UN:C5103429/(UNC_INT)/i^era_730_patch7^;
  !!UN:C5122319/(UNC_INT16)/i^era_730_patch8^ C5122321/(UNC_INT)/i^era_730_patch9^;
  !!UN:C5123506/(UNC_INT16)/i^era_730_patch10^;
  !!UN:C5123521/(UNC_INT16)/i^era_730_patch11^ C5123523/(UNC_INT8)/i^era_730_patch12^ C5123524/(UNC_INT)/i^era_730_patch13^;
  !!UN:C5123868/(UNC_INT16)/i^era_730_patch14^;
  !!UN:C5962191/(UNC_INT16)/i^era_730_patch15^;
!!en;

!?FU(ES_730_SetCombiArtsToSingleSlot);
!!UN:P730/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

; Store the current values
!!UN:C5086678/(UNC_INT8)/?i^era_730_patch1^ C5086679/(UNC_INT)/?i^era_730_patch2^;
!!UN:C5086930/(UNC_INT8)/?i^era_730_patch3^;
!!UN:C5103297/(UNC_INT8)/?i^era_730_patch4^ C5103298/(UNC_INT)/?i^era_730_patch5^;
!!UN:C5103396/(UNC_INT8)/?i^era_730_patch6^;
!!UN:C5103429/(UNC_INT)/?i^era_730_patch7^;
!!UN:C5122319/(UNC_INT16)/?i^era_730_patch8^ C5122321/(UNC_INT)/?i^era_730_patch9^;
!!UN:C5123506/(UNC_INT16)/?i^era_730_patch10^;
!!UN:C5123521/(UNC_INT16)/?i^era_730_patch11^ C5123523/(UNC_INT8)/?i^era_730_patch12^ C5123524/(UNC_INT)/?i^era_730_patch13^;
!!UN:C5123868/(UNC_INT16)/?i^era_730_patch14^;
!!UN:C5962191/(UNC_INT16)/?i^era_730_patch15^;

; Set new values
!!FU(ES_730_SetOrRestoreValues):P0;

; Set combi arts to single slot on erm instruction to be compatible with combi arts equipped from the map start
!#FU(ES_730_SetCombiArtsToSingleSlot):P;
!#VRi^es_730_isStartGame^:S(TRUE);

; Set to single slot again at the start of the game for the compatibility with Emerald (but no need to store values)
!?FU(OnGameEnter);
!!if&i^es_730_isStartGame^;
  !!VRi^es_730_isStartGame^:S(FALSE);
!!el;
  !!FU(ES_730_SetCombiArtsToSingleSlot):P;
!!en;

!?FU(OnGameLeave);
!!UN:P730/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

; Restore to default values
!!FU(ES_730_SetOrRestoreValues):P1;

; Disable the following code as it is not working - might be used for further improvements
; Disassemble combination artfacts
!?FU(OnHeroScreenMouseClick)&i^mouse_action^=(MOUSE_RMB_PRESSED);
!!UN:P730/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

!!VR(slot:y):S(NO_ART_SLOT);
!!VR(item:y):Si^mouse_item^;

!!if&(item)>=2/(item)<=14|(item)=20;
  !!VR(slot):S(item) -2;
!!el&(item)>=40/(item)<=44;
  !!VR(slot):S(item) -21;
!!en;

!!FU&(slot)=(NO_ART_SLOT):E;

!!HE(CURRENT_HERO):N?(hero:y);
!!FU(ES_730_ManageArtifactMouseAction):P(hero)/(slot);

; Hero Meetintg Screen trigger - Disabled as it does not work with HD mod
!?FU(OnHeroesMeetScreenMouseClick)&i^mouse_action^=(MOUSE_RMB_PRESSED);
!!FU:E;

!!UN:P730/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;

!!VR(hero:y):S(NO_HERO);
!!VR(item:y):Si^mouse_item^;

!!if&(item)>=27/(item)<=39|(item)=45;
  !!VR(slot:y):S(item) -27;
  !!CM:H?(hero)/?(otherHero:y);
!!el&(item)>=89/(item)<=93;
  !!VR(slot):S(item) -80;
  !!CM:H?(hero)/?(otherHero:y);
!!el&(item)>=46/(item)<=58|(item)=64;
  !!VR(slot):S(item) -46;
  !!CM:H?(otherHero)/?(hero);
!!el&(item)>=94/(item)<=98;
  !!VR(slot):S(item) -75;
  !!CM:H?(otherHero)/?(hero);
!!en;

!!FU&(hero)=(NO_HERO):E;

!!FU(ES_730_ManageArtifactMouseAction):P(hero)/(slot);

!?FU(ES_730_ManageArtifactMouseAction);
!#VA(hero:x) (slot:x);

; Get (art) from the slot clicked, exit if it is a scroll
!!HE(hero):A1/?(art:y)/(slot);
!!FU&(art)>=(ART_META_SPELLBOOK):E;

; Loop through all the artifacts and see if (art) is a combination artifact
!!FU(NewIntArray):P?(combinationPartsList:y);
!!FU(GetMaxArtifactId):P?(lastArt:y);

!!re i/(ART_FIRST)/(lastArt);
  ; Check if the artifact is a part of a combination artifact
  !!UN:Ai/5/?(combiArtPart:y);

  ; If the artifact is a part, get the combination artifact ID
  !!if&(combiArtPart)>(NO_ART);
    !!UN:A(combiArtPart)/?(combiArt:y)/d/d;

    ; Push the artifact ID to the array if it is a part of the (art) set
    !!FU(Array_Push)&(combiArt)=(art):P(combinationPartsList)/i;
  !!en;
!!en;

; Exit if (art) is not a combination artifact
!!SN:M(combinationPartsList)/?(size:y);
!!FU&(size)=0:E;

!!CM:R0;

; Ask if the player wants to disassemble the artifact
!!SN:H^art^/(art)/1/?(desc:z);
!!FU(GetTextFileString):P^genrltxt^/734/?(str:z);
!!VR(msg:z):S(desc) +^%T(es.endl)^ +^%T(es.endl)^ +(str);
!!IF:Q2/^%(msg)^;

; Exit if the player choose not to disassemble
!!FU&-2:E;

; Exit if not enough slots for all the parts
!!FU(ES_730_CheckIfEnoughSlots):P(hero)/(combinationPartsList)/?(result:y);

!!if&(result)=(FALSE);
  !!FU(GetTextFileString):P^genrltxt^/153/?(msg);
  !!IF:M^%(msg)^;
  !!FU:E;
!!en;

; Remove the combination artifact from the hero
!!FU(ES_RemoveArtFromSlot):P(hero)/(slot);

; Loop through all the parts of the array put them to the hero
; Note that if the hero has not enough slots, artifacts may be destroyed!
!!re i/0/(size)/1/-1;
  !!SN:M(combinationPartsList)/i/?(artPart:y);
  !!HE(hero):A4/(artPart);
!!en;

!!SN:D;

!?FU(ES_730_CheckIfEnoughSlots);
!#VA(hero:x) (combinationPartsList:x) (result:x);

; Check if all the parts can be allocated
; The following script assumes that all the parts have regular slots for equipment (for example, there should never be an art that can be equipped both the head and the misc slots)
; War Mechines, spell book should never be a part of combination artifacts
; There should be at least one part uses the same slot with the combination artifact
!!VR(result):S(TRUE);

; Get the quantity of ring/misc slots available
!!VR(availRingSlots:y):S0;

!!re i/(ART_SLOT_RIGHT_RING)/(ART_SLOT_LEFT_RING);
  !!HE(hero):A1/?(artOfSlot:y)/i;
  !!VR(availRingSlots)&(artOfSlot)<=(NO_ART):+1;
!!en;

!!VR(availMiscSlots:y):S0;
!!VR(miscArtSlots[5]:y):C(ART_SLOT_MISC_1)/(ART_SLOT_MISC_2)/(ART_SLOT_MISC_3)/(ART_SLOT_MISC_4)/(ART_SLOT_MISC_5);

!!re i/0/(miscArtSlots[SIZE])/1/-1;
  !!HE(hero):A1/?(artOfSlot)/(miscArtSlots[i]);
  !!VR(availMiscSlots)&(artOfSlot)<=(NO_ART):+1;
!!en;

; Get the quantity of backpack slots available
!!VR(availBackpackSlots:y):S1;          [Initialise as 1 because the combination artifact slot can be used for one of the parts]

!!re i/(ART_SLOT_BACKPACK_FIRST)/(ART_SLOT_BACKPACK_LAST);
  !!HE(hero):A1/?(artOfSlot)/i;
  !!VR(availBackpackSlots)&(artOfSlot)<=(NO_ART):+1;
!!en;

; Loop through all the parts and calculate how many backpack slots are needed
!!SN:M(combinationPartsList)/?(size:y);

!!re i/0/(size)/1/-1;
  !!SN:M(combinationPartsList)/i/?(artPart:y);
  
  !!UN:A(artPart)/2/?(artPosUNA:y);     [Note that there is difference between UN:A slots and HE:A!]

  !!if&(artPosUNA)=0;
    !!VR(availBackpackSlots):-1;
  !!el&(artPosUNA)>=1/(artPosUNA)<=6|(artPosUNA)=8;
    !!if&(artPosUNA)=1;
      !!VR(artPosHEA:y):S(ART_SLOT_HEAD);
    !!el&(artPosUNA)=2;
      !!VR(artPosHEA):S(ART_SLOT_SHOULDERS);
    !!el&(artPosUNA)=3;
      !!VR(artPosHEA):S(ART_SLOT_NECK);
    !!el&(artPosUNA)=4;
      !!VR(artPosHEA):S(ART_SLOT_RIGHT_HAND);
    !!el&(artPosUNA)=5;
      !!VR(artPosHEA):S(ART_SLOT_LEFT_HAND);
    !!el&(artPosUNA)=6;
      !!VR(artPosHEA):S(ART_SLOT_TORSO);
    !!el&(artPosUNA)=8;
      !!VR(artPosHEA):S(ART_SLOT_FEET);
    !!en;

    !!HE(hero):A1/?(artOfSlot:y)/(artPosHEA);
    !!VR(availBackpackSlots)&(artOfSlot)>(NO_ART):-1;
  !!el&(artPosUNA)=7;
    !!if&(availRingSlots)>0;
      !!VR(availRingSlots):-1;
    !!el;
      !!VR(availBackpackSlots):-1;
    !!en;
  !!el&(artPosUNA)=9;
    !!if&(availMiscSlots)>0;
      !!VR(availMiscSlots):-1;
    !!el;
      !!VR(availBackpackSlots):-1;
    !!en;
  !!en;

  !!br&(availBackpackSlots)<0;
!!en;

!!VR(result)&i<(size):S(FALSE);

** end
