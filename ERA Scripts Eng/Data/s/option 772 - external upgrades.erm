ZVSE2
** Author orig.  : Algor
** Rewritten by  : Archer30
** Name          : External upgrades
** Name rus.     : Внешние улучшения
** Options       : 772


!$OB(OBJ_CREATURE_GENERATOR_1);         [Посещение внешнего жилища тип 17]
!!UN:P772/?(wogOption:y);               [проверяем включена ли опция 772]
!!FU&(wogOption)<>(TRUE):E;             [Выход, если опция не включена]

!!DW998:O?(owner:y);
!!FU&(owner)<>i^timerOwner^:E;

!!DW998:M0/?(mon1:y)/?(num1:y) M1/?(mon2:y)/?(num2:y) M2/?(mon3:y)/?(num3:y) M3/?(mon4:y)/?(num4:y);
!!FU(ES_772_ManageMonUpgrades):P(mon1)/(mon2)/(mon3)/(mon4);

!$OB(OBJ_CREATURE_GENERATOR_4);         [Посещение внешнего жилища тип 20]
!!UN:P772/?(wogOption:y);               [проверяем включена ли опция 772]
!!FU&(wogOption)<>(TRUE):E;             [Выход, если опция не включена]

!!DW998:O?(owner:y);
!!FU&(owner)<>i^timerOwner^:E;

!!DW998:M0/?(mon1:y)/?(num1:y) M1/?(mon2:y)/?(num2:y) M2/?(mon3:y)/?(num3:y) M3/?(mon4:y)/?(num4:y);
!!FU(ES_772_ManageMonUpgrades):P(mon1)/(mon2)/(mon3)/(mon4);

!$OB(OBJ_REFUGEE_CAMP);                 [Посещение лагеря беженцев]
!!UN:P772/?(wogOption:y);               [проверяем включена ли опция 772]
!!FU&(wogOption)<>(TRUE):E;             [Выход, если опция не включена]

!!OB998:U?(mon1:y) C?(controlWords:y);  [тип/количество существ в лагере]
!!FU&(controlWords)=0:E;                [выход, если лагерь пуст]

!!FU(ES_772_ManageMonUpgrades):P(mon1)/(NO_MON)/(NO_MON)/(NO_MON);

!?FU(ES_772_ManageMonUpgrades);
!#VA(mon1:x) (mon2:x) (mon3:x) (mon4:x);

; Create arrays for monsters and slots with upgradeds in the hero's army
!!FU(NewIntArray):P?(monsWithUpg:y);
!!FU(NewIntArray):P?(slotsWithUpg:y);

; Loop through all the slots of the hero and check if any has an upgrade
!!re i/(ARMY_SLOT_FIRST)/(ARMY_SLOT_LAST);
  !!HE(CURRENT_HERO):C0/i/?(heroMon:y)/?(num:y);

  !!if&(heroMon)>(NO_MON);
    !!FU(GetUpgradedMonster):P(heroMon)/?(upgMon:y);

    ; Loop through all the monsters of the dwelling/rufugee camp and see if any is the same as the upgraded monster
    !!if&(upgMon)>(NO_MON);
      !!re (ptr:y)/(@mon1)/(@mon4);

        ; Push the monster id and slot number to arrays for setting up IF:N dialogu
        !!if&x(ptr)>(NO_MON)/(upgMon)=x(ptr);
          !!FU(Array_Push):P(monsWithUpg)/(PIC_TYPE_MONSTER)/(heroMon);
          !!FU(Array_Push):P(slotsWithUpg)/i;

          ; Don't check other slots when one upgrade is found
          !!br;
        !!en;
      !!en;
    !!en;
  !!en;
!!en;

; Set up and show dialog depending on the amout of up grades available in the army
!!SN:M(monsWithUpg)/?(size:y);

; Exit the function if there is no upgraded monsters found
!!if&(size)<2;
  !!FU:E;
; Show a dialogue for confirming whether to upgrade if there is only one available
!!el&(size)=2;
  !!SN:M(slotsWithUpg)/0/?(slot:y);
; Show a dialogue for selecting a stack to upgrade if there are multiple available
; Store the slot a human player selected, or select a random slot for AI players
!!el&(size)>2;
  !!if&1000;
    !!FU(ES_SetupMultiPicDlg):P(monsWithUpg);
    !!IF:N(MSG_TYPE_CHOOSE_PIC_OR_CANCEL)/^%T(es.772.title)%T(es.772.select)^/?(choice:y);
    !!FU&(choice)=-1:E;

    !!SN:M(slotsWithUpg)/(choice)/?(slot:y);
  !!el;
    !!SN:M(slotsWithUpg)/?(size:y);
    !!VR(size): -1;
    !!VR(slot):R0/0/(size);
  !!en;
!!en;

; Set up AI upgrades and human player upgrading dialogue
; AI upgrades with full stack exp preserved
!!if&1000;
  !!FU(ES_772_ShowUpgradeOffer):P(slot);
!!el;
  !!HE(CURRENT_HERO):C0/(slot)/?(mon:y)/?(num)/?(exp:y)/2;
  !!FU(GetUpgradedMonster):P(mon)/?(upg:y);
  !!HE(CURRENT_HERO):C0/(slot)/(upg:y)/?(num)/(exp)/2;
!!en;

!?FU(ES_772_ShowUpgradeOffer);
!#VA(slot:x);

!!HE(CURRENT_HERO):C0/(slot)/?(mon:y)/?(num:y);

!!FU(GetUpgradedMonster):P(mon)/?(upg:y);

; Create an array for IF:N dailogue and set up the first two pics as the non-upgraded and upgraded monster
!!FU(NewIntArray):P4/?(monAndUpgCosts:y);
!!SN:V(monAndUpgCosts)/0/(PIC_TYPE_MONSTER)/(mon)/(PIC_TYPE_MONSTER)/(upg);

!!re i/(RES_FIRST)/(RES_LAST_SOD);
  !!if&i<>(RES_GOLD);
    !!MA:C(mon)/i/?(monRes:y) C(upg)/i/?(upgRes:y);
    !!VR(cost:y):S(upgRes) -(monRes) F0/(INT_MAX);
  ; Calculate the cost of gold
  !!el;
    !!MA:C(mon)/i/?(monRes:y) C(upg)/i/?(upgRes:y);
    !!VR(cost:y):S(upgRes) -(monRes) F0/(INT_MAX);

    ; Gheck the game difficulty and Diplommatic Bargain level (if enabled) to raise or reduce the cost
    !!UN:J2/?(diff:y);
    !!VR(coef:y):S(diff) -1;

    !!UN:P772/?(diploBargain:y);

    !!if&(diploBargain);
      !!HE(CURRENT_HERO):S(SKILL_DIPLOMACY)/?(lv:y);

      !!re (art:y)/(ART_STATESMANS_MEDAL)/(ART_AMBASSADORS_SASH);
        !!HE(CURRENT_HERO):A2/(art)/?(backpacked:y)/?(equipped:y);

        !!VR(lv)&(equipped):+1;
      !!en;

      !!VR(coef):-(lv);
    !!en;

    !!VR(percent:y):S10 +(coef) *10;
    !!VR(cost):*(percent) :100;
  !!en;

  ; Push the negative cost (for IF dialogue) to the array
  !!VR(totalCost:y):S(cost) *(num) +100000 *-1;
  !!FU(Array_Push)&(cost)>0:P(monAndUpgCosts)/i/(totalCost);
!!en;

!!FU(ES_SetupMultiPicDlg):P(monAndUpgCosts);

; Check if the player can afford
!!VR(canAfford:y):S(TRUE);
!!SN:M(monAndUpgCosts)/?(size:y);

!!re (index:y)/4/(size)/1/-1;
  !!SN:M(monAndUpgCosts)/(index)/?(res:y);
  !!VR(index):+1;
  !!SN:M(monAndUpgCosts)/(index)/?(totalCost);
  !!VR(totalCost):*-1 -100000;

  !!OW:Ri^timerOwner^/(res)/?(totalRes:y);
  !!VR(leftRes:y):S(totalRes) -(totalCost);

  !!if&(leftRes)<0;
    !!VR(canAfford):S(FALSE);

    !!br;
  !!en;
!!en;

; Offer the player to upgrade if can afford
!!if&(canAfford);
  !!if&(num)=1;
    !!SN:H^monname^/(mon)/0/?(monName:z);
    !!SN:H^monname^/(upg)/0/?(upgName:z);
  !!el;
    !!SN:H^monname^/(mon)/1/?(monName);
    !!SN:H^monname^/(upg)/1/?(upgName);
  !!en;

  !!SN:T^es.772.ask^/?(ask:z)/^num^/(num)/^mon^/(monName)/^upg^/(upgName);
  !!IF:N(MSG_TYPE_QUESTION)/^%T(es.772.title)%(ask)^/?(confirm:y);

  !!if&(confirm);
    ; Manage resources changes if the upgrade is not free
    !!if&(size)>4;
      !!re (index:y)/4/(size)/1/-1;
        !!SN:M(monAndUpgCosts)/(index)/?(res:y);
        !!VR(index):+1;
        !!SN:M(monAndUpgCosts)/(index)/?(totalCost);
        !!VR(totalCost):*-1 -100000;

        !!OW:Ri^timerOwner^/(res)/d-(totalCost);
      !!en;
    !!en;

    !!HE(CURRENT_HERO):C0/(slot)/?(mon:y)/?(num:y)/?(exp:y)/2;

    ; Manage exp reduction - the upgrade modifier is 2/3 of the normal value for human players
    !!if&(exp)>0;
      !!EA(mon):U?(coef:y);
      !!VR(coef):*2 :3;
      !!VR(exp): *(coef) :1000;
    !!en;

    !!HE(CURRENT_HERO):C0/(slot)/(upg:y)/(num:y)/(exp)/2;

    !!SN:D;
    !!UN:R2;
  !!en;
; Show the dialogue without choices if the player cannot afford
!!el;
  !!IF:N(MSG_TYPE_MES)/^%T(es.772.title)%T(es.772.cantAfford)^;
!!en;

** end
